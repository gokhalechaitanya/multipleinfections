(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    520517,       9966]
NotebookOptionsPosition[    515898,       9834]
NotebookOutlinePosition[    516275,       9851]
CellTagsIndexPosition[    516232,       9848]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Vector borne disease model", "Title",
 CellChangeTimes->{{3.796383092830926*^9, 
  3.796383097769664*^9}},ExpressionUUID->"f9217768-3574-4a12-8890-\
ded7295f3592"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Single infection", "Chapter"]], "Subtitle",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.7993893315752907`*^9, 3.79938933440606*^9}, 
   3.799392534350747*^9, 3.825397801302622*^9},
 ExpressionUUID -> "7faab043-e9b1-4b33-a2c9-505b3f7f27a4"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3X2wZVV54P+Uzh+/qqmxaqZSU5UIHZQEkaFMjIIBrBTRBhV1SsNLh2o1
DDbdokhsmC5skCSoPd1BiY0GGgo0oyANUYgaXpqXshxQIDQBgmIapRBpIBCZ
iaDddBPC/t3v6n4O667e5+3ec+6+d5/vH5++t+89d+999jlnrfWsZ7286sQ/
+cPlL/uVX/mV0/+/qX/+8H+c8QennfY/Vh/9H6b+85bV//OkE18+9c1vT/3+
16e+4YcvvPzfJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSpIn04osvVvjZz35WPfzww9Wj
jz6avvr9wv+e15TXtun3mCRJkiZPxBjLly+vDj/8cLUIrynxRtPvMUmSJE0e
4gz6v2mX3n7HnZ3+cC1svJa8pk9tfdA4Q5IkSXMujzP4+uLucVRa2PLXtOn3
mCRJkiZPtEkXv/kQ44wWMc6QJElSk2iTMob/sLe83TijRXgt4zVt+j0mSZKk
yRNtUvIZxBtNt481Go9vedB8hiRJkhpT9n033T7WaBAzGmdIGgZlh2uct+97
1ziX1JQXd8cZ7/iDQyvjjPZwfoakYbnGeTu5xrmkpkSb1HxGu8Rryvippt9j
khaG6J9wjfP2cI1zSU2KNqnrTbUL8YXzwCUNI8+DNl2GaTTMbUtqEuWQ6021
j3WLpGHZ59Q+1gWSmhTlkHVLu1i3SBqWfU7tw2tpbltSU8pyqOkyUaOrW4wz
JA0j+pxc47w9XONcUpMoh5gf5pjcdjHOkDQs+5zaxzXOJTWpbJM2XSZqNIwz
JA2L8sI1ztvFukBSk6IcijVQmy4TZd0iqRnmM9onr9+bfn9JmjxRDtGH5Zjc
9jDOkDQs1wRpH9c4l9SkaJPah9UuxhmShuV6U+1jXSCpSWU51HSZKOsWSc0w
n9E+1gWSmlSWQ02XibJukdQMc9vtY10gqUlRDrnGSLtYt0galmuct491gaQm
RTlkH1a7WLdIGpa57faxLpDUpCiH3AO2XaxbJA3LNc7bx7pAUpMoh/L9Qpsu
E2XdIqkZrnHePtYFkppUlkNNl4mybpHUDMfQto91gaQmRTlk3dIu1i2ShmWf
U/tYF0hqEuUQY3GtW9rFukXSsIwz2se6QFKTKIecn9E+1i2ShuUa5+1jXSCp
SWU51HSZKOsWSc1wDG37WBdIalKUQ65l2C7WLZKG5Rrn7WNdIKlJlEPEF/Zh
tYt1i6RhOYa2fawLJDWpLIeaLhNl3SKpGdYF7WNdIKlJZTnUdJko6xZJzXB+
RvtYF0hqUlkONV0myrpFUjNc47x9rAskNaksh5ouE2XdIqkZzs9oH+sCSU0q
y6Gmy0RZt0hqxnytC17Yua166omtaR0sbNv5QuPXNArPb/tFej6PPfm0dYGk
VirLoabLXVm3SGrGKNc4H1VMQFv8zk1XVMuOOaLa97UHV29799HVtfdsXfCx
BrHTo5v/Nq0j/PYPrR1brGFdIKlJZTnUdNkr6xZJzRjVGuf//Mjd1ZIjDkvH
uuG+n8zqWE9tfbBaddwh1a//2q+l46342JnVPY88OdY4g9jm+5tvq773Dw+M
7TzEGT/YdHG132/9VnXQO1dUP33iX6wLJLVOWQ411S5ui23PPJ368J5+ZlvP
n83kONYtksZpVHXBYw/dXi1+zaJq0T4HVlff/cis2uqPPrCpOnj/30y5jKu+
t6X62c9+NvZcBrHNGUsXVx88+6Lq8Z89O5Zz5HHGge9aZZwhqZXKcigvnyjP
I/dNP1d8T9t3oeesx4HY4Mq/PD3dy09dumnXfar52UyOY90iadxGEWfQfiaf
QZyx16LfmRZnkCf4xS9+0fk/j+X/1DXPbt9ZWxb+6LsbU5zxG69/V8ov8Njy
cRwjjsPXftcYj6dsLR8f5zzk9f8tjWfiXtQdM57LoOeMY8c5+ftOPuO9p1YP
bjXOkNQ+ZTkUZeHmW6+t1p6xojrmnUdUBx/8plQW8pW89UkfX1ddf+s/zLiv
vQ3q8uoRH7zjDw6t1n7lxlRv8rOLzzw+5fxXfeFbA92znY8/lv7mlXvvO/Df
WLdImq1R5TPIQSw+YJ+Uz4i5FJSZd33na9X6z61P5SZ9Vjd986pqw/q/qNZ+
9vPVxo0bqx88tHVaeXrL1y6uVn34g9V//S+vSDELY6b4+xg3xTHpA7vu65dV
69auTcfZcOnl6fh15SaP33L/XdXVl12UHs+xrvrmTZ15JLT/0zmXH5vOuf8b
jkjnvPTvbu4cL87J9f7VZ/9XOk6vc+LpJ7dWt918XXquPP6Sy6+uNt+/JcUZ
r957rxRnOD9DUhuV5VAq27+yJvXlRGyxZMmS6v3LTk5f+TnlIuUvZW9dH9Qk
6JZXjxxQijGm6q2IGbiXH/78TQPnM+JvPva5rxtnSJoTIx03NRVn5PkMyrXL
1yxPdcqycy5J/VjRhxWYp/C9Hz3WaZtfdPaJqc552cteXv3H//Sfd9VJRy5J
sQsxAfPDmQfCz6POwhsPPbJaff7GaW13zn/Hty5K/UD5OfGO405K80hY04pz
kj/hnK/41Vemazx+5WfSsThG3TkZ08XjOGc5zornceknV6THEndFvcp89vM+
dXrqgzrkuFXmMyS1UlkOUT8cd+j+qX447dMXpH4jylfKSspg+oLWfOSYVDZS
J/D7KM8iF91tTBVldF1+Oc+d87Vf7NIr510aNLdd5vPj/4Pm1fO+rvxv6mKG
uP7QL86oux/9npd1i6RhjSvOiHKNOIO6g3PQticncPsdd6b8AvUOOdwVa6/o
lKfUO/T5v+ZVi9K4KfLo9ONQ5j24+frqPb//+tR2p67id5Gr4Oe0/dddcVt6
LHUMjz/qoP3Tz4kHNm26ISF3sc+ifaq3vu+MlE+hD4m8dPyMPAV1YH5OyuZ+
54xy+u+vWZ/ilkX7vbVad9GVKY8R4wVYa4r4ifkZ5jMktVGUQ/Tx/OTe+zpl
+gGHv39aDJHHBNQhK5Yek3Ic9D3RDo61B8lDb7rrn6bFGjFel9/l+ee0JvpU
mR6588h753nssm3dK+ddPnbQfHrk83kMv+d+xN9xjiuuub5nXn316jOri6+8
PtUTHIfnwj3Ix01RL1F/UsfwfMm3c7782GWcQZ1b5jMGzdlbt0ga1kjnZ3TJ
Z0S5yZzuKLPI+1634eMpBqFtH21ujvXQP95YvWnfvar9Djm20+fP48k7UFct
XX3htFwAv7vxS59KvyNPwPxq+mOiHCYHHY//93/9eapTVhz1uykHwjVxnbde
9un0WPqRIj+Rl+XlOYmHGAeQnzN+vvbkd6bnRQ4njyW4R6yjxf1wfoaktqIc
op3LvAvawPS9UFa+dvGy2jgjkNugzIy+9iiD6c9h7nLeBx/z3ej/P2TprnXC
qT+Y38Ca6JG75m/LPHZ+/H4573gsdcew+fTIzzP3hBiKvHb8He391K81FVNF
Lj/Pq7/uDYelvDrleH4PYh54zM/4wGl/lo6dXw/i2Hk9GXVoPtaqLmcf96x8
XtYtkoY1jvkZZZxBWUj7PW9Xl2svUSfFz2O9qYgzOBb9Ux94y2+nsvmia+9K
5R6xRCA24fyUjzd+/6fTHv/Fmx/Yox+MuojcRIyNIs6I64w4g2MsW3xgip3q
zskxIl/COeM6I0/z5W//YI/+JPImaWyAcYaklopyiPY7X9k3iPYr5SLtVvLI
3dYCydE2/szK41PbmLnLdXFGjEOlfObx9PNQr/zRR/+8uvaW21K/EnPlmPfH
z2m7U8YPmvOmnI7HDppPz2Mkro/fvef4E1N+oszn0w/GtVN3XH3+qvT4xSec
3cmrE4OUY6S6HZs6Ka6H39E/VtdvFsfJn1ddzj7uDc+Lusy6RdKwRj1uKp8H
nscZlKV5/pXyjbGo0ceVt7mJMyKfQd9X5NQ5Pv085NXP/OS5Ka+85qyz0tfT
V56S/ibiiog79t7391KfTpn/5piIfqq6fEbETnFOzsN5y3Py/CKWiWuvO2+M
qeI5G2dIaquyHKL9z5w1yj7KS+bcUZYyvod8R7c9HaKNTZu/W5zB7yLOiH4e
yl9y1dt3bE+P5Su/u2jdmWksK2V8Ppe6X8475vFFPp38dZTt3XLb0a4nf/2q
Axan48S6g5w7/oZ6LtUVRV49cghxHJ5n5CEiN8GxY/13fs7zjDn3cexYQ6Vu
3FQeexyz+vJpY63ya4znZd0iaVhzMW6Kciqfg9Erzoh8Rj5uKv8ZOeU8t5ty
5ru/51jkmmnz00fD4ynf6+KMXN24qfyczKegbM7PFd9T9sc5qUNizBdzM8rz
ljkc52dIaqOyHIr2+JUb1qTxOZTVlJ2pLTxVHh519NLOPIa8nhgkn8E6Va97
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
dh3lEuV6xBwYxbgpzR/WBZKaRDlEv3qnHJpqQ9Mvf93XL0v7cpPTzddsoq1M
fpg8QdknRZuaPPCKpcekv+HxrFd7yeVXpxwFx8rX70j9+evO7OSfOQfXEetN
5XvscV3xeOpFjs3fRM67XKujzG3n+fQyt53P1WbtWfbX5jlETpznwNxr+qvi
b9J4rSKvTp8g68PzHGJ8V4xJ5mc8J45NfFQeu7we8kr5cfLnlY8T6Jazt26R
ZqZXmy3GGuVfB0HZUX7tJfrH86+9MBZq2DijbmwV5SlfKWeabh9rNKwLJDWJ
coh6quzDIldNWzrqsTzf2ys/nOeTu+WH47HEDtS5eX3J35RrpJTHz6+n12Pj
2Hk+vS4/HfmMmL+dxnvtzsNHzrzuHHEt+XHjZ9He53lHnj7uA/e137Hj3teN
L4hz9Hpe1i1qQq/2Trc2ev59E230soyLcUQ/ufe+9JU2POu58RX0+cfXHPMb
csy/Ti68sIO8QWCcUr63T+yDE8gHgxwvVpz4gU4el7kWoN+Hfhc+68QLM4kz
yGnQX8E5ue5RjJvS/GFdIKlJZTnUdJnYhFh7MB/vlH4+pvGy1i3q9lnsZqZt
9GHa57Npp0e8W9dGz9vp5EFZr4Cvefu8azud9jlf1//FtHZ6tzY6X2mbRzs9
2uixxk/ZRs/b6Tl+Fr/jK4+nrz/WKALt/jh2nDO/jjVnnZXEtcb8hxDPjRwn
Od943ldcc33nnrBfUdwn7lncw7ivzJdjLhy/HyafEfkLrp1z8VpRDub77jRd
hsm6QNLCV5ZDTZeJTSjzGXU5hIVm0uqWXveiro0eX+dbGz3a6bE3SrQn8770
fv3oe7TR+TrVTj/3C5dMa6N360sv+9G7tdGjDZ63z2mj8jX/PWP88jY684rK
Nnq006ONXrbT137283u20Xc/v7rnX7bR83Z63kaPfWjyXEYpcof5axbrYsTX
/DUfFO36tH7E7vGV+fuOfDJfYw2IF57b0Xnf8rt4b/NzvnJu8hD9xkfFPDHe
Dzx38qxxXD5HPM9JrgvaaNLqAknzS5RDjPFn/kPTZWIT6taRbfqa5rpu6XWs
+Tomvdt4l7KNTl86c1foR69ro5dt9T3a6EOMdxmkjV6Od6nrS8/70+Nvoo2e
H7tsn+d96VwjX2mj833EGik3sPu5lX3pg7bRo30eeQvKjmiTx2tSts3rxJhC
lO+HWE+tG95TfHbLNnqINnrkJ2mf0y6PtnmdpsvjmZbh3eKMmHvB+4r3Ba9l
t300MOl9Tm1knCGpSZRDtBFivammy8Qm9Jp3vVBF3RJr5c9kTHrZjz7omHTa
rnk7fTZj0qNtXdeXznu2bKt3a6MjjtOvnR7t83zMS379vca7lO3zujZ6jCEa
pB89x9qe+f9j3dBB2uR5H3r0n/O1ri99pm10NF2eTSLuO+8l1qToNi6K9xOv
f+zj2e1Y+dqDTZdhC1Fai3D3Z3I2xynn+Y2iLjDOkNSEKIcmfUwu8655/vn+
ggtZrKeft7P7jUmvG++S96V3G5Oej3XBmZ88d4++9DTWZfcYe9A+p50+yJh0
9lUsx7tE3iLio5gT362NXjfmJfrSo43er63OOZ7a+DdpnF238S4l2uV5G71u
nf5+bT+pxPuF9xfvWd5f0ZaMNaP4jPG5oFzLx0X10yuf0Wttim5l6qjaygsB
rwPrKlJ+/tFH/zyt8RF52WHuGX09rJWYclDZeu2zqQuMMyQ1hXKIctA+rHaJ
cRS03QcZkx5jXHqNd6kbk17XNqeu7DYOPR/vwv97jXeJvnP+H2PS42u0zcNc
fE6ev+e+6tnlH6n+7eFH5uScUh3ee3x2+GwT48dnMT7rfH7z/vRhjt1tDC2x
NXv3DNr25RrOWLp413reV9xWG1+PCmUCOULmwzfZR/TYQ7dXf/KHh6X9kK75
7r3pdWE8LuXwIONx457x+NM+fUG17Jhd+1Wxt9Js7p9xhqQmleVQU2W0Rit/
TWNvwfIx9qMPjrbMc1d/o/rXP3hbtf2LX96Vo5gH16XJwOc05jjFvtnkCcn5
1a1BNtPzdBtDy3rcN37pU2ke+WsXL+u6N3eUKz/67sa0rsarDlhc3fj9n461
rIv2eb6v61wjDmPvpJjjx3XQl8I9e/Xeew11z4hTNt31T9Ud37oojYU76L2n
pj1gR1EXNP0+ljR5ynKo6fbxQjSqMbnD6Dd+17pltP79X39e/XLNudX/O/CN
1TPvO9GchsYu/zxHviLyF/Gz2cYVpW5jaCnj6K8/6qD9q0X7HFh98eYHuvax
R5ubmOT4lZ+ZtodquUbEIGVd/E3kP8tykPY57XH2gI1+lW7H6HfeWOcr8iJ5
7NbLg5uvr97z+6+v9jvk2F1rBO/+e+7Z4gP2SfeMvES3fEt+z2IvW/LCaz5y
TIpdmDc405yGdYGkJkU51G1+hmNye6sbk1s+Jl87if7C+H6mc0Gin4xzRt9Z
Xd0Sr2nT77E2IM5gzNT/3fe/Vf/vjYdVO264yZyGxiI+w1FOxPeRv4iydRzn
7jWGlrYw44AifuiWO/jnR+6ujjt0/07bOsZBUvZd9/XLOusUs5YCY5261RV8
vhjnyTyumON11TdvSveCcpNj3vK1i6tVy49N897JA6z42JnVpX93c+eYlJU8
F47RWcdh6rzkC8p+oSjLeRy/ZyzW33xp6m8uurJnnoRzXL5meYoHlp1zybTH
5vds6eoLh7pnxHY/2HRxdfD+v1kd9M4VqW6ZSX1hnCGpSVEO1dUtjsntLx+T
e9X3tkx7zmnfq1uvrdaesSLFBIy1pS7iK/f7pI+vS+utziQmo15i/O4bDz0y
1Utln1v+mjb9HlvouJ/kLxgz9X/3+s0Uazx7ymkVsce42nuaLPG5jc8xfeKx
5+A48xelXrntaPcytod+++/96LE9yl7K5b+/Zn16zAGHv7+655EnUzl456Yr
qiVHHJbKP3IPfAXlF3UL/fdl251xQ/SVxGPDO447qbrhvp+kNRzY94h2OGts
veJXX5nKVmIgjscxiENSnmH3377uDbuuYd/XHpzmQOT9QhEvcH38jjKbx9LG
7zVuiXpv2eID0zGpA/J7wnizuGe/8fp3pXtWV5fl9yyPJzj2iqN+t9p7399L
OSTjDEkLTZRDi998SKc+y8tIx+R2l4/JXbH2imnxQqrjvrKmU6dS/8Xaqnzl
54zbJT6h/23YmIy6ibqbOpZ6l/q8rFviNW36PbbQpdf6299JeYwUZ0wh5th5
x5271pGaB9eohaOMKcDnNNaJ5ue0ofk/8QZl61xdW78xtNHufeXe+1Zrv3Lj
HuUW+ey1J78z1RmUicRGMaaIvnra7/StRJ6Cn9M+p1+qE0NNPV/+hjFa/I44
JNafI3exz6J9qre+74zU9ud6WJM8fka/EzEGx6I+4hi00TlvrIPBeckdxHik
PPdB3MK100fDmnusncfaeN3qmKj33rTvXp24qts943yD3LO8Hok9ZHl+M93b
yThDUpOijqurWxyT2/sau43JBfeNumyvRb+T6jjqnxhzSxuC+o6xt9wv+sv4
fayT2qvPKtZpintO/cRrU47fNZ8xOrw/mPvN3IyIM8hpMF/DnIb6mVam7v4/
bd5YH4rPNN+Tu4g4o4xD5upa+61xzrVeff6q1J+0+ISzp5XzqS55YFMnPrj6
7kdSeUc7mcczbijvq+J39MXwu0OOW9U5Vow1ol1OP1L8DZ81yk3a7ORBUu5g
6npuvezT6bHUBREPRC6e9jn1UX5efsd5iZWi/4wyN/IZjMHi+q+4+e5OzNKt
POaa4jnEvIq6e3bdho935l6U/XX5PSNPk5fj9PXx/Hge3O+64xtnSJrPynKo
Ln5wTG59fZuPyc2fD8ckVx7rjBBDlPubRQy3YukxKcfBuTkv94jcerfHc50X
X3l9Ol+cp278rvMzRifNAf/EOSm2yOOMn7/jv1fP/3CLcYa6ytt6sQ83ZVCU
S8QZ/D7f47zJ91O/ffoohx76xxt3zW3e762pXRxlTrSnIwahPIoxRfS3UC+U
62BT3kYbmxw4x6If5gNv+e0UB3z52z+Y1u/C+fkbciIxNop2eLTho8yO83KM
sn+M4+X9Z8RDeZzBsYh7euXvy3qAOIBcRF2dMew9K/82xglQl5RxnXGGpPku
yqFudYtjcuvL7nxMblkXcj94HsQZ3I+ex3lia2e/OOI5rqPMnZdxTT5WrNv4
XfMZo/t8EGs/c+zS6XHGFPIbrnGrEu+ZPCdKfMG+loyXLOOK+ba2dLcxtLkY
51OO5aEsWnXcIantzvggfp7WW3rNolRO058S+3iyhyffM3eNeoO2fZRf9O/T
JqdMq6tv0jiy3feNPoAyn5HW/5s6BmOZOEbEL2X5TbnJeaNfLI8zes3ZzkVO
mfOv+sK3uub7B71n5d/nz4X6t25clnGGpPmMcoicg2NyZz4mt1wHhN8/cu91
qa6kH4/nwnWnPeu6jImKWI3YJHITda9Bni+Keq5u/K51y+g+H+QsOnPAC65x
O3evA+9tPpNNic9cr2uMGIJyi9xkxBKxB2bT+Yp+uo2h7davFGUV43soE+n/
ifZw3kamTyj6myjf86+UXfQFEWdwf+JvmOdXF2eU/S9146b6HYM6i/Y95X6s
WRJxBs+rW26iV/zQa+3ZunsW9Ujcs7o54nEPqUu6zSM3zpA0n734Yvf5GXlZ
7pjcl5Rjcuty2TFfhcdwPcQwxC9XXHN9mstRt/ZvzOko1y3J66NyrmE5fjeu
xbpldJ8P1rCdNjcjGzuV5oN/+zvmNMaMz8o5f317dcyfXpsc98nr5vR7cH6u
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
7Vr3zZgDkdNg7BRjqJgfPs5Yg2PHPHTOq/YY93tHkiRptogz1px1lnPA50iK
Nb79nZTTeP6e+8YeZ9Ae5VzPHLtULcJrymvb9PtZkjRa0UdI+4yxJsyd5avf
L/zveU0nrY+Q5/vYk087P2MO7zftw23nnZ+Mc0545E9olxLTMFZLCx+vJa8p
r23T72dJ0mhFjLF8+fLq8MMPV4vwmhJvNP0ea+L9bIwxt/f8+R9uGfs6t3mc
EfNBtPDlr2nT72VJ0mhRztP/Tbv09jvu7PSHa2HjteQ1fWrrgxNVd8f8DL42
fS2T4sUXX9q7j/WnxjUnPG+TRt5ECx/vF/MZktROL2ZxBl+brnM0Gvlr2vR7
bC6Rv3nbu4+euPiqabznYk749i9+eSzzevM2qfmM9jCfIUntFW3SxW8+pDLO
aI9JjTPMZzSH8VI777hz1/ipqa+jHj+Vt0nNZ7RH/po2/R6WJI0W5Tx9wIe9
5e2VcUZ78FrGa9r0e2yu38/Oz2ju3pPHIJ8xjn3C8zap+Yz2MJ8hSe0VbVLy
GcQbTdc5Go3Htzw4kfmMeD/ztelrmUTcd9qL4xg/lbdJzWe0h/MzJKm9ol1m
PqNdiBknMc7geS9ZsmTinvd8wvuvM35q9/pT/GwUx3V+RvuYz5Ck9qKcp032
jj84tDLOaI9JnZ/B82Ue+KSt5zuf8P4bx/pTeZvUfEZ7OD9Dktor2qTmM9ol
XlPGTzX9HptL7M93283XuRd4w6L9+Ms1545s/768TWo+oz3MZ0hSe0Wb1PWm
2oX4YlLngT+7faf7gc8D3H/27yOnQW5jtnM18jap+Yz2cH6GJLUX5bzrTbXP
pI6bAjHGxo0bXdu2YbwP01q33/7OSOZq5G1S8xntYT5Dktor2qTmM9plkuMM
cjlHHb3UvfrmAd6Laa7G1d9Iscbz99zXeY/O5FjmM9rH+RmS1F7RJjWf0S6T
HGc89cTW6uRTVzoXfJ6ItuS2Cy5O690yloqfzfQ45jPaxXyGJLUX5Tz9vtEm
bbrO0WhMcpzB84+9YJq+Fr30msS8cGKNmaxBlbdJzWe0h/MzJKm9yjZp03WO
RmPS4wz3BJ9/eD3IZRBnzGQNqrxNaj6jPcxnSFJ7RZs01kBtus7RaExSnMHz
Ja4Im+/fUi1fvjx9ffrJrZ2YA01f66TjNYg1qBhHNUyskbdJzWe0h/MzJKm9
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
5O+vWZ/ilkX7vbVad9GVKY+x+dZrU5zFWlPET8zPMJ8hSZqR3fP9qF9fu3hZ
qsvqYgLq5hVLj0k5Dvr0aAfHmo7k9zfd9U/TYo0YB83v8rx+Wmt+qq6MMQkx
niAfH1C2rXuNJSgfO+g4hRgnwWP4PW2h+DvOccU11/ccr7B69ZnVxVden+pf
jsNz4R7k46ao72mXUHfzfBnHwPnyY5dxBm2ZMp8xk7EQxhlqGu9D2um8D//4
hOPT3Hw+C7TPo6077PFGNj+jSz4jPt/M6Y7PFue8bsPHUxlJ2z7a3ByLPpo3
7btXtd8hx3b6/Hk8eQfij6WrL5yWC+B3N37pU+l35AmYX00sFuUFudJ4POtr
UfatOOp3Uw6Ea+I6b73s0+mx9HdEfiIvc8pzcr9v+cqaaeeMn689+Z3peZHD
yWMJ7hHraHE/nJ8hSZop2rDk68lnRJzRLTdBboO6KPrao26jn4y5y3kffMwj
pP//kKW71l+nXmZ+A2vNx5gA/rYcH5Afv99YgngsdfKw4xRi3ANzT4ihGC8Q
f0d7P/UXTsVUMUYiH6/A2DLGK9COz+9BzAOP+RkfOO3P0rHz60EcO29/RNsk
H2tVNxYi7lnd8zLO0HzB+5A+eT4H9IvTZuV9u3z58hQzE3PQxqasGCTmyOOM
Uc3PKOMMrpX2e96uLtde6qyXzB4Tu9ebijiDY9GP8oG3/HYqQy669q70+eR5
BmITzs/n+Mbv/3Ta47948wN79NdQZpKbiLFRxBlxnRFncIxliw9MsVPdOTlG
5Es4Z1xn5Gm+/O0f7NHvQd4k5bDHHGeYz5CkFtuds6d9S/uZdit1yiDrM1I/
fGbl8elvmbtcF2fE+F7qPR5P/xn19R999M+ra2+5LfXXMQeR+ZT8nLY7deeg
Ywm41njsoOMU8hiJ6+N37zn+xJSfKMdJ0L/ItVMnX33+qvT4xSec3RmvQAxS
jpHqdmzq+rgefke/Y11/ZBwnf151YyHi3vC8ytfKOENN433I54n3OvF5iJiD
mPnkU1emmCPWuuuV58j7vkcxPyOfB57HGXzm8zwhn0PGTFLO0ReTt7mJMyKf
wXjSyP1yfMpT8r9nfvLclP9cc9ZZ6evpK09JfxNxRcQde+/7e6nvofwsc0xE
f0pdPiNipzgn5+G85Tl5fhHLxLXXnTfGVPGc5yrOMJ8hSe0TbVLqE+p+6j7m
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
0T+ftqdfrJsXa+bd+KVPpeec70s0F8xnSFJ75W1S44xdov+v3CtkJobpIxxl
f6LzwNU2ZZt0XJ//2P+GtehWrL1iXsQZxAvf33xb9b1/eGCo3OtjD91e/ckf
Hpb2Bb3qe1s66+r98yN3V0uO2LW/0A33/SQdk/6mM5Yu7uwhWrcP+Tg4P0OS
2otyPt9rYZh6b9C2eN5v1nR9Pcjziv6/kz6+blr/Hxh7EM+Hejm+rxt7NUy/
aPQncl7mpc+2P9H5GWob3tdzlc8gznj13nvNmziDdR2IAT549kUDlw3cI/YQ
Za2L/HnQj0L8sfg1i6q9Fv1Ode09W1PZxc9/sOnitA/pO447qbrnkSfn5LmZ
z5Ck9irbpIPUC9RHP/ruxvQ3B71zxR5t8Rz9ZiuO+t3qjYceWd34/Z/OSawx
074/5P1/7H/e2Vdjqu2x+dZrq7VnrEixQOxlHntzE5PU7Tk+TL8o92rZMUek
e0V/Yre9CAdhnKG24X09F/Mz6j63lCl8Huln6NfPz+PisYN8hmPv0nh8eXyu
h/KW9v/bP7Q2faYHOe6Dm6+v3vP7r6/2O+TYXXuwZmVhHmdcffcjnd8xZ23N
R46pFu1zYDVX62M4P0OS2qtskw5SL0S/F/19Bxz+/p5xRrf6bJxm0vcX9V3e
/xd/G7kG6nl+RxywZMmS6v3LTk5f+Tn3gtjk0r+7eVpsMky/KG2ZOzddUR28
/2/Ouj8xHwvX9HtMGoWyTTqu8qP83NJGJ8e5/nPrq3Vr11YbN26sfvDQ1j3K
Mtr+5DivvuyizmM3XHp5temuf6qdg005Sll10zevqjas/4v0+LWf/Xx11Tdv
6uR/OeYtX7u4WrX82Oq//pdXpDJmxcfOTOVMv/woz4Hyatk5l+zx2FQuH7BP
iifycjnKdsqgfn1Io2I+Q5Laq2yTDlIv5HHGooOO7R9n1NRnZf08aP/fuPr+
kPf/fe9Hj017Dscdun+KlaizaWPE+i1PPbG12nL/XakP8Nd/7ddS3RzxAfVn
1PURZ8Rz5Trrrov+xM+sPH7W/YnOz1DblG3SuYgzPnDan1WrPvzBlLeMfoZX
7r1v6gcgP5v/DfEA5SiPQTz+dW84rDrt0xfsUU5S3pC/5LMefxM4PvMmKF/Y
T5R2/8te9vLqFb/6ynQtx6/8TM8xq8QvyxYfWO372oOrL3/7B9PKXcpQcqfR
/xPzM/K/JQfNdZV/Ow7Oz5Ck9irbpMPGGeQzaHfPJM4Ypv9vnH1/edsi+v8i
l0GO4Y5vXdTzuXJtxBrkUI7/0BkpRiH+4ZjkR8p+0bj+i6+8fo9+0X//15+P
pD+R13Lxmw9xvSm1Rh5nzEU+g34DYoT3HH9idcnlV1e333FnKqvoiyDWyMdU
0bdx1EH7p3KOmIIxm3zer/ryeenx/Jw5WtEvQn/C2pPfmcob1oG69pbb0uMZ
m0lcw88jlqDcY68fxnG99X1npGP3ijFiXOub9n0p31zGCo8+sCmVy3V5Zu4t
sQ3nm4s9TM1nSFJ7lW3SYeOMV795WW091i/OoD09TP/fOPv+0K3/jzZEPNfX
Ll7WM6bi/JynHDdFeyXvF43rph4v+0XjWmbbn8hr6fwMtQnv67mcnxF9FazT
FPEEbeLrNnw8faZp89MfQcxw8ZnHp58tXX1hp9yinOTxt3xlTfWaVy1K5Uf8
js84OVLKG46/fcf2TnnD7y5ad2a17qIr0/EpK2+97NPpGORo+40FTWXr7nPy
+J8+sWdfRZTLEWfkv+Na4nyHLF07knX3BokzzGdIUvuUbdJh4wzGTdH2zscE
5WODHvrHG/eIM6K/bZD+P447zr6/eD55/18eS/C7R+69rlMns7Y8vyffEm2D
fu0V2h/EF/SLksPo1i+a17vES9Tz/G4m60s6D1xtU7ZJx9nujc8t7fS8/OAz
T9lHmRNxA2XOB97y2+mzzPoNZb8Abfoo66IMjH4N/mbtV26ctp4156B8if+n
MVlTcQPnHCTOGGT9iV555igPIzaqi1PGEWeYz5Ck9inbpMPGGXvv+3tp/BLt
ZsYWMEcy8LO/+uz/SvUVbXT67fh76tCy/49jRp0TfXExbmicfX8o+//Kv8nb
/dTdjDE785PnVldcc32Kd7rteRHtFfpFf+P170rXTvwV/Zx5v2jZluE5cK5u
/ZGDxBnOz1CblG3ScbV783Z6PoYyb4NHnJHWtX5gU+qjoCysW1MvYgo+67Ev
Rax5TZlCW58+iHO/cElas45j5nO3okyL8qBfmcY9in6ZuvW0O/MzuoybSvsH
7X5OzFUb9/q2zs+QpPYq26TDxhmMT6JPrhzLFPMlqUd5TF6fRdzQq/8v+tpo
m3Nd4+r7K9sV+TpTOXIqV25Y0xnnxWPjeR919NIUa5E7qVvXtq5fNO5h3i9a
tmXKsRbDYN6L+Qy1SR5nzMX8jLp8QPnZpCwiZ0ubfNF+b522fkRedqw67pBU
Dqy74rZOfpJy8G++tD7tl5eXm5Qn9JvE557rGabvJPK/XD9rSdTlQ2N+BmVs
OQ884gx+T/9I3XMaJfMZktReZZt02DiD+IG51qtXT7fmrLPS19NXnpL68yM/
T1yQ6rDXLOrZ/8f8BOpJ4hDmPdD3Rx086r6/qOd69f/l7Q+ubdOmG1IOZcXS
Y6atQcNY7sir5O0V2gf9+kXLOGO2/YnOz1Db8L6ey/kZMW6x7nNbxhnMCYs4
o648q4sz8jLltpuvS2XK0qOP6pQnrMtNLjPiDH7G+NBh8hnn/PXtPcdNdVtv
nPKH50ScQfkzzjWnnJ8hSe1VtkmHjTOohxg7FPMVqBOp1+L/aX7GaxbtEWdE
/19dHVbX/xf5hFH3/cX5+vX/lc+f50d+gnt23dcvS2tccb2M7frizbv2B8zz
Gf36Rcs5JBGLzbQ/0fkZapuyTTruOGOQzy1lZ4xB6rZ2d+RvKa+ibODnqbzM
vuc8PJb1MdLxpsrH1A+zu0wbtO+EsinKs3yNq/w59JoHHuUPZXTEGeO61/lr
aj5DktqnbJMOG2fEelPdHlfONyT3kMcZ3fr/yGdQl+f9f3nfH/M+yr4/6t9h
+/6inuvX/9drDw7aCLQ1PnHCkZ05Jxyj3D+jV79oXT4j70+cSZzBWDhyVU2/
x6RRKNuk444z8n1vun1uyTfQT8Ga1vysbNfna0xEnwHlHX9DXpSxlmUcwGeW
8o/zs94c58/jjH7rWpDTzfMx/H2vsan95oGPe68+52dIUnuVbdJh44zYp2+Y
dW2j/49xU8y/6Nb/R6xAPZvmTZIfyPsBd8cc9P3RHiePQN8ffXnUycPMz4j+
v27tBPbGoE2Q4pguz5PrYZ2rfC5G7J+R1/fd6vK6fEbEGb3W0u2G19J54GqT
PM6YL/kMyr58HYmDj1ySxnPyeaZcoeygbMn7PeIYrDd30HtPTevPxeOJP9hj
h/WpGIeZ5zPS2hhTj6c86BVrxBy1Xuva5vMzyjgjxp5Shi4+4eyBytDZMJ8h
Se1VtkmHjTOYPzDsfuDR/8ffl3te1/X/MT8j+v7KvEK/vr9B1mqK/r983mfU
u8Qy5CmIY/K5FyUeR3siz2cMM5901PPAHTeltuF9PRfzM8o8ZL98Rnz+13zk
mPQ3lKXMWWNu2jHvPCL9jLXz8n1y8se/8dAjq/cvO7k6+dSV1YoTP5D2Msr3
C01jTTf/bep3YE8gxoqefvZnds3dqOn3yOd+ddunL19v6tp7pu8VSrnFeoD8
/Vzu02c+Q5Lap2yTDhtn9Nunr67fLO//ox5k/+9u/X/EGNSZ1L3saZc/lt/V
9f39/TXrU3t/kL6/qFe79f/l609GrMExGZfNNfCVa2buCLFR3fyMunWseuUz
yrV5Z7JPlnGG2qZsk46r3RufeT4/5boQaUzjVJufdefo64/PJj8ndtiw/i9S
bMH6EOyZE2tgM4etHJtEH0nM/Y7Ho5xzBvpmeGw87vgPndGz/yHf67PMGce6
tuz5wfWVa3Hkf0tZNpP9e2YSZ5jPkKT2mW2cEeOmuj02nyOZr5/Iz/P+P/ry
yv4/6uaYAx7zJ9grvFffX7Tf6fsj1ujX91fX5i/jJurdz6w8vjMXJNoCS5Ys
6bQR+DkxBvv4RduD+nPQcVP5XuzRn8gxZ9qfaJyhtinbpONs+/IZ7LYvDvv2
8Ls0NrJov6fxnE/s6ofgs8f3dfMjyvPE4+O4Zd42jh2P7VWexXEjJ0PZWLeH
RpyrHCdK2U75GfsXjfM+w/kZktReM40zaCPzN+QM8jZyXZxB3xhjA8r8fPTn
EVtEX97b3n10igsYIxWPjb6/6CvkcdGvxxq3Zd9f2ldv6rhxzH59fxFLxPir
bnNGbvrmVWn/8dhDI+IerplxEjEuO6/rB+0Xza8v70+M+SnGGZp0eZwxznxG
G1C+PLj5+jQHhLGt+ZitfuUgfSqUPexVNO4xU/lraj5DktqnbJMOWjcwtoc6
qezTq6vv6vrNQloH98mt6dyp/2/qmN36/8rHduv7i8dyLB7Xa/52/vhua0MF
+jE5f/RX5n2QjKHqds08pl+/aP6zTn/iVAw30/5E4wy1De/ruZif0RaRT6VM
I8/abz43ZfWdm65I41Ape8a9nm1+neYzJKmdyjZp03VjU6L/jzqW/r9yPPVc
IY6JMVrlHPlhGGeobco2adNlxkLAOhzLjjkizV+74ua7e5Zp5J5Zn4McLfuj
9lrLe5TMZ0hSe5Vt0qbrxSbl/X/Mixj3eo6lGBvNmLDZ9icaZ6htyjZp0+XF
QkB+lBwF401P+vi6rvlR8q43fulTqcwYJPcxSs7PkKT2KtukTdeLTaNPj/4/
5pPQ/zfutVbKc4+qP9E4Q23D+9p8xvDysau9Htdr7vs4mc+QpPYq26RN14lN
o66N/j/W1R1k/41RnXeU/YnGGWob3tfOz2gf52dIUnuVbdKm65z5IO//m8s5
GtGfOIocinGG2qZskzZdTmg0zGdIUnuVbdKm6xyNhnGG2qZskzb9GdNoOD9D
ktqrbJM2XedoNIwz1Da8r81ntI/5DElqr7JN2nSdo9EwzlDb8L52fkb7OD9D
ktqrbJM2XedoNIwz1DZlm7Tpz5hGw3zG/9++HatIEQVRAP3M+YNJjA38QXcj
8RtGEGSCFY0UdKUaB5aKyym9nuCww0Td9Htbt7rmAeTqmXS75jBDn0Gankm3
9xgznM8AyNUz6XbNYYY+gzS1rs0z8phnAOTqmXS75jBDn0GaWtfOZ+RxPgMg
V8+k2zWHGfoM0vRMur3HmGGeAZCrZ9LtmsMMfQZpeibd3mPMcD4DIFfPpNs1
hxn6DNLUujbPyGOeAZCrZ9LtmsMMfQZpal07n5HH+QyAXD2TbtccZugzSNMz
6fYeY4Z5BkCunkm3aw4z9Bmk6Zl0e48xw/kMgFw9k27XHGboM0hT69o8I495
BkCunkm3aw4z9BmkqXXtfEYe5zMAcvVMul1zmKHPIE3PpNt7jBnmGQC5eibd
rjnM0GeQpmfS7T3GDOczAHL1TLpdc5ihzyBNrWvzjDzmGQC5eibdrjnM0GeQ
pta18xl5nM8AyNUz6XbNYYY+gzQ9k27vMWaYZwDk6pl0u+YwQ59BmpeZ9NvD
4/GZf1v1Ft/fvTfPAAilz8ikzyBNresfT5+fv75+c+TSdF/Or9av4V7qmeoz
APJU7b5cLkcmffvweOTSUt+lfv5bruNPfq5nWc+0vtteYzDl5++Zxu1deKLb
vfW/aV7e3+13cNvrC4BZ9b/9er0+n8/nI5emO51O69dwL/VMP338oHYDAHB3
t9/Z9Pf8qf6He7yp/tE7QgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADu5RdguXA+
    "], {{0, 559}, {
    794, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{571.8947368421032, Automatic},
  ImageSizeRaw->{794, 559},
  PlotRange->{{0, 794}, {0, 559}}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.8253978013029346`*^9},
 ExpressionUUID -> "b971ad4d-1835-4864-8af3-5a2cd3bbe14c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["V", "s"], " ", "=", " ", 
   RowBox[{
    SubscriptBox["\[CapitalNu]", "V"], " ", "-", " ", 
    SubscriptBox["V", "i"]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["H", "s"], " ", "=", " ", 
   RowBox[{"\[CapitalNu]", " ", "-", " ", "\[CapitalIota]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dVIdt", " ", "=", " ", 
   RowBox[{
    RowBox[{"\[CapitalIota]", " ", 
     SubscriptBox["V", "s"], " ", "\[Gamma]"}], " ", "-", " ", 
    RowBox[{"\[Alpha]", " ", 
     SubscriptBox["V", "i"]}], " ", "-", 
    RowBox[{"dv", " ", 
     SubscriptBox["V", "i"]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dIdt", " ", "=", " ", 
   RowBox[{
    RowBox[{
     SubscriptBox["V", "i"], "  ", 
     SubscriptBox["H", "s"], " ", "\[Beta]"}], " ", "-", " ", 
    RowBox[{"\[Sigma]", " ", "\[CapitalIota]"}], " ", "-", " ", 
    RowBox[{"d", " ", "\[CapitalIota]"}]}]}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.796383130746943*^9, 3.7963832590739603`*^9}, {
   3.796963956067911*^9, 3.796963970577861*^9}, {3.796966861193234*^9, 
   3.796966867489696*^9}, 3.7991365276336727`*^9, {3.7993905860084953`*^9, 
   3.799390591738469*^9}, 3.825397801303112*^9},
 ExpressionUUID -> "84f6a158-a93a-4cb3-8cb7-c3f332fe53fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"dVIdt", "\[Equal]", "0"}], ",", " ", 
      RowBox[{"dIdt", " ", "\[Equal]", "0"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["V", "i"], ",", " ", "\[CapitalIota]"}], "}"}]}], "]"}], "//",
   "FullSimplify"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.796383262098621*^9, 3.796383301944216*^9}, 
   3.799136527633931*^9, 3.8253978013032503`*^9},
 ExpressionUUID -> "d35d8b93-116c-4670-991e-a4922fbb9b5f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["V", "i"], "\[Rule]", "0"}], ",", 
     RowBox[{"\[CapitalIota]", "\[Rule]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["V", "i"], "\[Rule]", 
      FractionBox[
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]"}], ")"}]}], " ", 
         RowBox[{"(", 
          RowBox[{"d", "+", "\[Sigma]"}], ")"}]}], "+", 
        RowBox[{"\[Beta]", " ", "\[Gamma]", " ", "\[CapitalNu]", " ", 
         SubscriptBox["\[CapitalNu]", "V"]}]}], 
       RowBox[{"\[Beta]", " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]", "+", 
          RowBox[{"\[Gamma]", " ", "\[CapitalNu]"}]}], ")"}]}]]}], ",", 
     RowBox[{"\[CapitalIota]", "\[Rule]", 
      FractionBox[
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]"}], ")"}]}], " ", 
         RowBox[{"(", 
          RowBox[{"d", "+", "\[Sigma]"}], ")"}]}], "+", 
        RowBox[{"\[Beta]", " ", "\[Gamma]", " ", "\[CapitalNu]", " ", 
         SubscriptBox["\[CapitalNu]", "V"]}]}], 
       RowBox[{"\[Gamma]", " ", 
        RowBox[{"(", 
         RowBox[{"d", "+", "\[Sigma]", "+", 
          RowBox[{"\[Beta]", " ", 
           SubscriptBox["\[CapitalNu]", "V"]}]}], ")"}]}]]}]}], "}"}]}], 
  "}"}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.796383283939158*^9, 3.796383302341413*^9}, 
   3.796963996549923*^9, 3.799125915131772*^9, 3.799136527634878*^9, 
   3.799390595468607*^9, 3.825397801303388*^9},
 ExpressionUUID -> "73cc7806-0c7a-4580-aa8d-4147691a5461"],

Cell["Mutant\[CloseCurlyQuote]s dynamic", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.7993860992661657`*^9, 3.799386102610815*^9}, 
   3.799392534351013*^9, 3.825397801303523*^9},
 ExpressionUUID -> "953a4ec1-3aa1-4fca-a06b-4fc2043d8009"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dVimdt", " ", "=", " ", 
   RowBox[{
    RowBox[{
     SubscriptBox["\[CapitalIota]", "m"], " ", "VSeq", " ", 
     SubscriptBox["\[Gamma]", "m"]}], " ", "-", " ", 
    RowBox[{"\[Alpha]", " ", 
     SubscriptBox["V", "im"]}], " ", "-", " ", 
    RowBox[{"dv", " ", 
     SubscriptBox["V", "im"]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dImdt", " ", "=", " ", 
   RowBox[{
    RowBox[{
     SubscriptBox["V", "im"], " ", "Seq", " ", 
     SubscriptBox["\[Beta]", "m"]}], " ", "-", " ", 
    RowBox[{"\[Sigma]", " ", 
     SubscriptBox["\[CapitalIota]", "m"]}], " ", "-", " ", 
    RowBox[{"d", " ", 
     SubscriptBox["\[CapitalIota]", "m"]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"VSeq", " ", "=", " ", 
   RowBox[{
    SubscriptBox["\[CapitalNu]", "V"], " ", "-", " ", "VIeq"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Seq", " ", "=", " ", 
   RowBox[{"\[CapitalNu]", " ", "-", " ", "Ieq"}]}], ";"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.7963833513076057`*^9, 3.7963835274959593`*^9}, {
   3.796963974157997*^9, 3.7969639899809437`*^9}, 3.7991365276352243`*^9, {
   3.799390618358407*^9, 3.799390622860483*^9}, 3.825397801303636*^9},
 ExpressionUUID -> "c93eef81-e97a-413e-87ca-a5187bdfd766"],

Cell["\<\
Conventional way of calculating the invasion fitness (based on jacobian \
matrix)\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.79938610865728*^9, 3.799386138036838*^9}, 
   3.799392534351272*^9, 3.825397801303759*^9},
 ExpressionUUID -> "14f2d6a6-a1f5-4f30-ba02-59f21993bed9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Jacmatmut", " ", "=", " ", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"dVimdt", ",", " ", "dImdt"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         SubscriptBox["V", "im"], ",", " ", 
         SubscriptBox["\[CapitalIota]", "m"]}], "}"}], "}"}]}], "]"}], "//", 
    "FullSimplify"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Jacmatmut", "//", "MatrixForm"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.796383533629571*^9, 3.796383611808814*^9}, 
   3.7991365276354713`*^9, 3.825397801303864*^9},
 ExpressionUUID -> "f5c16a9b-0794-4aef-afe6-1db9c5316996"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"-", "dv"}], "-", "\[Alpha]"}], 
      RowBox[{
       SubscriptBox["\[Gamma]", "m"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "VIeq"}], "+", 
         SubscriptBox["\[CapitalNu]", "V"]}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "Ieq"}], "+", "\[CapitalNu]"}], ")"}], " ", 
       SubscriptBox["\[Beta]", "m"]}], 
      RowBox[{
       RowBox[{"-", "d"}], "-", "\[Sigma]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.796383612269052*^9, 3.796962132464014*^9, 
  3.7969640017144413`*^9, 3.799125919212555*^9, 3.7991365276357*^9, 
  3.799390626201714*^9, 3.825397801303981*^9},
 ExpressionUUID -> "3060cc31-316b-46aa-8161-61ca1d419de4"],

Cell[BoxData[
 RowBox[{"fitnessapprox", " ", "=", " ", 
  RowBox[{
   RowBox[{"Det", "[", "Jacmatmut", "]"}], "//", "FullSimplify"}]}]], "Input",\

 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.796386290660809*^9, 3.796386320309329*^9}, {
   3.796962055027277*^9, 3.796962056411764*^9}, 3.799136527636627*^9, 
   3.8253978013041162`*^9},
 ExpressionUUID -> "42b9a2d6-3e38-4028-8394-2a3d16705b02"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"dv", "+", "\[Alpha]"}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"d", "+", "\[Sigma]"}], ")"}]}], "-", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Ieq", "-", "\[CapitalNu]"}], ")"}], " ", 
   SubscriptBox["\[Beta]", "m"], " ", 
   SubscriptBox["\[Gamma]", "m"], " ", 
   RowBox[{"(", 
    RowBox[{"VIeq", "-", 
     SubscriptBox["\[CapitalNu]", "V"]}], ")"}]}]}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.796386320646905*^9, 3.7969621359394703`*^9, 
  3.7969640039175043`*^9, 3.799136527636695*^9, 3.7993906287332582`*^9, 
  3.825397801304249*^9},
 ExpressionUUID -> "403acfab-7e34-481e-a712-0a734fdd8d89"],

Cell[BoxData[
 RowBox[{"selecgrad", " ", "=", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"fitnessapprox", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Beta]", "m"], "\[Rule]", " ", 
        RowBox[{"\[Beta]", "[", 
         SubscriptBox["x", "m"], "]"}]}], ",", 
       RowBox[{
        SubscriptBox["\[Gamma]", "m"], "\[Rule]", " ", 
        RowBox[{
         SubscriptBox["\[Gamma]", "m"], "[", 
         SubscriptBox["x", "m"], "]"}]}]}], "}"}]}], ",", " ", 
    SubscriptBox["x", "m"]}], "]"}]}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.796962058751051*^9, 3.7969621561594954`*^9}, 
   3.799136527636755*^9, 3.825397801304372*^9},
 ExpressionUUID -> "9880ffad-b9eb-436c-b39b-3a027ff34438"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    RowBox[{"(", 
     RowBox[{"Ieq", "-", "\[CapitalNu]"}], ")"}]}], " ", 
   RowBox[{"(", 
    RowBox[{"VIeq", "-", 
     SubscriptBox["\[CapitalNu]", "V"]}], ")"}], " ", 
   RowBox[{
    SubscriptBox["\[Gamma]", "m"], "[", 
    SubscriptBox["x", "m"], "]"}], " ", 
   RowBox[{
    SuperscriptBox["\[Beta]", "\[Prime]",
     MultilineFunction->None], "[", 
    SubscriptBox["x", "m"], "]"}]}], "-", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Ieq", "-", "\[CapitalNu]"}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"VIeq", "-", 
     SubscriptBox["\[CapitalNu]", "V"]}], ")"}], " ", 
   RowBox[{"\[Beta]", "[", 
    SubscriptBox["x", "m"], "]"}], " ", 
   RowBox[{
    SuperscriptBox[
     SubscriptBox["\[Gamma]", "m"], "\[Prime]",
     MultilineFunction->None], "[", 
    SubscriptBox["x", "m"], "]"}]}]}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.796962125160685*^9, 3.796962156567637*^9}, 
   3.7969640069231052`*^9, 3.7991365276368217`*^9, 3.799390631601945*^9, 
   3.825397801304513*^9},
 ExpressionUUID -> "44312ac7-cf5d-4310-8b41-80d2eb51d24f"],

Cell[TextData[{
 "selection gradient vanishes when\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[Gamma]", "[", 
      SubscriptBox["x", "m"], "]"}], 
     RowBox[{"\[Beta]", "[", 
      SubscriptBox["x", "m"], "]"}]], "=", " ", 
    RowBox[{"-", " ", 
     FractionBox[
      RowBox[{
       RowBox[{"\[Gamma]", "'"}], "[", 
       SubscriptBox["x", "m"], "]"}], 
      RowBox[{
       RowBox[{"\[Beta]", "'"}], "[", 
       SubscriptBox["x", "m"], "]"}]]}]}], TraditionalForm]],
  ExpressionUUID -> "7d106383-3f2d-447b-bf68-1cc4b2fa0c79"]
}], "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.796962183408367*^9, 3.7969623055866327`*^9}, 
   3.799136527637199*^9, 3.825397801304625*^9},
 ExpressionUUID -> "1e8bf439-d013-44b5-800f-6b008d9a3d11"],

Cell["\<\
Next generation method to calculate R0 (equivalent to the invasion fitness), \
just to compare\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.7993861817862587`*^9, 3.7993862082932367`*^9}, 
   3.7993925343515167`*^9, 3.825397801304727*^9},
 ExpressionUUID -> "4a155020-87b3-4a9e-8c3f-1e54e6bcc95c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MM", " ", "=", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "\[Alpha]"}], " ", "-", " ", "dv"}], ",", " ", 
       RowBox[{"VSeq", " ", 
        SubscriptBox["\[Gamma]", "m"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Seq", " ", 
        SubscriptBox["\[Beta]", "m"]}], " ", ",", " ", 
       RowBox[{
        RowBox[{"-", "\[Sigma]"}], " ", "-", " ", "d"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dVimdt", ",", " ", "dImdt"}], "}"}], "\[Equal]", " ", 
    RowBox[{"MM", ".", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["V", "im"], ",", " ", 
       SubscriptBox["\[CapitalIota]", "m"]}], "}"}]}]}], "]"}], "//", 
  "FullSimplify"}], "\[IndentingNewLine]", 
 RowBox[{"MM", "//", "MatrixForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FF", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", " ", 
       RowBox[{"VSeq", " ", 
        SubscriptBox["\[Gamma]", "m"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"VV", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[Alpha]", " ", "+", " ", "dv"}], ",", " ", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", " ", "Seq"}], " ", 
        SubscriptBox["\[Beta]", "m"]}], ",", " ", 
       RowBox[{"\[Sigma]", " ", "+", " ", "d"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Eigenvalues", "[", 
   RowBox[{"FF", ".", 
    RowBox[{"Inverse", "[", "VV", "]"}]}], "]"}], "//", 
  "Simplify"}]}], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.799386191432733*^9, 3.799386191812649*^9}, {
   3.799390637800057*^9, 3.7993906505300283`*^9}, 3.799392534352119*^9, 
   3.825397801304853*^9},
 ExpressionUUID -> "c7483d8c-f524-41c4-a8d1-aec92aa15660"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True"}], "}"}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.7993862117403097`*^9, 3.799390651000865*^9, 
  3.7993925343524446`*^9, 3.825397801308256*^9},
 ExpressionUUID -> "dd3a2790-c598-42b7-ac13-36ceb3b9852e"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"-", "dv"}], "-", "\[Alpha]"}], 
      RowBox[{
       SubscriptBox["\[Gamma]", "m"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "VIeq"}], "+", 
         SubscriptBox["\[CapitalNu]", "V"]}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "Ieq"}], "+", "\[CapitalNu]"}], ")"}], " ", 
       SubscriptBox["\[Beta]", "m"]}], 
      RowBox[{
       RowBox[{"-", "d"}], "-", "\[Sigma]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.7993862117403097`*^9, 3.799390651003895*^9, 
  3.7993925343526897`*^9, 3.825397801308361*^9},
 ExpressionUUID -> "0b249e5d-ce64-40fa-8532-ab3ac3cc4dca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Ieq", "-", "\[CapitalNu]"}], ")"}], " ", 
     SubscriptBox["\[Beta]", "m"], " ", 
     SubscriptBox["\[Gamma]", "m"], " ", 
     RowBox[{"(", 
      RowBox[{"VIeq", "-", 
       SubscriptBox["\[CapitalNu]", "V"]}], ")"}]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"dv", "+", "\[Alpha]"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"d", "+", "\[Sigma]"}], ")"}]}]]}], "}"}]], "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{3.7993862117403097`*^9, 3.799390651047472*^9, 
  3.799392534353569*^9, 3.825397801308463*^9},
 ExpressionUUID -> "a03c7ed9-bed6-4ebc-bcd9-1e47aecdbdc5"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Multiple infection with two strains", "Chapter"]], \
"Subtitle",
 CellChangeTimes->{{3.796387359389502*^9, 3.796387363419423*^9}, {
  3.796961826416545*^9, 3.796961829751173*^9}, {3.796968474140937*^9, 
  3.796968477842533*^9}},
 ExpressionUUID -> "31f90c3f-70cf-476a-96ec-eb41ab51a398"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QdcVFe+B/DdfdndvC1vN7upagwdKVbssSBqYkGNXWPvvfduTOy9xoa9
xW6MscRookZj76IoOEOHYfowzDDl9+65gCJCYkGF8Xc++80KXM6dYWbu3Pub
c/7HveugZj3/9Ic//GHYm9J/mnUZVWvo0C5jmv9b+qLlwGF9eg3s0b3+wOE9
evUYWrnr/0jfLCL9p9sbf/iD9L8/ACAiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiKmj+aLfb/5qU
lFREoVC43b9/nwoh6bH7SHoM35Uey/8pAM8pIiIiIiIiIsrbG9I1fNlu3bod
DAkJiQwODr5PhY/02N2RHsN1Io8pAM8pIiIiIiIiIsrbXxQKRS3pWj761KlT
uH//PhVC0mPnFHmMGB9TAJ5TRERERERERJS3v0jX8iHBwcFx4pqerXA28diJ
8TFSc8Orf04RERERERERUd6YxbhAYxZDREREREREVGgwi3GBxiyGiIiIiIiI
qNBgFuMCjVkMERERERERUaHBLMYFGrMYIiIiIiIiokKDWYwLNGYxRERERERE
RIUGsxgXaMxiiIiIiIiIiAoNZjEu0JjFEBERERERERUazGJcoDGLISIiIiIi
Iio0mMW4QGMWQ0RERERERFRoMItxgcYshoiIiIiIiKjQYBbjAo1ZDBERERER
EVGh8fxZjNMJhz0dBr0eeoMJdocDzmfrCU7pd9NMeiTExUChUCI2QYV0m/2Z
+ysIzWG3Q69OQkxMLHQmCxzO/L83zGKIiIiIiIiICo3nz2IcNmgT72DFgvlY
sGIbErRGOJ6pIyfSjBoc3rwATT+piTJBldGk+wQoktQvNItxOOxINRlgtlhf
SE5i1CRjzZSeCA6uhZXfX4UhzZ7v+2AWQ0RERERERFRoPHcW47RbEHPjEGqV
KY0ywR1wPToJ9meJNJzpSIj8FS2rlUSRIm74rENvTFm4EUlaw4vLYpxOGHVJ
2LdpFQ6fvoHUtPR834UhJQELhnwGL28fzNl5HnqzLd/3wSyGiIiIiIiIqNDI
hywmDcqr+1Hewx0e5ZvjqiLhmbIYp82M+2d3oIy3B0rW7YoLNyKg0RnlOU8v
qjkdVsSEH0fL2jUweuEepOjN+b4PZjFERERERERElM0Ly2Ky6qTExsbCkGpB
qlGPxPhYKBUKKJXRSExOQZrVBqfTCbvdBnV8JE7tWgAfdzeUC+2N0+evIiY+
OaNeTFZNGq0a8XItGQUUSiXiEpKgN5nhcOQIf0SftnToNCmIi83YXhkdg2SV
+sE+HWKfcfdwdNMMBPj4oMPoJbh8IwIqbWb+85T7dDodsKalIjkxXrp/GdvG
JyYjIVaJeYOZxRARERERERGR7IVlMUZtMtZ+2RshtWojbP9pbF+7CJ1bN0bl
CkEIqlAFbboPwQExL8hig16diMWjO6JSKU+8+de/4u9vvYeSZSsitPMYRCWm
wJaehug7l7Bk2hg0bVAXlStWQKUq1dCkVWcsWLcXikTNw/EzIoexmhF1/Qxm
TxiMBnWDUT4oCFVrhKDrgLE4+Ms16M1WOSdaNq4zgvyKS/t8E+8UdUelarUw
acW30BjMsD/FPkW2YzFqcPrgFvRq1xRVKlVE5Wo10bbbACzfsBMTu9eHp5c3
sxgiIiIiIiIiemFZjEGdiCXDW8L9w6Jo16Mf6jVoih59B2LYkAFo+kk1FCtW
HDWaD8CNaBVMJgNO7l+PKUM64P2334Zb2dqY+OUMrN56AClaPeLuXsSwDg3h
5+eHuk0+x6hxEzBm+EDUr1kJ/oFlMWTmBsSrTSKGkceyxNw+g36t6krbB6J+
s3YYOGgQOrf9DCVL+KBCSHN8eyYcWp0OP+9dg76tQvC2tM+PG3XE9LmLcOj0
DZhSzU+1T5H93Dq5Cw2qloKHdyBademHSZMnY9iAnvi0zieoW7Ukirl5MYsh
IiIiIiIiohc3LkadiGUjW+G9t99CYNVQbPjuFKLjk5CiSsaN88fQ8uMScPcu
jc0nImCy2JFmUOH6kVUo4emJSi2G4ta9aBhNZnl8zfZ5Q1HC2xONe07G+ZuR
SNFooFYl4vLJ/WhWvRT8y4Vgz693YU53IFWnwtZZA6TtvdB2+DxcvXMfqpQU
REeGY83UvggoWQZdJ65EoloPfXIMts8eAE8PT3Sfsg73Y5Pl9ZRMUh87nmKf
BnU8Fg1rBY+P3NBlwtcIj4qBRqtFQnQkdi+fDP/i7+KdD4oziyEiIiIiIiKi
F5vFjGqFYsWKovng+VAmauW5PGLtal1yLKb3qg9PTy/M3n5Wziec6amIOrUJ
Ad7eqNp2DKITNaK4LlSxd9CnQTl4eJfDhmPXYLRm1I8RTOoEbPiqJzy9fDB4
/m6k6FORLG3fq57YPghbTt5CanrGPCKHzYr4iLOYOXUalmzYD40hFWkGNfYv
GgZvL2/0nbkdKp35GfZpQlL0NbSr7gd3r/LYfuYOzLbMuUsOG2IjLqD1x94o
WuwjZjFERERERERE9MKzGA8PD4xZcQgao+XB74j5S0tHtoKXlxe+2ngS2tT0
3LMYsc7R7WOo5eeBjwLqYO9PvyLiXiQiIzNE3LqKvcvGws3NHfX7zERcsgox
d8T2nvAs1wQXouIfrukk1/O1QqfVQm8wybVecs1innafScmIuXUE1Xw84BnU
BJfuZ9snnNAkRWNCx5pw9/BkFkNERERERERELzyL8fLyfpC3ZDWjJhHLR7eR
s5gvN57IM4sRfSsu7kGZ4h/gzb/9G77+AShduvRDpUrB38cD7xV1Q+0ukxAT
Hy9vX9bTA17VOyAiNgm/tbx2blnMs+zz/vldKC3df68aj+9Tr4rHnP6N5L8D
sxgiIiIiekp/lPxV8iYVWuLx+5/Mx/JVP5+IqGB4KVnM1E2noHvWLObSHpR1
/xD/LV4K/YcMx8RJkzAph8lfTsXyrYeg1anlHKWcpwe8nyeLeZp9atW4f24n
SoksJpd9iixmVr+GXEeJiIiIiJ7WH+12+z+SkpLqKBSKRtK5HhVC0mNXT3oM
vaTH8s8F4DlFRAVDgc5ixHyh2Ds/oXaAJzzKNMDxy+FyDV2tVptB+rdGrYZa
o4XeaIbDbnk4R6lMKM5GxsHmfDBJSZ6jpFapoErRwmbPe47SU+3TloboG4dQ
1Vu6/+Wa4GLUo3OU1IkKjG5TFW5uHsxiiIiIiOhp/FG6hvfs1q3b+ZCQkATp
fI8KIemxU0iP4UbpsXyvADyniKhgKNhZjKijGxeBfqHl4eFdFuuOXoXRYs8c
d+KU6/Gq45WIiFJCZ7LA4XBk1u4tC3fPUgg7cuXB9k6HFfGR5zCmf18MnrQY
sSk6mDOzGHE7es/YBpUu9Rn2aUOi4gpaVfaFm2c5fPPLbXltpYy/TToUt06h
cZA7ihTlOkpERERE9FT+qFAofMS1/KlTp+RzPip8pMfOKT2Gd6TH8qMC8Jwi
ooKhYGcxUjPrU7Bz/lCU8PJAaLcJOHfjHlLUYmyKCpG3LmH28E6o07A5dpwM
R6rVnrmmdX/4SLcntPtEnL9xF8kqFWKibmPTnKEI8AtA25GLEK82wGLU4NCK
MfD08ECroQsQHhkDrcEEkzb5qfapT4nF7P5N8NGHxdFp7FLcvKdESkqKvM8N
s4bC98N38M4HXEeJiIiIiJ7KH6XzOx/pPE/xrOfqbK++8VydiHJR4LMYMbYk
/u5FDGvfEH4lSiAktBWGjx6HcaOHoU3jOggMCESTbuNwM1oFu8MJh7R9TPgZ
9GlRGz7ePghu0Bx9+vVDx9aNUcrPFxVqNcWeX27BbLXDbjHi8oHlKOXjjmI+
5dCt31DMX78fGp3+qfZps5hw5ehm1C7vj4/cfRHauhOGDhuGHp3aolZwXTSp
WxHF3b0xK3P97vxuPL4TERERuSRmMS7QeK5ORLl4/izGYUFs+I9oXKMaqjfq
jVuxyXIWY9KqsHFGP9SsGYwlex4dD2LSqbB55gDpmFQTi3efk36WDqfNjOjz
e1A3OBjNB8xEvEqXtQfY09MQffsSlk4fg6YN66JShfKoUKkK6jVqgQkzl+NK
RAwstsx5RE4nbFYzIq+dxqzxg1C/dg0ElQtCleq10KX/aHx/6ir0qVZpM6fE
Dk18BOaM7I7KQWVQuUZdDJuzESk641Pt0+l0yON3ftq7Fl1bhaJiUDlUrFId
rTv3w+qt32L11IGoVSsEy/ZdhIFZDBERERE9GWYxLtB4rk5EuXjuLCYj+0hF
XEwMYuKSYM3MJxx2OwyaZMRI39ca0+BwOB/8Sq4/czqQnmZErPS9+GQNbNI2
2fchxrsYdGrEx8VAoVBIlIiNS4BGZ5Dr8Dpz3Ca7LR06TYp8u8T2yugYJKnU
SLPa5Bwmc0OpXxt0aum2KJXyNskaPexSf0+7T5HHWMxGJCXGQym2lfqLT0yG
MdUs3VeVdL9ioTM9+nfIr8bjOxEREZFLYhbjAo3n6kSUi+fPYtheeePxnYiI
iMglMYtxgcZzdSLX5nA4/qTX6//PaDT+w2Kx/FV87XQ6//g7v8csxgUaj+9E
RERELolZjAs0nqsTuTatVvvvr7/+undYWFjXI0eO1L1586Z/dHT0hwkJCe+n
pKT8V+Q0ZrP5f2022xvZMhpmMS7QeHwnIiIicknMYlyg8VydyLXFxcUVadiw
4XcffPBBvODu7h5VuXLlMy1atNgxdOjQuQsWLBi0e/fupufOnasQFRXlLrZP
Tk4ucvXq1cbVq1dPuHv3LhwOB9gKX+PxnYiIiMglMYtxgcZzdSLXlpSU9G77
9u03/u1vf0v9wx/+AOGNN96wvfnmm2n//Oc/Df/5z3/U7733XmLx4sWVgYGB
1+vVq3ewZ8+eqwcPHryhRIkShh07duDOnTuIi4uD0WhkLlOIGo/vRERERC6J
WYwLNJ6rE7k2jUbz1vjx47/817/+pcvKYvLypz/9yfGXv/zF+ve//930f//3
f6Y///nPzg8++AAlS5ZEhw4dcOjQIZjNZrAVjsbjOxEREZFLYhbjAo3n6kSu
TdTsXb16dbe3335b9XtZTC7ZDIoUKYKWLVviwIED0Gg0HBdTiBqP70REREQu
iVmMCzSeqxO5LlGLV9TlPXDgQIP3338/4UkzmDfeeMMuxsW8++67zq+//lo+
TqSlpUHqD0/THA47Uo166HV6WNLtv/n74mf2dIu8rd6YCrvLZz5OOOw2mAx6
6PR6WG0OPOWf93cbj+9ERERELolZjAs0nqsTuQaxVrXVav2LGAejVqv/k5iY
+J5Cofjo8uXLZVauXNnj3XffTXqSOUpvvfWWpkKFCpcGDx68uUyZMvrw8PBn
HAvjhNmowaGtKzFv3nz8dOU+0tLteW5tT0+D4urPmD9vHlZsPQiNMRX5HE08
aHJGZDLAbLHCkd8ByBM0kTulW1KhjLiKdcvmY+78xbiq1CDdnr+3hcd3IiIi
IpfELMYFGs/ViQoXMdZFrD+dmpr6N51O96/k5OR3YmNji965c8fnp59+qrlp
06Z206dPH92vX78lTZs23d2oUaNvW7duvU3U5hVZS24ZzB//+EfnP/7xD6O/
v//NMWPGTLt06VKly5cvf1ajRo2E5zm+p+pU2DSjH0oGBqLrxFVI1BjzyFec
MGoSETa5GwIDS6HP9I1I1pmeeb+/2ZzSvnRJ2LdpFQ6fvoHUtPQXs5+8du9w
wCT9Xc4d24MeLT6Be7H34R1QHt+cUSA1Pf+zmJo1ayoiIyM9sq1XTkRERESF
G7MYF2jMYogKJnHtLMa6pKWlvWkwGP6ZkpLy3/j4+A/EutNi/ek9e/Z8tnjx
4v4jR46c2a5du00NGjQ48Pnnn28WX4vvi59nrVN97dq1km3atNn6v//7v+ac
GYz4nljnulevXst//vnnGiqV6m2bzfa/0u/Vlo4Ncc9zfLdbTbj+43qU83aH
f7XWOHcvHjbH43mD02FD/L0LaFsjAO7eZbHu6DWYrHmPoXme5nRYERN+HC1r
18DohXuQon+ZtYidMBtU2L9mNurXrIzSQVUQ4P4OirmVwKZTUS8ki6latWrc
sWPHaon1tER+J55TKADPbyIiIiJ6ZsxiXKAxiyF69UTuIuYXmUymv4t1j8R1
c3R09Ic3b970P3LkSN01a9Z0+eKLLyb26NFjpRjnIsa7iHEvYvzLxo0b24vx
MGJcjBgfI8bJiPEy4rpbjJ8RfYs+J0yYMCX7WkpivaSiRYvGtmzZcvu+ffsa
i5xH3IbM8RN/kY4JIc+bxTidDqhiwjHgs0pw8/DD3J2noTc/Pg4l3azHr7sX
wN/DDZWa9Ed4dLI8d8hhT4dBq0Z8XAwUCgUUSiXiEpKgN5nhyJnpiHoztnTo
NCmIi83YXhkdg2SVGmlWmzwvSNRnUcfdw9FNMxDg44MOo5fg8o0IqLTGjPo0
mX3os/WhUEj7jE+E1mCSt8naq8Nuh16dBOlvLt2eNGhTkhEbE4MElRY2ex5z
upw2JEWfR9cGddC0fX9s2n0AvULLwtPL/4VlMX5+fuY6der8MGrUqBkin7t3
756nmMNmsVj+yrEyRERERIUSsxgXaMxiiF4ece1rt9v/R9TT1ev1/yfGoMTF
xRUR18e//PJL1W+++abV3Llzhw4ZMmReq1atvmnYsOF3nTt3XivWpF6+fHkv
UYP3ypUrpUUdGFEPRlxTi/owIkP5rfEOWWspvfPOO8lvvPGGTfy/uD5fu3Zt
Z9GXGHuT47o8X7IY0dIMauxbMhKebm4I7TMd0cm6R2vUSl/okqMxq39juLl7
YsTivUgxmOX6MdF3LmHJtDFo2qAuKlesgEpVqqFJq85YsG4vFImah/V9RYZi
NSPq+hnMnjAYDeoGo3xQEKrWCEHXAWNx8Jdr0JutcnaybFxnBPkVx5t/fRPv
FHVHpWq1MGnFt9BI+7RJfURKfcydNAyNP62NStI+K1b+GA2btsXUxRsQrkxC
embOYtQkI+yLHgipVRsrdh3B1OG9EFyjBjqPXYpEtT73P4bTBp36HjaEbcX1
CCVio6MwvGUleHm/uCxGjIsRWduKFSt6iixPzFebNm3aGDFWRuR94nmYldmh
ALxGiIiIiOh3MYtxgcYshujFyKuWrshSRKYispVx48Z9JbIWkbmI7EVkMCKL
EZmMyGZERiOyGpHZiGtmkeGILOdpr5vF7RDX3gEBATcqVqx4VuxDjKMRty2P
DCffshin3YL7Vw6jbhlveJf9FEevKWDNVqPWabdCeeM4GgT5wrt0bRy6EoU0
qxVxdy9iWIeGYlwH6jb5HKPGTcCY4QNRv2Yl+AeWxZCZGxCvNsm5jhg/E3P7
DPq1qittH4j6zdph4KBB6Nz2M5Qs4YMKIc3x7ZlwaHU6/Lx3Dfq2CsHbb7+N
jxt1xPS5i3Do9A2YUk2IvnUKvZqHwNfXH/Wbd8SYCZMxfvRQNKn7MXxL+KP9
sLmITNDIY3YM6gQsHtYc7h8WRbuuPVC+QmXUrNsQQ2asl8fZ5PHXkG+r0Zgq
j51RJ0ZjRKsXm8WIejF37971Es+fmJiYYmIe2qxZs0aIOWtdu3YNW7ZsWZ/z
58+XT0hIeF+My3qW5xcRERERvVTMYlygMYshej7iujU9Pf3PYk6QVqv9d85a
umIOUfZauo0bN97Xs2fPFVOmTJkg5h6JOUhiLpIYoyDmJon5ROKaONt8oee+
jSJvEXOQxHW3WFdJzGH6nboh+ZbFyONekpSY3icU7h7eGLdSrJFkefBji0mL
I2smwcfDHQ17T4MySYtUvQo75g1FCW9PNO45GedvRiJFo4FalYjLJ/ejWfVS
8C8Xgj2/3oU53SHXCN46a4C0vRfaDp+Hq3fuQ5WSgujIcKyZ2hcBJcug68SV
8ngVfXIMts8eAE8PT3Sfsg73Y5Pl9ZSM2iRsnNZHvh1N+07F5fAoqDVaaFKS
cf3sEXxeuwy8/IKw8vtLMFpsMKgTsXRES7z/9n9Q5uMGWLztMCLuR0Ol0cOe
1xylHO1lZDHZj+9Zc+HEc0zU8/32228bjR07dmqzZs12DRo0aMGWLVva3rp1
y09kf7mMlSIiIiKigoFZjAs0ZjFETyZrflFetXR3797ddNGiRQNE7VxRQ1fU
0hU1dbPX0hXjD8T2YgyC+H3Rj+hP5CIv+rpX3Haxvyecj5J/WQwy6sGc2bUA
AV4eqN56BO7Fp0Au9+J0Qp0QhbHtg+Hh5Y/5cj0ZK1Sxd9CnQTl4eJfDhmPX
YLTa5XovgkmdgA1f9YSnlw8Gz9+NFH0qkqXte9UT2wdhy8lbSE3PyEIcNivi
I85i5tRpWLJhPzSGVHnO1P5Fw+Dt5Y2+M7dDpTOLgr5IjglH97ql4e5ZGut+
zFY7WNpnqjYJW2f2hbu7BzpMWI0kjRFGdSKWjWqFIkU+wCfdJuNeXMpTr4/9
srOY7MRzToyzEtnhjRs3AjZs2NChf//+i5s3b75z4sSJX3z//ff1xXNV5Isi
a2QuQ0RERFRgMItxgcYshuhxedXSFdesYhxLWFhY16xauqGhofvFuIKsWrpi
Tenfq6X7qu/fE8jXLMbptCE+8iLa1yoFL/8q2Hn6jjyexWFLw92ze1Et0Bul
g9vhglhnyW5FzO1jqOXngY8C6mDvT78i4l4kIiMzRNy6ir3LxsLNzR31+8xE
XLIKMXfE9p7wLNcEF6Li8WAKlFyL1wqdVgt9Zu3dXLMYeW2lo6hZwgOeZRvh
fKR0O7LlKvY0Ay7tXQBPd3d8/PlYRCdpHmQxbm5uGDhv1zOtx/Qqs5gsWRmj
mK8m5sOdPXu2osgUO3bsuF5kifPmzRty6tSpj8VzWWR5nMNERERE9Moxi3GB
xiyGXmdPUkt3zpw5wwYPHjxfrDckxrpk1dIVtVDF2AFR/0WpVBZ/mlq6hUC+
ZjGiTopJm4T1U3rAy8MLfaZvRrIuVZ6LtH3OQHh7eqHbF2uRqDXBaU+D4uIe
lCn+Ad7827/h6x+A0qVLP1SqFPx9PPBeUTfU7jIJMfHx8vZlPT3gVb0DImKT
8FuJRm5ZjNNmxv0Lu1DGwwPe1Ts+1ofTasLd42vhI/28VMN+uB+vkucoiSzG
09MTk9f9BK3J+tR/lYKQxWSXNd9OZIfiOS1yRzGXTjz3e/fu/bWYU3f16tVS
XB+biIiI6JViFuMCjVkMvQ7ENaa4bhTr+GbV0hXzhEQtXVE/5bvvvmuYVUu3
U6dO60TmklVLV4wL2L59e8vTp09XyVlLV8wvctFxAvmcxQCOdDPCT32DKv7e
KPdpN1xTJCBBeRN9QivCO6Aytspzi+wZWcylPSjr/iH+W7wU+g8ZjomTJmFS
DpO/nIrlWw9Bq1PLWUw5T5GjPE8Wsxtl8shzsrIYb3cPlArt/0gW4yX189Wm
k9ClPr5W9++1gpbFZCee0+L5LebSiTFeO3bsaDFs2LA5YgyYmHcn5uSJmsBc
H5uIiIjopWMW4wKNWQy5mtxq6Yr1Y27fvu17/PjxYFFLV6zp27dv36U5a+mK
NZ5/+OGHOtlr6Yo+xFyl16xmRr5nMaImizruLka2qQkv3zJY+d0ZnDu0DuX9
vFGj9XDczaq34rAi9s5PqB3gCY8yDXD8crhct1d6HDJI/9ao1XJdXb3RDIfd
8nCOUplQnI2Myza/KGOOklqlgipFK69dlOccpdvHECz6KJuzD8Bu1uPC7nnw
9PBA9fbjEZNtjpLIYqZuOuVyWUx2IscUrycx9ktkl6tWreou5ueJvHLq1Klj
f/zxxxAxjkaMp3nNXidERERErwKzGBdozGKosHqWWrrt27ffOGrUqBmilu7e
vXub5FZLV3zG/zJq6RZw+Z/FSM1i1ODw6onw9/FBmyGzMH9kB3n96AmrDj1c
W8npgCouAv1Cy8PDuyzWHb0Ko8WeOU7FKdfjVccrERGlhM5kgfRYZdbuLQt3
z1IIO3LlwfZOhxXxkecwpn9fDJ60GLEpOpgzsxgvLy/0nrENKl1qxj5FH/Uz
+/jhqlwvOGOXTpg0Cdj4VU+4u3ui25T1SNaaXqssJot4TYiaR1nrY584caK6
WB+7bdu2W7p06bJm6dKlfcVrSrwOxfgzFx0zRkRERPSqMYtxgcYshgqDJ6ml
O3ny5Endu3dflVVLV6wJM2PGjFEuUkv3ZXshWYzTboXy5k9oVKUkPMvVwacV
vRFYuRGO31DCan+YQ5j1Kdg5fyhKeHkgtNsEnLtxDylqMR5GhchblzB7eCfU
adgcO06GI9Vqz1zTur+8HnVo94k4f+MuklUqxETdxqY5QxHgF4C2IxchXm2Q
86BDK8bIY1xaDV2A8MgYaA0mGLXJ2DZ7IHylfTbp/SUuZa5pLa+jfeoAWtQo
Bd+SVbHx2HV5jaVnyWKcTgcsZiNUqmRIz2HcuXEZ/RoHwd3DF8v2n4ciLgnJ
ySr59og6w8/bXuTxPef62Pv37w8Vc/zEOkwDBw5cuHnz5s/F+tji9SbqMfF1
RkRERJRvmMW4QGMWQwVJXrV0RV0KsZbLtm3bWmevpduwYcPvxOfxEyZMmJJV
S1fUFnXBWrov2wvJYsQYE70qBvOHtsC7/30Lb739LpoPnocYlR7Zl4N22tMR
f/cihrVvCL8SJRAS2grDR4/DuNHD0KZxHQQGBKJJt3G4Ga2C3eGEQ9o+JvwM
+rSoDR9vHwQ3aI4+/fqhY+vGKOXniwq1mmLPL7dgttphtxhx+cBylPJxRzGf
cujWbyjmr98PjVaH2Du/YkDrT1CihD/qt+iEsRMmYczwQWgQXBl+/qXRZ8pK
REu3VcylepYsJj1N2vcPWzGoX2907twJbVu3RKDb2/jnP/+F6vWbo33HTujW
sy9mhO2V199+3vayju/idZu1PraY3yfmAQ4YMGCRyGXEa/PAgQMNstbHFq9F
5jJEREREz4VZjAs0ZjH0KjxNLV2xtq6YX9S6dett2WvpnjlzprL4PF7Mh3gN
aum+bC8mi5GaLc2IK4fCUKNCWZQtXx2rDl6GMc2WYysn7OlpiL59CUunj0HT
hnVRqUJ5VKhUBfUatcCEmctxJSIGFlvm3CWnEzarGZHXTmPW+EGoX7sGgsoF
oUr1WujSfzS+P3UV+lSrtJlTYocmPgJzRnZH5aAyqFyjLobN2YgUnVHapxn3
b57FvMnD0ejT2vI+K1WphiatOmP+ml2Iik+BLXO8ikmrwsYZ/VCzZjCW7DkP
vTnnfXi8WUw6HN80CzWqVoS/vz/8/Pzg5ekBd3d3+JTwk79XOqgyuoxfhiS1
4bn/1i/7+J59fWzxuhTrY4v5gKIetpgnKHJUro9NRERE9NyYxbhAYxZDL9rv
1dLdsGFDh9+qpXv06NHarKX70r2wLEbM07GaDYiJVkIZHQOD2ZpRs/fxDeXx
LgadGvFxMVAoFBIlYuMSoNEZ5Dq8zhzb223p0GlSEBeTsb3oP0mlRprVJucw
mRtK/dqgUycjRplxG5I1etil/rL60Is+YjP3KW0Tl5Ak1wkWY3CymsNuh0Ej
9SHtS2tMg8Px+7VenA47UvVqRCsV8rE3V9J9TFBl1Bl+3vYqj+8518cWNbG/
/PLL8WI8W69evZaLeYViPXgxfo3rYxMRERE9FWYxLtCYxVB++a1auuLzcVFL
d+HChQNHjBgxS9T6zF5Ld8mSJf327dvX+MKFC0Hiuchauq/cC8ti2F5eKyjH
d/HaFa9j8ZqOiIjw3rlzZ/Phw4fPFnWdxPFAfC2+L37O9bGJiIiIfhezGBdo
BeVcnQqJzGuknLV0xWfbYtzK9evXAw8fPvxJXrV0Z86cOVLU9Pz5559r5Kyl
K+pNsJZugcEsxgVaQTy+Z18fW4yLWb16dTcxDk6Ml/nqq6/GiXFwXB+biIiI
6Dcxi3GBVhDP1angkMe6WK1/sev0/05LSCyiSkh4X+Qn2Wvpzp49e/igQYMW
tGjRYkf2WrorV67skbOWrshtWEu3UGAW4wKtIB/fs9bHFmPfxDHl5MmT1UQ9
GVFXpnPnzmvFWDmxNj3XxyYiIiJ6DLMYF2gF+VydXp6ctXQ1avV/dImJ7xsV
Sg/tiVO1VfMWTvylZ98tXwwZuiB7Ld2hQ4fOFbV0d+zY0YK1dF0KsxgXaIXl
+J5zfWxRu3v8+PFfinWYxHpMYl0mUTOK62MTERERyZjFuEArLOfqlH/yqqUb
Hh5e4qejR+tsXbmy17IxY2dtad9x16nguldjy38cHVu9zu39I0Yv2rxmTVcx
h+DWrVt+4ndYS9dlMYtxgVYYj+/Z18cWx5lNmza1y1ofW+Qz+/fvDxV5jcht
uD42ERERvaaYxbhAK4zn6vRkstfSFWNUctbS3bVrVzNRS3f4sGFz2jRp8m2D
8hUu9ipf8driEoFxp70DdFHuJdLiP/R2pPiV1RkmfLHIcF/haWQt3dcFsxgX
aIX5+J5zfWwxX2np0qV9xfwlUftbzI0U85rE/CZxfGOtqRdC/D3/RC6Brw0i
ItfCLMYFWmE+V6eHfquW7qFDhz4V9TFFLd1u3bqtFrV0xWfM/fv1WzJjwoSv
Nk758osjffqvv1yn/uVwDz/z/aKezsSinkgp5gW1m69NF9r8bPqVa+Wd0rXO
q76f9NIUyCzG6XDAbNRCuv6GSqOHQa+DXqeHJd2ebc3qXH5PrFWdbpG31RtT
YXdkXy86Y41rk0EPnV4Pq82B7F05HHYYtSnyPrVG8xOtXV1Qmqsc33Oujy3G
5ok6v61atfpG1P1dtWpVd66Pnf/sdvufk5KSPBQKRaD0HCpJhVKg9Pj5So/j
eyLbfNXPKSIiyje5ZjHinNcmnfOajAbodFpotdK5ssEAc5pFPoctPGexL745
7Hbo1UmIiYmBPtUKh9OZ7Xux0vcs8veerI8n2z5nc5Vz9ddFVr1LMYZfXJeI
uixZtXTFZ8Rbt25tIz4vHjhw4MKsWrpdu3YNmzhx4heilu7BgwfrZdXSTbh/
3z1x/eZe8Z+EXkr0L6tJ8fS3qD/0dqpFBpPBqSlXJT5t7cZ+ToPhX+Bnzq+T
ApfFiPeWVG0ivl09FfXrNcTkpd9g2+pFmDdvPn66ch9p6fY8f9eengbF1Z8x
f948rNh6EBpjqvxeJPpMt6RCGXEV65bNx9z5i3FVqUG6/eFxNM2owaF1M9Cw
Xn1MC9uPJF3qb+Y+Bam54vE9+/rY4rgnxveJdbHFWm1inWyxPrZYo038XIwJ
5FiZZyddv3/QrVu3b0NCQu5Lz6NoKpQU0uN3RXoc14o5xa/6OUVERPnmkSxG
zmCsaUiKU+LsicNYu3IpZkz9ClO+nIq5C5dix7eHcStS+Ux5gSs08dlqqskA
s8X64P4bNckIm9ITtWvXwdojN2G02DO+90UP6fy5FlYfvAZjWt7XFw/6eIrt
czZXPFd3BTlr6arV6v8kJCS8r1AoPrp06VLZb7/9ttGyZcv6jB07dmrOWrrz
588fLK5Hfq+WrtNm+7PtyrUKuqatT6rd/dKzZTAZvALNht4DttujY9zBz5lf
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
7Jm5vj0dRmMqbNJ7kToxGiNa/XYW43Takai4ji51y8C3VDAOXrmf2VfBbTy+
Z8i+PrYYU3j+/Pnyot5Wly5d1ogxiOIY/fPPP9cQ8zy5PvZDzGJcojGLISJy
TQ+ymLvh13Bp/zL4eX6EwJqt8cPZ60jRGWBJfzj2JGuMiNWaLmcA4ts6VRym
9fwEXl4+WHrgOgzZshjxs+m9P5V/tmT/VRjS7DBpk7BhWj+U9PNF1TqNMWDo
SIwfOxo9OrRA2YASqFS7JX4Q58c2h3yeHXP7DPq1qgs/v0DUb9YOAwcNQue2
n6FkCR9UCGmOb8+Ey3OlnNK2cXcvYliHhtK2fqjb5HOMGjcBY4YPRP2aleAf
WBZDZm5AvNok3259SjzmDmiE4kXeRePW7VC7XhP06DsIQwf1R2hIFXz0kRtC
Wg7A5agEeT2pn/euQd9WIXj77bfxcaOOmD53EQ6dvoHEOCXmDmwknf/7YP6e
S9CnPcxiPvzgXdRr0hLBn4Sie98BGDq4HxrVlvouLvoeiCtRiXJthNyymKe5
P1FRPFd/Etlr6Yp5Qdlr6V68eLFc9lq6HTp02CDmF7Vp02brsGHD5mTV0v31
118r/VYt3Zd2f7JymJu3SpsmTFmUOmPONFtklI8zNfXv6RcuVTEvWT7KkZhU
RNqO9XpfXwUmi0kX85M2T4OvlxdaDFuMhBTDw7q5YtxLkhLT+4TC3cMb41aK
NZIsD37XYtLiyJpJ8PFwR8Pe06BMevxzAtGeJIsR+Y1BOvYvHNpc2s4XM7ae
gi61YM9TYhbzuKz8XGTnYqzijz/+GDJt2rQxYn3sHj16rBQZ+eXLl8uIbFyM
a3yd18dmFuMSjVkMEZFreqReTOL9y+jTtAaKFSmC8sGhmDx7KY6cPIdIRTSS
VCkwZH7+mP08+OmyGDG//zraB5eCV6kQ7Dt5GYkqNTQaNWIVEdi+eBxC6tbH
gu0n5Pk+qToVts4agBLeXmg7fB6u3rkPVUoKoiPDsWZqXwSULIOuE1fKa2+Y
9SrsmDdU2tYTjXtOxvmbkUjRaKBWJeLyyf1oVr0U/MuFYM+vd2FOd8j5x7xB
TfDOW/+CT/lPsPHgacQkJCNFlYSb54+j06flUNyjBGZs/hlakwX65Bhsnz0A
nh6e6D5lHe7HJsvrKelU8XlmMVl9b/j+lNR3UkbfFzL6/kjqe+aWE/J1wONZ
jO2p7s+tiEieq+fwW7V0xXn7+vXrO4paur179/5a1NHNWUtXbPNMtXRf1v0T
85JuhZcyTZyyKHX+4gl2ZbSH025/Iyujcer0/+bcpNdegcliTNpkrJ/SVXov
8MKorw9CbbA88nNRD+bMrgUI8PJA9dYjcC8+BY7MsZHqhCiMbR8MDy9/zM+j
noxoT5bFABaDGgeWjpRvS/evNiJZm5rfdzdfG7OY35a1PrbI1sVYxt27dzcd
NWrUDDGHSeTo27dvb/k6r4/NLMYlGrMYIiLX9Og6SpZU3DpzCAM7NoGfjxfc
3T3kjKF81Vro2GsQFq/ejPPX78h1UrLm+jxdFmNFguICmlYoAa8yn+Lw+RvQ
Gs1yvuOw2+XsRamMgVqfKvVvR3LsHfSqVw4e3kHYcvKWdG6d0bfDZkV8xFnM
nDoNSzbsh8ZglLft00BsWw4bjl2D0ZpRj0UwqROw4aue8JRux+D5u+U6N1n5
R5EPPkBo3xm4n6jNGP8jMeuSsWPOALi5uWV8hqs2yDUN9i8aBm8vb/SduR0q
XUbtXnl8TR5ZjOi7Ub+ZUGT1jYy+t2f1PXyJ3PfjWUw6VE9xfy5cvfXanqvn
VUtXjF0RY1iyaumKc3IxxkWMdRFjXsaMGTNN1NIVY2HEmJh8raX7ou+zdLvs
ymh305fTZ5sXLxtrj4l1Y+5CuSgwWYzIrGf1bSi9F3g/OE5mb06nDfGRF9G+
Vil4+VfBztN35MzcYUvD3bN7US3QG6WD2+FCHussifakWYzNrMeFXfOk460X
Gg2Yg3iVPt/vb342ZjFPLuf62GvWrOki8naxPvaUKVMmHD58+BMxDvJ1Wh+b
WYxLNGYxRESuKVsWc1++zrdZ05AYex8nDu3G9InD0Ty0Dkr5+8LT0xMeHp4o
WaEGxswOw924FDmPebosxgZtshJf9WoEj48+Qp1mXbB07XZcuBaO2PhE6PRG
pNsyx92IdYvuHEMtP094lmuCC1HxeDCtX67na4VOq4XeYILdbkHMbbGtBz4K
qIO9P/2KiHuRkK7HZRG3rmLvsrFwc3NH/T4zEafSPcg/RCYyYul38hrdWc2e
ZsDlfQvh6e6OSq1GIjpR/UxZjNjfyGUHHvkM+JG+W2f0/VgWk2p+qvvzy/kr
r8W5ujjPzquWrqjZsmrVqu5ZtXQbNmz4XfZauqLmy0uppfuiiXlWKep3zCtW
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
r6voOKXb3NXTvjpwaH/jefPnDWnfvv1G8T4o3vvE61Fko+J9s6C91z1vFuO0
WxBz4xBqlSmNMsEdcD06CXnEqL/TUToSIn9Fy2olUaSIGz7r0BtTFm5Ektbw
4l6D0nHDKJ2f7tu0CodP30BqWu51qp6nGaRzyQVDPpM/j5uz8zz05sdz43xo
zGKIiFxTjjWtnfL5rdlogCopUToXjoZC8f/snQdYFFf3xv9f8n3pPaZqjPQi
IsVesBLFGmOPXaxgASyxY4ldwd7FHnuJ2LsRUSwoNhTpZYHtve++/z0Lq6hg
AEEQ732e3wO6d+fOzDI7d957zntoTptsnhNnZmVDLJVD91yMqiXuNIuTgZTk
ZCSnpCIrmw+FUg2pkIf09HRIFOon+grFu0hEAnAy0s39afuppu1n8wRQqrUv
+tTotBAL+chIo7jWnH2hviqzHvRczSeKpRXTtnP6muNgMzIhFEvN83FL77yx
KIv2XUOmaX8t76Htc/kis5/N083TtnUQC7hIS8l5RuAKJdBqtbnxqWlmXchg
zO3Hz0J6Gh23CjKJ6KXbzhvj+uQ8FeF4ijNXf5mX7pkzZ1ps3ry5X0Feulu3
bu1DOfWxsbGOb62X7uuAnr25vO8V80P+VK5cO94gEFZiuUlvH7k1kd6jmDK6
xuk6ozwJWpcnzZOe/Qp4bznSYmh5XYX460fRtoEb6rcfguuPM0z3ktenhFBs
TnrcNQxuWw81G7TD8RvxUOvKd34SNabFlCxqte7DE/8k/Vq38/YM0mEI9w5b
+Jv23x0lU2g/ze89pmvsv/cT7ngMnNb1zOXoi948Hvdb+jwoF3f69OnBFA/q
5+e3knzmKYaG7onlpT72q2sxKqTEhKOWtRWsa3VGTHJmsbQYo06JpKi9cLOz
Rg3vgbhxL840j5E94+VU0o28BdNiz6NrCy9MWHoQfImyxMdgWgyDwWAwXoHn
tJi3p+WXF/SmtpfN1Z/30iV/T4uXLq3l5fXSJa9Ci5cu1fekNXfy0iXfwrxe
upQT8ZZ76b4WjGrN+5p/IlpK/QN26u7Huhr1zK/3bYKuLUt+IOUD0jVJeX8U
b0baDF3T//KsV660GNKWKTbmr0VBcHdzx/ile5AplD+rp5fa0KaxhRzsDh0L
95oeGLt4F7JEivw9a8pZY1pMySIUq76euTxyiUubTVKLFuPUaqNy1Myzf3EF
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
eWCUIlQvSbX1r2HkFUOeMSwm5s3AUseW9Baqg0Rr0/Szb9++W8ib8+LFi16k
u5BvJ3k6kVZa2vFruevsn5rG7tGwYcNspsW8uY1pMaWDQqn95O8zj3vOXxs1
TyBSfvP862qt+oN/bp716Rz0S3QzX48MwmtAzSyP7tYq+vnr6BZ3jl462FOp
Vn5UGvtH9ZXI35e8YV6mxVj0GMpjatmy5eljx475UN6T5TumXGsx5KObEQf/
drVgbZ7/xECmttSbN5r9eAWcFMQlpkAsV8N0TLneve6wsnHFxlO3n/SneSAn
4RomjvBDQPBypPPFUOZqMbQfw+btAk+sKMaYOmQl30a3eg6oZuOB3Zcfmmsr
5ZwbLZIfRKCDpxV+rMzqKDEYDAajyBRZizHSfSwtFiN/rYtq1k5YvC/SdO95
MQ5Fq5Tg6oElcLauhrodRyA2lWvOHTKY7l1SkQCcjDQkJycjOSUFGZnZkMjz
8UUxe7FpIRbykZGe0z8lNQ1cngAqjc6ct2PQ6yDIiMeZ7fNQ3d4efSaswK17
ceCJZDn+NLnbkOTZRnKyaUxOFkS5/m6WUQ16PSSCbLNPi0SugojPRXpaGjJ5
OWssBTWNQox/di2Cu7MjugWGIDlbbJ4zvMp5ovMszkrGooAucHJ2R8ieS/m+
nxp9do0aNUqj3HLKe5gyZcosegYcP378fPL2o3s3i5Up3xhN82ZdcoqNbPTY
rZpz59tQLaWy3idGwdBzDukrluuKdM958+b9Qd4OdL1R/SOKi6HfKR8pr1/M
67gGaZ8ePHjg3LNnzwPOzs4qpsW8uY1pMaWDVK757K/DD4as2BY9SSRRffX8
6xTvki3gVL754FqjqLuXmxLHIw536zPp10v08+aDqEbp2WnViurfWxjo+4Xq
Vru7u0dTHtK/aTEWPvjgAxW9JywsbADpwbSdcq3FmJpSwse+0CA42lqjne9U
XLsXD76AYlN4SHgQjYVj+6Fl287YeykWCo0+t6b1CNib9qfdoGm4fu+xaU7I
Q1riQ2xfFITqTtXRc/wycARSqCmnfu1E2Fhbo1vQEsQmpJnnfXIRt0hjSvjp
WDiiI37+qSr6TVqJ+/Ep4PP55jG3LgiCw0/f4JsfWB0lBoPBYBSZYtVRorjP
v1eMh021amg3fC5SuWI8E7JhpJqGqVgwogOqWdlg3PJD4EuVZl+U1EfRWDFn
Ijq18Ua9OrVRt34jdOzWH0s2H0Ky6d78xN+XNBSNEol3r2Dh1AC08W6KWp6e
aODVHANHTsLxy3dM9zyNWTtZNbk/PJ2q4oP3P8A3la1Qt1EzBK89DKFpTJ1p
GwmmbSwOHoMOrVqgrmnMOvUaom2nnpi9fCtiU7KhzdVZZEIuNs4YjObNWmDt
/lOYPXYomnp5ob/p3pslkOR/MowGCDMTMLF3c9g51kLYacon0r/CeVI9eVmv
luP2yY3wcLRHy75TkEj51fmExljm6rTmTjnnVNM6JibGdc2aNUP79++/idbn
V65c6RcdHe1Oa/PUh2ky5QujUvmxOvxYV/m4SesMGZyqLCamfPG8lkIeLwcP
Hvx17dq1Q2gNmjQZqkl99erVunlj0V6X9pJ3P0kHotwn0/fAj+vWrQuuVauW
iGkxb25jWkzpIJaqv1y3K2bspv13R0pk6i+ef52uJYNB/65Wp/2fifeIZE6i
Xf8pXc7TT/q33vR6aVzfpPNu376913fffZdVWB3Gwn//+1+dlZVVIuVE0pyA
fGSozmJ51WIotoTz+CbG9G4LJ0dHNG/XDWMnTMbkCWPQo0NLuFR3QUffybif
yjPND3PW89Jir2B4lxawt7NH0zadMdzfH327d4CrkwNqN+uEg5cfQKnRm+ZQ
Mtw6ugau9laoYu8BX/8ghG4Jh1AsKdKYlIN++8wOtKjljJ+tHNCuez8EjRmD
wf16ollTb3T0roOqVnZYkFu/uxQa02IYDAajYlIsLcaoVyPp9kl4u9nBzr0V
ztxJhuZpAq3pdQ1S7p1HG08H2NVsgRO3E6HSaJBB974+pnufkxO8O/6OPyZP
xcSxo+DTpC6cXdwROH8rOAK5WW8w328fXoF/N29Tfxf4/NYLo0aPRv+ev6KG
oz1qN++Mw1diIRKLcfFQGPy6NUelSpXQsH1fzF28DCci70GukCP1QQSGdm4O
Bwdn+HTui4lTp2PKhCDTvbMhHByd0XvMYiRkCs2xKFJBJpaP6Qyrnyqj18DB
qFW7Hpp4t0XgvC3mOJt8z4VOhaToI/Cq4QD3X3xxLyX7SS5Rcc6TOu/rRj2y
ku9igLcbHFyb4vjtpGdet7Tn5+qWnAmqy0L/R3VyyduPYmUmTJgwl/5N/0+v
s1iZcgDN+bOyf5BPm7VEvWd/P6Nc/kmZ79Nrwlzj1WAwPecYPnzt6A0fmK77
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
53PqwtW2v00+mDxo6WUjaRXFYcTaa4bivI/G7DHz2CMOX/5zKR5roeNiRiw/
iZYdfoNL+4kYsvwSRq46h3a9BsCu2TD0nx+OPjN2o0GLTug67yTTYhiMYsIT
Kr+btfxy6Il/En9TqkpWi9Eb9O8+TLpf0+/PvuEZ3LSfy8KnjMakexnl5FIM
aExMjKuXl1cKm+O90Y1pMQwGg1ExYVpMBWhMi3kRoxH/4WTLqvQKOnKmQdcd
qY16/JXkM3Dv7S7+e//5fdRfJ38dsORC7ebDH3k27v2w96DJezftCB/88HGa
M58vqlQSsTIGsfhL5aq1fyjXbBhjEEu+LOvzUZ6g54Tk5OSf//jjj3nTZs6d
E7jk+CHSRChGpah0m340of+8U3foZ1HfS2NO3xS5WSBRfVt6f4eF94sJWBeB
XoHTYOXxK3rOPY6hiw6iduOmaOi7Cn6rr2J46El4teqCbkyLYTCKDV+o/Hb2
qiuLj11I6KJU6UrUT53uGxnZadWG/9nnSFzygxoGg/7d0jwWi64tl8s/ptzc
7Ozsb0njJo+0Y8eO+VBtwTlz5kz09PTkszneG92YFsNgMBgVE6bFVIDGtJj8
IV+AoVNOHXD8ZaPKquk62DRfb7BvuUHj1GqjwumX9UrrJst01RqFGJxarpB5
dQ973HnQqvNTZyyZe/GfS14ZGRk/0vy2WLEytC6ZmfWjLHD8Js35i63Jw7es
z0V5wFL7irQu8u3ZunVrn4TEJGuuSP4DxaaQXlAcMgXyqsV5H41JOozeYCy1
56WiaDGBYTcwdMEuuNX1QnO/dfh9/HzYuPmgy8yjGL0xGn5LmBbDYLwqfFHp
aTFEtiDzxz9CR2y7dvdyU6pzXRLbtHx3KpXKDyUSyWc8Hq8S3aMeP35se/Hi
Ra/Nmzf3Cw4Ont6nT5+tjRo1umRtbZ3w008/pTZr1uzcunXrBterVy+TzfHe
6Ma0GAaDwaiYMC2mAjSmxeSPSKL6es7qqwtrtNkkIS3meaybrTO6+ITJWvXf
ezdkY9SMoycjf53159wpXbt23TNy5MhlO3fu7BEXF2cnFAq/pLXHQsfKkFfM
43hHab9BR3TxCQ6sflLOswRpW3fu3KlBMTEqleoDi4dyWe9bKR93EeooRWPk
ijPw6dYbjt5+aN6pJ5xaj4HvkosYvTYSA2bvQb1m7dFh6l4MW3XlX/1ymBbD
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
fxx9TF8QLeav+8HwDr0bzc7O/t/t27frrlixYnzPnj130/M5vSuNiYmpnJub
+5U9Y2UstaoFAsGXpBnQ+1jKtYqNja1Ef3f0Y2ZvSHuhfUrnQUnT3hiM0gR5
wB84ETcwKOSun1Cs+soW6xCI+d8u2TY38HTksa5KleJjy98teZ0UU3j27NlW
EyZMWE7+YTt37uxN393/5Pti0fDJY4y+NwraH3toMUJuJmb3bQpXVw9sPpcA
meZVncQIuYiL7fOGwNXZFSMCdoMnVkAh4eNA4Fi4ubhi0NxtyBHJkZ/CUlAt
xrTfoFXJEHv3PMb2bIuqVWtgwJRleJiSDa3e8LflG9QyxJ3ZBHdXVzTvPweZ
XFFRd4c1GtNiGAwGo3TCtJhS0BxNi6G8pCyu7PvVO+7PmLUics2jeF4ttVZf
ovNyCorRYPi3Li6+irTf4OPkF1Pg/3v+nC4SiT5PSkpyCQ0N7UzP6l26dDk4
d+7c2RQzQe9RyRu3uMfr1C+q1b1w4cJp586da0maAdMNrHS+mPYfaVxbtmwZ
SO+67d0fBqM0I5VpPttxOGbU+j1RvmKp2ibXG1/EK+O/cVrwxTtnflNpVB9Z
fHlJU7958+aPFPtInjDBwcGj4uLiPOieXhhtpbDYR4vJwIzejc1azNYLiZD/
TYsBDFolYiP3o4GXG2r9MggPU7ORnfYYI9rXg1vl+th79QkUWn0eS3/WCqTF
PNdhHkaGo1+HZqhavS7GL9yEuDRunjqM+V80ciSe32L2umnaZzYyucIi7Amr
NabFMBgMRumEaTGloDmSFkM6DDdXUXbzgYcT5666tvJxQm4NjVb/vumRqXSM
6amOUlKyB9VR0mdk/vBm++hFrAzVKw0MDJxEz+7Dhg1bv3379r5PnjzxpOd6
W8WkWMYONEagPCmK2di3b1+3DRs2DCU9iOXQWHdfU55Xp06dwuj6ZdoWg2E7
SH/ZtD960rbQR2MlMnWBahwVFp4wp+zM4IlbbkRdaaVSKz+iXFTyAlu6dKlP
t27d9pGmTbX1SHcvjnupPbQYES8L8we3gqurO9adegyZ2vD3mYwGCLIS4du9
KVw9amDj8Ru4fToEdTzd0KSbDxKzyEMm/7yjf9ZijNBrlIi7fRp92zVB1ZoN
MWftAaRmC6A35NGf582gluLRyTXmuJjWQxYgiyd+w71g1ca0GAaDwSidMC2m
FDRH0WLMMQBi1de7jz0ZNnXJ5U1UW1RjjocpJToMQTpGapqLxLv3eX16RpGO
hyVWhuIlEhMTXffv3+89duzYlRQr4+/vP+Py5ctNMjMzy1n7vSqND2i5u3bt
6kV+BqTFWGCxMNaH/HcWL17sS9ob27cMhu0QSVRfrd5xf+be8CdDZHJNvr66
RSEnN7ucT+CIvVfvXmwdGxfruXHjxiGUdzpt2rSFkZGRP9H1TrlGxXWt20OL
kQpysGZyV7NfzILd+dciUsuEiNg8G17u7ug+YQlW+PaBh4cXZm06/ZfaSnm1
f9JijAYdspOjMLlPG1SuWhd+60KRwRPDkI//jKVpFSJc2Tnf7BfTzXctcgSy
wm28bRrTYhgMBqN0wrSYUtAcQYuh5065QvtJ+IVk7wkLLuy4cT+rGdW0KI1j
T31GZkVJtz7n9E9TXWCl7SOthbxayNuVnudp7E7vWMk/lzQTinWnXJc3jZUh
jYViYOhdLWk7J06caEu5UbQu8qqx9z4trVhqa5HexuqBMxi2hd4FLNt8xz/s
dEJf+j6y9vLpek7npDr1n9I1wn/p3Hn9+vcLGT169GqqP033bnv4a9lDi1FJ
BTi6apJZzxgesBd8cd61iIx6DdIeX8JvDarCpVYr/FLPDVXq/4aLMWkv1Zl+
Pq/RALVSBj6fBy6Xi/iYBxjVoTacnD2wNvwOUrO44PH4EEnl5rgXpTQXh1b5
wsvNGe2GzMaNqFhk5+SY/9fCs/kVMLwUJ6MQ87Fn4VBzHSWf1eEQSFU23VcF
bEyLYTAYjNKJRYuh72mp6Xcxw/GgY2c6hikl+Ttaq9W/T/68E/wv7Dx5KbkL
eSiWRh2GMGRm/SDtNeC0PjGpEqzsA/Cyjy7V1NizZ0+PUaNGBXt7e+9ftGjR
lKtXrzaiWhyk2xQ0Vobmo5iMkJCQfuRbYtFjKA+KfCJL63EqCdBxunLlSmPK
SbPB8um4kb5D7/8/Yzgsnz4/juw6LCJUO2nBuhtLT1xM7ko1lay1XMt9me6j
h46Eda7TpHps125dQvfu3ds9LS2tgj3vo/bQYvRqOR6d2Yxq7m5o0XcmUnOE
f6kb/Wcz/VHCz8CKiV3w7Vdf4Iuvv0Xn8cuRwZf8bX7yfXlwdi/GjRqO/v37
oUe3rqhS8Wt88slnaNymM3r37YdBQ0di0ZYjEEpk4GU8xqBWVfHFp5+idtM2
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
4l3ofJk2bdrC77//Pr1du3bHLXVbC6jHWEWL0WvkeHR+O2q5OcGrUTfcTuJA
Z/i7ymA06MBJuoseTSrDya0mQs49hFyTfwxNUZrRoEFG7EV0bdkEU1ceRq5E
aZP15NV0ahnund6KJjU84OJVFz7zg3A84hxOHt2P6SO6wal8edT9uQ9uJXKg
zWM/FbYVpxZj8eWlfA8610gDpNpfmzdvHpSUlORSkHPPIBB8I582a53AvZrM
osUIKlWXZkycuHOW/6BDdbq7yl/WYqp1/l7XY0r7G+nZqS7WjiUhn7Ow0/F9
F2+4uUhg4xpK5Escn/qk6gj/PscpV8nWx8raOLJ3r1Qq/eTYsWO/0dTefWEw
GAwGg8GwBvRczBMo/ue/5sayveGxQ2QKzaf27pMjYMjhficb7xuivXKtlVGt
Mdc1pRgIek6kscw/jb8ZpQtLrExKSooTeTVTXBTFGNAYl36+fft2XfKdpFyQ
l2Nl6GeKoalXr96td999V/ef//xH0ahRo6tHjhzpSOdQAeJqrKLFUBwIPyMW
Y37/ERWdPbEs9Dokyr/HoWiVEtw8FAQv54r4seNoxKbzzHk6Br0WUpEAnKwM
pKamIjUtDVnZXEjkShhe1SrIb0anhViYi6zMZ/OnpWeAxxdApdGZ/WjIo0WQ
lYRzuxahsrs7+kwNxoOYBPBFsmf+NM+XIXlpGamppnVyciCSys3zWNZq0Osh
EXCRmZlp6o8KolweMjMykM0XQafP2+tGKsjGat8eqOzpiQmBe/GUkwu1WgO1
SoGU2LsY3r6OaT95YOXhu5CqdG+83y2tOLQYi3ZIsXr37t2r5e/vP4N8j5Yv
Xz7h8ePHXhKJ5NOCxHGZ85OSU9zFv3a4L6jgrv9Ti/nBQxff8KfMbj2qc2t0
+UFLPjFVO5fXV+1U3kA/txxSJ/3SnXPtNFq1VevzCcWqr1aG3Ju9+9jjYTK5
bb+/dHrde48SHtSdsGTowZxcTnHVrbfevjId+/Xr1w9zxHhNO/iiMxgMBoPB
YNgU01jkvehYbt0Rs8+GxqUIquhfifFg5A15VCoWL/NX7Ts40CiTfULjHHpO
3Lp16wAad9O43N59ZBQ/FD//+++/H6axLf0cERHx8+zZs+d27tw5dPLkyUtI
YyG9hjydaUxBut3OnTt7lylTJuf//u//QLz//vuaatWqRW/btq0/+T7/w/jY
anWUVFIBjgb7wqViRbQfEYB0nhh/sUMx/SLmpWPJ6A6o6OSCyauPIFeqNPvH
pMffR/DCafijbWvUr1cXPzZohI7e/REUcgSpOcIX/r6koWiUSHl0A0tnjUfb
1s1Qp3ZtNGzSAgPHTMepaw/NeT+knayd0R+1PSvgww8+xDflnPBjo+bw23AM
QtM6daZlJJuWscxvEjr80hI/mtZZr/5PaPdHDyxYvQOxaVxon+ssMiEPW+YO
QYvmLbEh7AwW+AxDsyZN0H/6GuQIJHnuC7lEgLBNSzFzhh+uxWVBrbPsCKNZ
pwn26QpnZ2fM2BgBoUxdpP1OzdZajEUnppy6VatWjSFf3rlz586+detWPYrL
Io2moLqxUaX6SBN+squwVoPsP3WY5yS7VdLM7FIvo/v41lFdJ/1y74/xLR82
6V89h6b9Z3a+FHp2z2C5Um7NuIZ/5fDl301edHHblTsZP6s1eqvqPK+i1Wne
v/v4ZuPpK8eFcAU539lyXbbAkfN86J65f/9+b5rauy8MBoPBYDAY1kAq03wW
EvZozPKtd+YJxKpvTEMlFsdRAIwy2aeqPfsHK5aumEe6DPkuUB7+oEGDNlNu
Eo1t7N1HRvFDXqeUn0RTGtuS5wblgpCn78aNG4cMGDBga58+fXasXr16NMUm
xMTEVKbYGYqHsWgxBMXIuLq6Ji5dutSH8p9ecz5ZTYsx6tV4GhWB1jXc4Fbz
F5x7mAqN3vjS5xqkxVxE29oecKveEqejUqDSaJCVeA+T+rSDp6cnWnfsiSkz
ZmGaz1i0afojvKrUxITFO8ARyM26DsXPZMTdwCjv1qb5q6BNp14YO24c+vf4
HVUruaNui844diMWIrEYl49sxUjvFvj666/x0299EbBsFU5fj4FcIUf6k0gM
69wCHh5eaNO5L6bNmoOZUyeiY+uf4FHJC70nLUNyttAcs2OOcZnUGU7fl0Ov
gUNQp259NG3dDhMWbTfH2eTVyDNYLhFBIBBCrdO/0KRIj+KmI2B4O7i4VsKS
/TfyjB8qbLOVFkPnIHmDkP5HvkZ07k2aNCnwwoULzUnne5PYPYNQ+LV81ryV
Ao/q0le1GL5HVXnmlClbOElPqmXzs75/EHe3Qa+pHa7RlOJIpHLJZwWJvSlw
XwzGd5LSRJUGTjt1PClNWIl+t+b+exW1Rv3htQeXW89e47OJJ8xxOA9Zel8Q
EBAwlab27kthcWQdicFgMBgMBuNV6Bmcw5V9Tz4xF26ktVWrdTZ9p1iaMGo0
H2ivXmspGzdph56TXZ7GNOSBSXoM+Yew3KS3k7zi6C25IZQDQvWVTp482Wb6
9OkLaFxB9WUpJuZf//qX8WUthnjnnXcM5cuXz6B4moSEBLd8xs1W02Ke6Qxp
CBjRHk7Obpix8dRfYj7UchHObPWDu7MT2g1fiDSuCAoJHweXT0QlNxd0GDoH
dx4nI1cohICfgwdXw9GpcTV41WqBwzcTodQazB7Be5eMMc3vih4+yxEd/xT8
3FykJ8di64KRqFy1BgbO3miOV5HwMnBg6Ri4OLtg8LwQPM3kmespyURc7Fw4
wtyPP0YuwIPYFAiEIghzeXh06wx6tqwBV8/a2HjyPmRqHaSCHKyZ3BX/+/pL
1PipLVbvi0DC03TwhRLo88lRymcHQa9VIu7WKbSr54mqDTviYkzGX/SqN23W
1mIsOXNU8+vw4cO/k7f0sGHD1lNcFv2NPnvDe9S/9Dnc76RDRoaJGrVIEtVv
+lRYt1GGwKWyiqaiRi0TZaPG7zFweeaa7uRv239m54u28rlVa3QfXrqV/uvk
RZe2UXyM6UjY9L6rUqs+unD7zG/+G6cH80W8MrZcly2g+xDFQTli/izlePr4
+Cylqb37wmAwGAwGg1FUtFr9+7ejOY1Hzzm7Py1L4uxoz2Z2xWB4R5/y1F0y
YOgx8e27DVNTUpwpBoLiY9h+fHshDYbGCvl5GlhiZSgmgWonUe7SRx99pHxV
h7FAGs0333zDo3iaqKio6nmMoa2nxeCZH8yNsCBUdnVG426TkcTJhdnuxWiE
IDsF03s3g7OrF1aY/WQ04GfGY0TbWnB2q4UdFx5CptGb/V4IuSAbO/yHwsXV
HeNXHEKuRAGeaf5hv9L8tbHn6hMotM+0EINOA07CLSxesBDBO8IhlCrMOVPh
qybBzdUNIxcfAF+sJENf8DJiMbh1dTi5VEfI+Ze8g03rVIi42Lt4JJycnNFn
1mZwhTLIBDlYO8Ub331XFj8PmoOkrNw3qEVtNPcxPf4eZg3uCE+v6vANOgCu
WIFCLyqPZi0ths4NGmfT+XX+/PkWFANDsTDbt2/vS8smv6Ki3p+ojhz5Zekz
Mirq0zMqam/daSTu0OUGTfUZmRUNXG5Zo05vPv+faTFdbKbFSGTqz7eGPhq3
dteDaSKp+ktbrONllCrFx6cjj3VdGjI3UCDmf2vr9Vkbui/ROwPC0XxXHNl3
mMFgMBgMBuNVJDLNZ9vCHo0h30OhRGX1WqOlHQOPX4Y/edrGsLETNviMGbPa
kpdi734x7AfFHPTt23c7TV83H+VpUM2aJk2aXH7vvfe0+WkxFj3m888/F3Xo
0OHo1atXG71S58aqWozRqAMn+R56N68GV68GCL0eb45nMehUSLx1BI2quKF6
s164S3WW9BpkxF1Ac09n/FC5FY5cuomEpGQkJz8j4Uk0jqydjooVndBmxGJk
8fjIiKf5XeBSqyPupnCgfyn3R6/TQCwSQfLcezdPLcZcW+kcmlZyhkvN33An
2dSPl8QQvUqK+0eC4OLkhJ96Tkc6V/inFlOxYkWMXR5W+HpMxmfxME8f38Ls
EV3Ntbz7TApEbDo/z1pTb9KKqsVYYq8o5oE8YObMmeNHnjDkDRMbG1uJvGKs
mRv0MqTHSLr2ukjTVz/L4mb8MMiv21ma2mLd5Ds/Oygy+PSVlD+UKp3N6zQr
lPJPjl082Gfl7kULhBKBw+X5UGwe1cuifElH810hDYa+Y5kWw2AwGAwGw9Eh
XxhurqLstMArG89EPu2oUtv+Oba0YZDKPstct3Hi7MbNbh/es7cnjZHt3SeG
fSmopwHFxlB9VspBep0O8zIff/yxnLSb8PDw9jSOeq7HWFWLofgPuYiL7fOG
wNXZFSMCdoMnVphzkQ4EjoWbiysGzd2GHJEcRr0KqfcOo0aFsvjwP5/Dw6sy
qlev/oJq1eDl7owy5Sqi5QA/ZHA45vlrujjDtXEfJGRy8TolIy8txqhT4und
MNRwdoZb475/W4ZRI0fixW1wN31erd0oPOXwzTlKpMW4uLhgTsgliOSagu8N
041Sq5Ih9u55jO3ZFlWr1sCAKcvwMCXb7A1sHSWmaFoMaSw0xiafqmXLlk2k
2khUy4v8iKhejq29q16nxdgyLoa8YZ5miN3Gz7+wOz5FUFlvMNrco0umkH56
8MzuIesPrJgpkgod7v0FnSfkCU61lBxNiyHfLNIXaWrvvjAYDAaDwWAUBdNz
7L/jnworD55++lhiqtDL1p6HpQ0a/6iksk+kV6+1SO7V/4Q0Lr6ygfn1vvWQ
Hnf58uUmr9PlLDW3xowZs+qTTz6RFlSLIT744AN1zZo17+/YsaMPLcN0Hn5g
XS0GMGiViI3cjwZebqj1yyA8TM1GdtpjjGhfD26V62OvObdI/0yLuX8YNZ2+
x1cVqmH0BB/M9vOD3yvMmb8A6/eehkgsMGsxtVxIRymKFnMINfLRcyxajJuT
M6q1H/0XLcbVtBz/XVchVhTQa/e5DvMwMhz9OjRD1ep1MX7hJsQ9r9FkLR2G
2ptoMXQe0XlG8VUU60Ae0FOmTFl05cqVxuQXTfEDxRGn989ajG38YlRq3Ufn
rqW2nx54ZYPZK6YYfOelcsnnu45vGbPtyDofiUzscHWhSZej/DVHjC9h3r0M
BoPBYDBKC/QceyYytSM9x1J8jK09D0sTNL6hmP+zZ8+2fnLxUkvhmIk7Necu
tDWq1B/Zu28M+2GJT/gnTw6aj7x4f/rpp0jSYsgvhjQWylX697//rSfP3tfp
MVRjyd3dPX758uUTMjMzK5rG4q2tqcWQJ4sgKxG+3ZvC1aMGNh6/gdunQ1DH
0w1Nuvkg0eK3YtAgM/4SWlZ2gXONtrj4INbs2ysSiZ5h+lkoEJh9dSUyJQx6
9YscpRrtcSs566X8omc5SgI+H/xcEXT61+QoxV1AM1pGzVeXAeiVEtw9tBwu
zs5o3HsmMl7KUSItZsGuyAJqMc9qb8fdPo2+7Zqgas2GmLP2AFKzBS/qc1ux
FUaLsXgO0Zj04MGDXah228iRI9ccP368HYfDKVvcnlX20mIor3bV9nuztoU9
GiuRaT4vjm2VyERfbD28dvLuE1vGkC5TXPvYWtC9h/Q78pe3Vc6araB6YOSN
T1N794XBYDAYDAajKEik6i82H3g4ceO+aB+x6Wd798eRoPeJlA9AY6DI06fb
SNZvmqRYtnKOQSD4Gswv5q2F8kEoPoGmr5uPzp/Hjx97TZ06NaBfv34hXbt2
PdC2bdsTprH4xXr16t2qXLlyjLOzc3KFChXSKIepXLlymWXLluVQvSXy8f36
66/5NK1aterDgICAWTdv3uzRpEkTjtW0GFNTy4SI2DwbXu7u6D5hCVb49jHX
j5616fSL2kpGA/hZCRjVvg6c3Woi5Fw0ZGr983iRZ163Ak4aElLSIJarYRr7
PffurQknl2rYcibqz/mNBg04ybcxbfRIjPdbjcxcMZTPtRhXV1cMX7QPfLHi
2TppGW2eL+NstNkv+NkqjZALs7HTfyicnFwwaN528ETyN9JijAYdspOjMLlP
G1SuWhd+60KRwRObtsGa0TAvWkG0GIsvL8U0RERE/Ey10/v3779t9+7dPVNT
U3+whi/vm2APLYa2k/zmx8w9t+9mFKeJRqt/vzi2lfKS1h1YMfPgmd2DKV+p
uPd1USEdg84dynMs7pxaOmY6veFDlVb/qUpTeJRq3edCiawMTV83n1qr/8R0
nb5bHHFSDAaDwWAwGG8CX6AoM3tl5OrTV1I6FYfnYWmCxkM0lt6/f793Lpdb
RnvvQX3p0NGhurj4ykaWp/TWUtAYeku9YfJZpXwBqrtE8Qzk90teCFT3Ojk5
2ZnOsTt37tShnCeqgx0aGtqZcpPWrVs3nHxB/P39Z6xYscJ33759Uxo0aMC3
phZj1GuQ9vgSfmtQFS61WuGXem6oUv83XIxJ+0sNZ6UkF6ErJqKSqzPaD5qF
2zFJyBVQPAwfyU/uY6lPP7Rq1xkHr8ZCodE/r2k92lyPuv3g2bgTkwgen4+M
lDjsCpyIyp6V0cN3FTgCqVkPOr1hmjnGxXtiEGKTMyCSyiET8bBv6Vh4mNbZ
cfh83H9e09pcRzvyBLo0qQaPqg2x88Ijc42lwmsxRiiluTi0yhdebs5oN2Q2
bkTFIjsnB6bj9Sc8Ht/UH4VZYypqe50WYx7DPq8hQ7W3Zs6cOb9Hjx576DyI
j493t3eMgz20GHN+0vXU9pMXX9rK4cq+Ly4Nivx6V+5e5H/sUmgfhVL+X3vt
8zeFPGI2bdo0mM6d4vaL0Wj1H8WkCluduZ859tTdjEmF5fit1Cm7IqIW/j97
5wEWxfW18S/dEk0vxvyjJvYYozGJGnvvvceuqCAdsXdsqAjYBaQoKvbeUBEL
RRGwAQpKb7vswvZezrdnlcRYYdk2eO7z/J5LmZ17Z3Z2duadc96D/euWi7iT
PzObLWqmUms+sPT+JgiCIAiCeB68bs0rFNadvjD8xP1Uzm9qtYZReeOW3G+o
w+A9ET5fxOeKeA+kYRd9K16+aoMs7OBUrUhcw9LzJCwDenSgPoJ9RdeFxxoe
W3gPjsccajcY94DHHd57Yy4Uj8f7VMfXKSkp/YwdF4MxJgJOLvi4DYevv/gM
Pvvyaxjm4g25HMF/ajhr1UooeJQAs8b1gyaNG0PX/iPBfd5CWDhvFowe2B2a
/dwMBk1dCMk5HFBrtKDRLZ/7IBbshneDhg0aQue+w8DO3h4mjBoIzZs0gj+6
DIFj0SkgVahBLRfB7TM7oHnDevB9w99gqr0b+Ow6BSU8PuSl3gDHUT2hceOm
0Gf4RFiweCnMd3eGvp3b6OtN23n4Q45urphLVW4tRl83Oxmmdv8FPqtZE1p1
6gN/j5sAEydNgknPYDNjJniFnNbrMRVtr9Ji8BjAe+a7d+82X7t27Rz05cUe
65vj303ty1sWzK3F4GeDWyL9ep1/3OrQ48kzhWKF2TQFrGO9Lni51/noUyOw
vrWl9315wXNIVFRUOwR/NufYXIH02wX+UYeHLDpVOGDByeLy0n/+iZK+c4/x
sX/dckMWnypYEhS9p1gg+8bS+5sgCIIgCOJ5UHtJfsRpOW1B+AnUZKgOc9ko
zU1avXr1/GfrV2ul0mqKs+FDRG5zg9TZOT8Cw/LwCeMdH6jTmdkT08h1lP5t
KpkI7pwPhI5/tISWv3eAgHO3QSRTPbcU1nuWQc7DRNi6Zj4M6dcDWv/xO/zR
ui30HjAcFq/dAXfSckGuepq7pNWCSiGF9HsxsG6RM/Tp1hFa/dYK2nboApMd
5sHZqLsgkCj09Yu0WjWUFKSB1xwbaNOqBbTp2ANmeYUCly/6p8a09zJ3GNCr
m37M1m3bw6CRk8An6AhkFHBB9TReRczjQKinPXTq1Bm2HLsFAunz2/D8JqmA
nXsHpvRuC41+qgcNGzeBpk2bvkCL39vC9OUBUFQirPC+fl6LQQ0GNTf0FcKa
NxgHs3DhwpXol1F6jFnLedvcWoxK9/11P43z28wlFw4npXFamvNZAodX9O0K
/wVbIuMuDJDJZYzzByurp5UpKOCK64xefjbNZmM0zNx+02To1q8d7XE2Fcez
9P4mCIIgCIJ4HrlCVeXKzew+89ZfDUDfXkvPhylgHMKmTZsc8bk05pf88z+t
9l11bl4d0ZyFAfJjJ8doJcx7XkpUHIxdwZwR7M04rsm0GK1WAwqpEHJzsiE7
JxeEUsUTz94XF9THuwj5xVCQnwtZWVk6siEvvxBK+EK9D6/2ueXVKiXwS7iQ
n/tkeVw/m1MMMoVKr8M8XVC3XhXwi4sgN/vJHIpKBKC79/5nHQJcR97TMXXL
5Bey9T7B6md8XTRqNQhLdOvQjcUTycrg+YL6khxYeTmQpdunma8At5HF5eu3
r6KtVIvJyMioh768mKcWFhY2evLkyUFOTk4bz5071xv1X3P78pYFc2ox6AGC
/maBh+65eAXGreDypF+Zc38UlbBqLd4ya2fMnas9FEp5FUvv+/KCcXVYZ8sS
/rf5HFHdEUvPZKJe4hZ822Tg+nEcHM/S+5sgCIIgCOJ5xBJljUPnHk7aEHhr
RQlf9qWl58MESmuXYK4A+oE8H/uA+ov8xOlRIvf5Oyk25u0Ejwv04TVzzVWT
aTHUzNfwvevQoUNObGxsmzNnzvS1t7ffgt7g6EmFxxOee6xNg9Gjm5M6J7ee
YNT4S+rcvLrP/9/YWoxarXkvNaPkZ0ePS2GxifldFEq1OXXP/2MXF9ae6+Ow
Jz75RgelSmFyv2B8z9Ua7fs6PjAGWdnZ9YYNG34U+zcta2z/W9JiCIIgCIIg
4P/wuaLf/jvuwYexFqiccXU5zU2pZwP6rOI9EXo0vHBfpHkSGyOev2S7LOzg
FK1QVJNqKr1dkBZDzdCG713z5s0FWFdr7Nixe/z9/ac9fvz4p1JPKrCC4/ul
6OamTs9oJLRzPKApKPz++f8bU4tBXQC/r0KO3Hdcvf3GeozpNLc+Vcgp+N5l
7bTD99Ju/6lSq0ztDfsO+t2mFwhaPcgp+csYRMalDO01dOJN7N+07KM8fisO
X1pLrdEaxZOItBiCIAiCIAj4v2Ke9Ku1/jfXHLuQNlYsVTKuFoS5wfz6kJCQ
iZifhHlKr1pOK5NXUURc6StycNujSkppoVWpyRP5LQJzk1JSUppUlhwlauZr
+N61bNmyBL2f0ZMKzzlWrcE8RatQfKSMvdlJ5Oy+S8Nifff8/1GDmbJkRIQx
tBiV3ueM2xLrWEcn5HUzd0wMUlCU94PdyvGnU7Me/KLWmNY3GXWmwmLxjzN9
L98YtuR03tDFFWfQguOFHe1C5Ni/Ydlc9HZZFhwTUiyQfW2M7SEthiAIgiAI
Av6vqFjy7cIN17ZHxGT3w9qglp6PNYPXw/n5+d+hZ0NERETX195nY+2bIs63
Ui/f5VLvTUs1bHYt9JKx9DYQ5qGyefdSM1/D965jx47ZqMO8NO7OStGKJR/L
j538W7JizXoNl/vCPXsBJ+8HxzWTj2NfoXGwdhJP+tXWPbfnewfe8uCUSL+x
xD5CTclm6aiLWQXpDbUmPrfj9uWwhQ1HLD2dNdXEfrfPY+8Xp3byu8H5e8XZ
FGN54JIWQxAEQRAEAf/H4ohru6yM2BN3t6CDUqk2ec47UymtK4x5SVjfBP0O
33T9r9Xdh6uSkluIXGbvkp84NVpf45oh91VExeBwOF96enrOxd6M45IWUwna
q2paWzsaHu9z6eZtC2RBuxy1AuELMYNP4mJGVjguRqFQfxSVkNfN0SMi7E4K
+0+VSmPq/KAXwHN/VkF6A9Rinm6PSc/rpVrM8KWns0ytXzyPe8ht9ZyQBPao
ZWceG0vTIC2GIAiCIAgC/q+ALfrftAXnTyQ/4rRAL0RLz8daUSqVH6D3B9Yv
wZ/L9BxWtwz6+CrOXRgicp0Torx950+t7rWW3hbC9OCxMnTo0CPkF0OtvI2R
Wgxq1YWs2iK3uUGKyKu9tfL/1hXC82V2QWb9KUtGXspnv1hjqaxoNNp3cwoE
9Zb6Rm3ZfSzJHv3OLBETgzlJqVkpzTFHCXOVTD0eaTGkxRAEQRAEUfnILRTW
HT/r9IWMHJ7J46yZCl4HY3zDihUrFoWGho4TCoU1yvx6vEfhFn8t9Q9yFS9f
5a3OzqmnZYD3A1ExSkpKPtuxY8cM7M04LmkxlaAxUYvRqtXvqZJTfhVOnn5S
9Ti90fPnuCdxJBkNpi4ddTG/KLeOQWPo1sEXyj8PPZ48c7HP9W3Z+YKfUJux
xPaiV++9tMQ/XddNO8TiFrzgU2z0/UtaDGkxBEEQBEFUKvTPKvMEP411PR2B
mgyYOM6aqWBuEt4Xubm5bUhKSvq5vB4gWrXmPXVmVn3xwmWbpQHBLpriki8p
V6nygp8rhULxIeow6PdhxrGtUovR3ZeDVMSDvLw84JQIQCjgg4AvALlSrfsY
aF/9Ot3/1Eq5flmBSAJq3Xqe/gM0ahVIxCLg8/k6BCCWyHT/10Lp2jQaNYh4
XP2YPJFU9/urx7G2xkgtRiz+WH742HjxspU+Gg7nG3juuwQ/E5n56Q1tlo6+
YKgWI1eoq0Qn5HV18ojYh369+LultlehVHwYlxTTaZ6v0252ceELPsVG37+k
xZAWQxAEQRBEpQKfKT7O4jWZOPvs+TyWqI6l52ON4DUwai/oE8Nisb7Be2xD
YuK1utcpb95qL3Jw26u4GDFAK5VWIz2mcoI5bFlZWXVSU1Mb4vFixrGtTotB
PUXCY8HJnaugT+9+sGzrAdi/cxN4e/vAlTuZIFOqX/latVIGWXevgo+3N/iF
nYMSkQQ0qOsISyDt/i04sCsA1q5eBWvWesGuAyfgfloWCKUK0OjGlIlK4HyI
J/Tr3QdWB54CNl/yWt3HmhrjtBiM/WMX1RIvWeErP3J8HHr4Pr8M6tmPc1Ob
zPD4+5whOT2YP/s4q6TJQu/r2zEuhieQf25JT2O5Ql7leuLl3ku3zfYvKmHX
MvV4pMWQFkMQBEEQROUCr29THnF/tVl4/kQ+W2ROXwvGgLWSkpOTm+bm5n5f
oZo46B0jFH4iP3R0gmjWvEDVw9RmWjXVua6MYA7b7t27x/v6+jq/3TlKWlDJ
xXA7Yh/0afc79J04F2IS78Gu1XbwS7NmMGVJALBKRPByhUQLohIWBC6bCs2a
NQe7NaFQxBOBmMeCUyFe0KNdK2jcuDE0bdpUR2No2LARtO0xHHafvQEC1GM0
Ksh/fBtmj+8Dv7fvA/sv3wWxXPWKsayrMU2L0apUH6ju3P1DOM3+8NPz2gux
YHotJie16QyPsWfLq8XgM4NCjrj2xpCEJZ5+NzzzWMI6lspNKkUml1a7dOPs
4NU7F2/k8oq+Mfk+ftu1mKBEcA28BY47YsAlMAFcdX9z1f3N2T8WHLZFgaPf
Tf3vpMUQBEEQBMEUsP7E3QfsP2cuvXiooEhs8px3poHXv+jV6+7uvv7YsWOD
sXZShdapux/RFBbWlnh6rZL4bF6MNa8pNqbyIRAIaoaEhEwMCAiw4fP5n5hx
bKvSYrQaNRRlJ8Occb3gl1ZdYG/EbRCIBHA/Yhf81qAeNG0/CuIeF4DqJflD
Wo0KCh7Hw5iOP0O9Bi0h5NI94AsFkHA+CDq2aAQ/Nf0D3Ff4wunwS3D2xAFY
YDcK6n3/PfzRczzcfFQASg3qQCK4fTEUOrf6BXpPmAcpOUWgZkBsDNO0GA1f
8Bn6YUm8fJdpiotfmn+p0Wjee5T98GfbFePOlEeLwXMwTyD/Yv+pBzZz114J
TH7EbaFSm79u0vNIZOKPz1w7NsZ710rPYj73K1OPV/m1mERw2XkTbH0vgsOO
p7qKDhf/GJjhewkctkfB1DUHof90T5iy6bpej3HcGgGjZ2+GPtNWwkC3AJix
JfoFPYa0GIIgCIIgrBWlSvPhrfuF7Zw8IsIKi8S1LT0fawO9Ph4/fvzTsmXL
luJ9kcYInrv6Otf3kn4TOs0KlZ89P1QrkVYnPaZygccJ6jGIMY6ZcmBVWoxC
wodr+72gZdPGMNLVG7LYfH2OESf3ATgObg11f2wCGw7HgECqfOG1SqkAbhz1
haY/1oXWgxzgQU4R8LmFsHnOGPi5SRNw9QqDzAIuyOUKkMskkPEgHmz7/65b
ZyPYeCwehDKV7mOlAT4rC7xchkOTpi3B++D1l45lbY1JWoxWo3lPlfa4iXCm
S5jyenQ3rULx0cuWw7pDDzOTf7VfNfFkAadsWgzqDyKJskb49czBrisjQqPi
87rL5KqqWq3lfc3EUlGNo5fCJm/d77WMJyz+wuT7ubJrMUHxYLfhEPzZqQ/0
cNkLDn63wHVnLExe5A1N2wyFQbN3wF+DbKFZ674wwvMCOPrFwMT5G6Dt8Hkw
yMkHOg0cC71m7de/jrQYgiAIgiCYgFKp/jDubmEH15WXQ1kc0mKepdR/FWNh
uFzuFxXKT3oWzFUSi2vIj50cI3KdE6xKTWv6sph+grngsWLUY6bsWI8Wo9VA
SWE6zB/XFRo0/h2CLmKO0BNvGJmwGE5smQM/1a0L/e3WQE4RH/4TrqL7hV+U
A+scBkLdej/B7M3HgSuUgVhQDEcC1sOihUsh+mE+yFWlL9KCsLgQtriPgB9/
/BEW+odDiUiu/49aLoY74YHwW+OG0H3CIshglYC1h8YwRotBnxih8BPZ7n22
WCNOw2J/9ypdWa1Wv/8g/X5LhzWTjxdy8t+YD4vnX6lMVQ31F7fVl3efjnw8
UihW1LSkR8yzCMWCT8LOhszceWTLXL6I97mpx6v0WkxwIjhsDofuA4dCswHz
Yfrm6+C47TL0HzsZGnSxhUlrT8H45Qfgr25DYIRnODgGxIGd9ymYvO4CzPA+
AwPG20FX+2Cw33GTtBiCIAiCIBiBQqn+KOZ2fmf3NZEhLK7E5LUgmIRUKq0a
GxvbJj09/Uf0YjXq+rXadzWFrNqSNevXSDfvmK/hcr+i2JjKA3o8Y14b9mYe
22q0GK1KBpmJp6HjL42gZc+pkJTN/ic/SKuWQ+adcOjRogE0aNkLLt3LAoX6
X4FEq1ZAdlIk9G3VCBr82g3O38kAue7/WBtJLOBBcXEJyFXqfzUV1G7YObDG
th/8VL8xrDsQ+0/8i1arBlbWfZjcowU0at4Zzt3J1K/LmhtTtBh9HeuHac2E
9q77FJFXe2vl8lfWNVKpVe8nPb7bynmtzZE3aTEY94I1kuLvF7ab7XklaP/p
BzYlfNkX1qLDIAIR/7OQ4ztm7Tm100koFnxq8n1d6bWY2+DiHwVjXZdAvd8G
w5g152CG1zH4o0NnaDd1G8zcfgPsfMKhY6/hMNIzHJwCMafpFjhtvw4Tlu6E
doPsYPSq8+AcmEBaDEEQBEEQjECvxSTmd3X3vBLMJi3mH/C6F7167e3tt1y8
eLE71lAy+hhK5Qeq23f+1N/HXLnW63X3MQSzwBpKvXr1Oo+9mce2Gi1GiflJ
e1dDo/r1YfiszVDIFf7rm6vXTrJhjV1/qPdjA1jof+6fOBZscjEPLgQthYY/
1oN+tqshm81/TSwL1r2WwsOb56Dfn03gl78GQWRS7jPajhaE3ALY6DYM6jdo
BJ5hUcCXWHeeEiO0GIyJKSn5QrojwF2yep2nhsWu9To9WaVWfXAv7fafruum
H2JxC17pTYY6jO576cP7qZxW872u+QccuDurqFjyrUZrWa/e5+EJS77YcdB3
0cHw0OkiibCmqcerqBbzUp/bl/jhWlKLcQ2Khxnr9kOL1h2h60x/+HvOWvip
RR8Y7nEGnAMTYabvf7UYZ78oGLdgC7Qf5gzDFh0CB/843TpukxZDEARBEAQj
IC3m5aBPzKNHj+p7eXnNys/P/84knh+YqyQQfiLfu3+aeMGSbersnHpa83qL
ECaioKCglq2t7XbszTy21WgxYl4R7PKYAvXr14e5289BsVD+n/+jH0zsEV/4
uf6P0GHUbHhcwAW9ha/uZry4MAMWjOsMP9ZvCj6v8JN50rSgUSkgJzUBFtsM
giZNf4U5vgef1q/+dym5sBjObJ2jn4vNSqzHJDHZdhujMUGL0SqUHypvxHUU
znQOU8XFt9Mqla+t3a5SKT+4+zC+7Swv2/2v0mJQh8G82eQ0TovFPlFbN+1O
WJTPFv1g6ZpJL6NEUPzlxr2eK09EHhovlopfqOFt9P39Ri3mNd63PhfBbuMF
GDV7078+t5uj9NqMzbN+uEGW1WJwGxy3XII+I8dB4x4zoeuQMdCk9yyY6nsV
nP1iYPKqg9CmywAYuPiQbv5XYcpyf/ij9xQYMCsIpnhdgJnbY8m7lyAIgiAI
xkBazIvgNS/GwYjF4upYj1hdTi8XfL1ao/1ApdZ89EZU6qqKrJxGggVL/cV7
D9gp+cIvy/S6ivOh7v7mPWvwwKyMYE5bdnb2D0bPbXszVqPF8DkFsG5mP6hf
vwH4HEsEgUz9n/9rtSooSE+AcV2aQ/2mbeFwTCpIlRrQqGTw6OZxaN+sAfza
eSzEv6LOEootGA+TmXwTltiN0Ne9Hj/LCx7kcF5YXiUVQPwRb2hQvz4McPSC
Ao7AlJte4Wb1WoxG8646N6+ueNkqH6l/kIuGx/v8TTmWSpXyw4SUm+3meNvv
ZXMLX/Am+0eHecT9dYlP1BbfkPgluYXCuniesvj2voRiPufrdcHLvMKjTw2X
yiTVTT3eG7WY13jfNv69P3SfPA/+HDb3X59bt71g43kAOgz+1w/XKdDSWsxt
cA2IgYnz1sL/GneEhi1+h84zg2Dm1iiYuswf2g6YAvWbtYbmvadCD7vN0H/c
dGjUZgC07DkBWg+2h75uu3TbTX4xBEEQBEEwA9JiXgS9eq9cudIpJSWliSH3
0mqlqgons+DPwuT0HoVJj3u+kcSUgbmBYasybN0j8yNiJhXef9S7TK+rAOyU
9G7ifHYjjUpt8dqwlRGhUFjj+PHjg7A389hWo8WUsPNgyYROUL9+I9h5KQ1E
iuf1FC2IeWzY5TEN6v9YH+zW7IUivgQkAg4c9HKCBj/Vh6nLg4HFE8MLr9Td
uCtlIngQHwFOf/eFX35pAZPnboB7GYWgVGteWF4jF8HDCwHQsH596DJpGeSx
eSbc8oo3q9ZiMDeJx/9Mtidshnje4u2qjMwGWrXmjXqJUqX4MD75Rse5Po6h
7OL/ajF6n3Tdd1HyI06LJb5RW3yD45fmFgjqqq1Uh0E4vKJvV/jN33rl1sV+
MoWsqqnHK0tczKu8b+t3ng5/L90Dk57xue1iHwS2Gy/+xw/XGrQYt6AEsPU6
Cs1btIRvG3WFUaufeMBgXIztxgiYvuE8zND1M7dFg8OWyzDd56K+5rXtxstg
T3ExBEEQBEEwCNJi/ov+ejcn538zZ87cevny5S5yufyl9Vlfh4rNqZ1rN+vC
494jch/3HFZQBgofdR5Q/OjP7vJH3QYXlfE1FSKjz8hMvuvcUA2Ha25v2bcC
PIaGDh16BHszj21FWkwuLBzXQa/FBF1+BOIXtBgAjVIKD6IOQNumDeC3XlPh
XlYhFGYng13/P6HBz20g7HoKSJT/jaeBpzrMvahTMHFgZ/jl1z/AZXUAPMxm
v1SH0b9EIYZHEYF675pO45dAHrvENBttpGa1WgzmVcpkVZXXorqL7F326foe
ZfW5UigVH928H91lwSbnEHYx65/vGjznyhWqKncfsP9Y5H19m2+IXoepZ806
DFJUzKq1aLNrUOzd690UyvJ/T5SXsvjFvM771m5r9HM+t+fAaWf8c364VqDF
6LDfFA4duneHRj1dYdrGa6/0sSkLpMUQBEEQBGGtkBbzXzAfCesmbdu2zQ5r
4BhStwNj97P6jkz3XhYGy73DrRKf5WHanP6jUnVzrWPpfV4ZKSws/NbZ2dkX
ezOPbTVaDK8oH1bYdIf69RvC9nPJIJJrXlxIq4Hi/EcwZ3QnqN+oBfifjoW4
8yHwe5MG0HGUOzzKRw+Z/xS7BrVCCg/jzsOEfh3hl5Z/wbJtByGrsBjUmpes
/2nTyIVw/+xWfVxMj2mrIL+Ib/wNNmKzVi1Gq1K9r3rw8BfxnAX+stCwGRoe
/425SaXotZh70V0XbHIJLnqqxZTWrcZ6SfPWXw3Ytvf2vLxCYR1r12EQFreg
9iwv27DbD279pVSZPhexLFrM67xvHbZff6nP7X/9cK1AiwlKBNsNx+G31q2h
7aQtUNGaUaTFEARBEARhrZAW8y/oz4v5SegTw+fzPymvT0wp6pzcupl9RmSi
5lGRa0hTgnPDOeJcLb3fKyMq3T0rh8P5Enszj201WoywmAVbZ4/Q+8Ws2vvq
2kVyUQmE71wCTRs2hNGu68Bnznho1KgpLA44/5/aSti0GhUUpt+B2eP7wM+/
/AFLtx+G3CI+aF7mJ/NMU0p4cC10hd4vZtScbcAqFhltO03RrFGLQV9xPF9I
1qxfLVm7YZUmv+B7KIfX+PNaDGoLYomyRnRCXrfZuu+foEP3XQqLxLWt1R/m
ebAut/3qiSceZCT9auh3Rbn2f5nqKL3C+9b70os+t9tiwMkv+j9+uLbbXszx
Mb8WcwtmrN8DLVr3gH5zj4FjQEKFvutIiyEIgiAIwlohLeYJeJ0rEAhqHjt2
bPD9+/ebKRSK19YEeR2kxRCowWBc1dusxciExXBi0yy9/mG7Jgw4/JfXLtKq
FZCdfAUGtP0FfvqtO/T6swE0azMAIpOyn6lLrV8SpEIuHN00B5o2+BH6TVsC
sXceQCGLBWw2+x+KijjAE0pA80ycjITPgX2rp+vrKLlvPgXFQpmJt75izeq0
GI3mXQ27qJZ0x0530YKlW1WpaU21KnW5ju1ntRj07uUL5Z9djMoa6LY6cvfe
kynT9XWrrbBe0svA74s8dk5dm2WjLmblpzfUmqHedllrWr/M+xb9VIZMcfiP
z20f5wCYsHDrf/xwe7u+6H1rdi1GXw/qxpN6UH5xL9WGSIshCIIgCKIyQFrM
EzAmJi0trcGUKVMC4+PjW1Wk/g1pMUReXl7tiRMnhmBv5rGtRotRy8Vw/8JO
aN6wAXSdsAiyWCX/qTP9T9P9UcDJBR+34fD1F5/BZ19+DcNcvCGXI/jv8loN
FOUmw9Tuv8BnNWtCq0594O9xE2DipEkw6RlsZswEr5DTej2mdP0lrCxYOK4z
NGj0KwRdSgKx4tX5TNbQrEqL0Wrf1RSXfCnbe2CayGV2iDLhdhstatXlzN8s
1WLmb3TZ9SA989djF9LGua68HHri0uMxxXzZl0zRYRD8vkjPfdR42rIx4fls
/TnU5PXoyqrFvNT7dmc8OG6NfM7n9klczLN+uC/zvjWVFlPAFdcZ7XE21WZj
tBa3p6w4+MVpyrM8rh/HwfEsfdwQBEEQBEE8i0Kh/igqPq/bnLVXA9lcSS1L
z8dSYPxCRkZGvQMHDowsLi7+3BCfmFJIiyHIu7c0nygexnT6FZq06vuSOJd/
m0omgjvnA6HjHy2h5e8dIODcbRDJVM+tUAXs3DswpXdbaPRTPWjYuAk0bdr0
BVr83hamLw+AohLhk5epFZB1/zL0adUYfu38NyRkFILqpaKQ9TSr0WJQh+Hx
PpcfPTFW5Oy+W3kturtWKqtWXh0GQS0m9m50t5krnU5sCLy8ctbqy7sux2b3
E4gUn5ojrsSYqNWq95Mf323l5DnlGOYqmWPMMmsxwcb1vjWVFlMskH29LDgm
BHUSjFspC6OWnU2f7HnhLvZDFp7I7TAjUIb9616D68dxcDxLHzcEQRAEQRDP
Ileoq1yLy+053+ua/9uqxeAzTsxPQp8YkUj0saYcHggvg7QYAo8lrIuOvZnH
thot5knNahYELbeBxo2awiL/M8AVyV9e50irAYVUCLk52ZCdkwtCqeI5z94n
61Mr5cDKy4Es3bZlvoKsrGxgcfmgUmv0r5EJuXB6x0Jo0qgxTPN4eY1sa2tW
ocXodRj+54oTp0aLnGaFKi5e7q8Viz82RIfRvZXvSGTy6ueuRY3sP8PjnpPH
2f037xZ0lEiV1Suie1sKpUqJ9bk7zPFx2PN8fW5TUfa4GON635pKi0F/ZtRH
MF4F11kWCnQUFot/wD7+XtpfA4ePO4f9a1+jWz+OwwQ/aIIgCIIg3i5kclXV
yBs5fRZ6X9+O+fqWno+5wevboqKir/z9/aclJSX9XJHcpFJIiyHQy5PL5X5h
Dk/P57AiLQZAo5LB41tnoN9fLaDtgOlw61E+qN7gs2vMhrE5eWlxMK1fG/j1
r/5wLv4xyFXWnZ+EzeJaDPrDlPC+kB8/OUavw4RfGqQRimoapsNo35EpVFXv
PSxq5bb6dOhI563RCcm5bfE5ABN1GESukFe5nhjZe+nW2f6cErZZnmGUXYsx
rvetqbSYioLPTcLDw3tib+m5EARBEARBGAJqMREx2f2X+EZtfRu1GPTojY2N
bWNjYxOAfjHGuHcmLYbg8XifBgcHT8LezGNblRaDXi0YG7PPyw1atmgJczYe
hMISse7PptdjcAxxSQEc8HGHlr/+Bu4b9gOLJ3m5Z42VNUtqMVgvScPhfi0/
eGTSEx0mYmBFdBiRRFEjJjG/i7tnRIj98j2H7Fe6HWdxWd9jrIy5t81YSOXS
ahdizgzzDFzqw+VxzJL7UvYcJeN631qrFmNBvZsgCIIgCMIoSOWqaheiMgct
2xS9kVMi/cbS8zE36BOTlZVVpzSfxBjPaUmLIdAnZtiwYYffZr+Y0lZah3r+
lEHQqfcoOH0zFWRKtcnHVSulkHrjFIzq1QmGTF0Ad9EnxowxORVpltJitBrN
e5pCVm3Zrr12IpfZu5SRV3trRYbpMOjFW8KXfXn2Svpw9OgNPnzH+czVy6Pn
+jiFsosLGe0TL5GKPz4ReXj8xj1rV5YIir80y3ujew9yi4QNRi8/k1Zev9tS
7HfElfs1+tf5xamd/G5w/l5xNsVaPHD5fP4ne/bsGYu9pedCEARBEARhCFKZ
qtq5qxlDV2yJ8eaUSN8abzu8rkUdhsPhfCmVSqvK5fKPjBUvbwwtxjUoAZz8
YsB+23Vw2B6jr4NhjOebpMWYB8x78/DwWIy9mce2Oi3mic+LFDKTYmD7lq1w
NOIWiKRyk48ql4og7uIR2LplO8QkZen1H2YoMRbQYnTnPq3ufKjOzvlRumn7
ApH7/J3KmJudtRJJdUN0GLVa+15hkfj7PceT7VCHQT2GzRV+dyvpRkdzeqyY
CpFE+Mn+87tt/Q9vms8X8j43x5gYR8TlS2stC47ZVR6/239YdiZzzIqzj7Av
92t1/L3i7IPlVuSBa0F/dIIgCIIgCKMgkSmrn4lMH7FqW6wXl/f2aDEY1/zw
4cNGixYtWoH3OxX16/3PuiuoxbgGxoOdzxkY6rQOuk9YAD1tVsNoj+Pg6H8L
XINIi2ECpTof9mYe2wq1GNDnKqlVChAKBCCSyEBjhvgUrUYDMokIBAIhKFRq
RuQmlTazajGow8jkVVTJKb+KV3iuFy/x2Ki6e78V/q28OgzqBUqV5oOMHH7D
jSHxS+atv7oT85NEEkVN9Lu9kxrfxm39jIMsbsH3Jt8uEyIQ8T8LOb5jVuip
AGehWGC2PES1RvN+ef1un/exxT6vSFgvM7+4Efblea01eeCy2eyvlyxZshx7
S8+FIAiCIAjCECRS5ccnLj0as9bvpmcxT2ruZ/gWQygU1ggJCZm4bNmypRi7
YEwPyYppMYngsPkC9Bg8Ehq0HQLtRrhCmz6jof4fQ2DkqnBwDkwE18Bb4Lgj
BlwCEwyuVUpajGnBOCvU+rA389jWqcVQK1czmxaD3jACwafK6zHdRO4LAiQb
Ni5TPU5vpEUP83LrMNp30H/sXmrR7x6bYnxXbo31Tk7jtJQrVFXxf/o60On3
fnNaY7460KaCJyz5YvsB7yWHL+y1EUtENS09n/KC+bhXr17taIE6b0YDdW70
i7GA3k0QBEEQBGEUxBJljSPhqeO9dsatLObLzJL3bmnwvgA9ezG2Ge91jFE7
6VkqpMVgDQzPEGjSrDV0dQiCaRsjYfKKUGjxRxvo7rQHZm6LAps1B6H/dE+Y
suk6uBgYJ0NajGnBY2vEiBEHyS+GmiHN5FoMxsKo1e/rvWEOHpkkdHDbK9u9
z1ZdUPi91gAvVDynCsWKmtfj87rPWXslcMuexAVZ+YL6KpXmg1KPXo1G/V5a
9oOfbVeMP1NQlPeDSbbLTBTzuV95717leebasTESmYRxdXwqQ34Pfm9nZ2f/
YOzvb4IgCIIgCHMhkihrHDr7cLJPcPyykrdAi8FcJKxtg9dwGLOAuUrGrqta
IS0m8AbYLN8E9Rp1hCEeZ8DR/wZMWbUbWvzZHnq57QObtQehw2BbaNa6L4zw
vABOgaTFWCPk3UutIs2kWow+J0lWVfUwtZnEy3e5yG1ekCLiSl8Nj/e51oBc
TfToLebJvjx9+fFI15WX94SdejCNxRF/93wuC55nswsyGkxbNiY8n83s8w6X
V/TNKv+FmyNuhg+SyaXVLD2f8pKXl1d7/Pjxu7G39FwMBc+tI0eOPMBkPYkg
CIIgiLcbkVhRE6+dN+9OWMQTyL6w9HxMTWlu0urVq+cXFxebxHOxwlrMUl+o
26gzDF1xGqatDYOOA0ZDww6TYNzai+C4/QqMX34A/uo2BEZ4hpMWY6XIZLIq
iYmJLbE389ikxVSCZjItBnOS+PzPlNeieojnLAiQrN2wSpX8oLlWKqtqkEev
Ru/RWzv0WPJMt1WRu89fyxyC3yOoz7xseYyHcfScciyPlV3P2Bq4OSkqZtVa
tNk1KObOte4KpdnzECsM5vWwWKxvmJzfY0G9myAIgiAIwigIxYpP9pxItt22
5/Z8nkBulnoQlgR9/ubPn78aa1ibysuj4lqMD9Rt1AWGepyASYu3wq/te0PD
dmNgyOJj4BRwC+x8wqFjr+EwkrQYq8WCXgakxVSCZnQtRl8nSf2+Jr/gf7K9
+6dhnSRZ2MGpGsxJwmPUAI9ezD/KzOPX37Q7YdHc9VcDYm/ndxZLFDVep7Gg
FmO7YtzZ9Ny0xsb0Szc36D08a/2MA7cfxrdVqZiXI2NBb3GjgfUPExISfsPe
0nMhCIIgCIIwBKFI8cmuo0n2fmF35vCF8s8sPR9TgfcHqL1gnAI+D8TeVM9l
jaXFDFt1Fhz9osHG8xD0GD4OmvR2g2mbroGdL2kx1g7qMD4+Pi7Ym3ls0mIq
QTOqFoM6jELxkSo17WeMgxHPWeivjIrtquELPgMD9BC935ZS/dGDx9zmK7fF
blixJcYnKY3zm0yheuM5tYCT94P9qoknH2YktVAb4EtjLaCmZLdy/OnUzJRf
1BrmbUdhYeG3zs7Ovthbei6GQt69BEEQBEEwnX+0mP133CurFoP3ByKR6GOM
hUlPT//R1F5/xtNizoFz0G1w8Y+CcS6L4X+/jYSxnqdh0qqD0KbLABi4+BDY
bosF16BE0mKsDAt6Y5IWUwma0bQY1GGk0mrK+IS2ovmLt0s8vVajT4wh9aqR
0lpJt5NZbRZ5X9/uHXTLA+tXK5/x6H0dhdz8713W2Ry+l3b7T5Vaxbh4ktJ9
kFOY+dPUpaMuYs/EXKvK4N1rQb2bIAiCIAjCKLwNWgw+f33w4EFjGxubgOjo
6L+whpJJxzOCFlOnQXvov+AA2G65DnY+Z2HIFEeo03osDHNdB20GTIH6zVpD
895TobfrLnDwu0lajJWB9wcbN250orgYaoY0o2gxqMOIxDWUV6N6iFznhEj9
Amepc/PqGJKThKDmgHX3ohLyus32vBLkv/+uex5LVEet1pY5LoTFLajtvsEu
LPFBXDulSmnS87CpwDiYh5nJzWeumngS43wsPR9DEAgENY8ePToEe0vPxVAq
g55EEARBEMTbzdugxWAczL17935Bz17MkTf1c8yKazEboFbtRtCw49/Qefwi
6DLaCX5u0xPaT90MtpsiwXZjBEzfcB5m6Hr77RQXY41YMH7+g6ysrA5du3bN
jIqK0uI9fWVEt40Wn4MpwfdO9x6m6razjkHHge4cpxGKaiouRgwQObnv1nvD
FBV9a0idJORpzepPLkVnDXBddTl036mUaWyupNarPHpfBbu4sPYcb/s98Sk3
2jNVi8F5J6bEtZu9YeY+NreQkXWI8PkEnp+YnCdmQb2bIAiCIAjCKFR2LQb9
IbF2klgsro69OfwijREX88NPf0HXGWug19Sl0H2yBwyZGwq2W6IN0l1IizE/
FvSVfIfNZn8/derUXXgvj7EVlZHu3bs/tvQcTAm+d7r3MAS9xst9DKAOIxLV
VIRfGiB0dNsjP3p8rKa45EtDvGEQrVb7Ln43nL2aPgx1mOMXH/1dzJd9WV4d
BkEtZq6PA6O1GLlCXuV6wuU+y7bN8eOUsGtZej6GgPEwR44cGcrUuBi9Z5FC
8WFJSclnTNaTCIIgCIJ4u6nMWgxer2EczK5duybg82VzXbMZxS+mYWcY6nES
7LZeB/ttUfr6ScbSYUiLMT2WrLeqO87fx3t4POYzMzPrVkZ022bxOZh4++rg
e1juc9bTvCTFpch+Qif33fLjJ8doeLzPdX83SIfR6F5Xwpd9gfoL6jCox+D3
hNbA9f2jxSTf6MBULUYqk1Q/H3Vy5PpgD69iPqf8WpkVwPT8Hox1zc7O/gHn
T969BEEQBEEwlWfqKM2ubFoMPjdDf5hp06b54/2NuWqoVkyLuQnTVmyHpn8O
g1GeF/TevcbSX0iLMR+5ubnfjxo1aj/2lp6LsUBtE+97kLLm+eFyeN+EmgIT
PU4ZBeowEkl1ZeTV3iJn993yI8fHVUSH0T7RYb48fD51otuqy7sxPwnzlCry
PrKLC7+b6+sQeis5tqNSZVrfLlMhlopqHrm0b+q2AxuW8oQljMyPwfpJrq6u
3kyto8Tn8z/x8/ObHhAQYIM/W3o+BEEQBEEQhoDX1qHHk+2277s9ly+Uf27p
+RgT1GLQJ+bcuXO9sY6Sue4FK6TFBCWCS0AszPCNAKeAeHAlLYaRoP6Az2xN
XbPL3NuUlpbW4OHDh43K6n+NdeSTk5OboiZFz69NCOowMllVZcyNznod5uCR
SZqSki8rpMMIZF8cDU8djzrMlRs5fUQSRY2KnkNZ3MLas71n7mOyd69AzP90
96kAl5CTfq66nxn5/AI/ixgzytTPJOov/v7+04KDgycxNc+KIAiCIAgCtZh9
J1NmbN2TuIAnqDxaDD6H5/F4n6JfB2KumBj92Ll5dXL6j0r1WR6mRc3DKPhc
gOW+lzT63gjrw7nhHHGuln6vKiMW9O41CaX5fh4eHovx/ge9l162jEKlrsrl
S2sVcEV18zmiusmPclss8li31i8kzOFRNrsp/q2iFHDFdYoFsq/VmrLX76nU
oA6jUHykun33T5H7/J2y0H0zNFzu1xXwh3kHYySPX3w0FnWYyBs5fcVG0GEQ
Frfge7f10w/eS0tkbE1rjIXZdsB7yeELe21EEhEjdQA8L7FYrG+Yen7C7/fi
4uLPyS+GIAiCIAgmIxIraoadSpm2eXfiIp5Axsh46+fBewaMvfby8pqF94/m
Hl/D4X4tcJsXgloHxp4YhX6jMtJHTEnG/o3L9hqWndGud0nG712kmd0GFWT2
Hp71/DI4N5wjztXS71dlBL0+Fi5cuNIg71UrBD9TeXl5tZcsWbI8JSWlycvu
4VRqzUcpObxOc3dcPzlq+ZlHI5aeyRy66GROd6c9/N6z9nOHLT6VjX+rKKM9
zqYuC44JQT3G0vvFGtCqVB+oHjxsLp6/ZJt0m98cDYv9XUXqJQlE8k/PX80Y
6r4mMiQiJru/MeJhSink5P/Pac2UYynp935Tq5mpA6BHzLrg5RvOR50cgd4x
lp6PIeBnefLkyUHYW3ouhlBaB4qpWhJBEARBEASiu86ueeDMwykbQ+KXlFQi
LQb9YUaOHHkgIyOjnrl9KrS660TUODDmBHOAjEJuXl11XsEP+v4Ny6oepjaT
bNy6SDBuyjn54WPjVQ/TflZn59R7bn11cI5aeqZoEpjujfkspT4xGF+G2ibm
Kr3sM6VQaapFp7DGDl18Kn/qxmiYuf2mSbDZGK1FPQbjYyy9bywNfn7VWdk/
iT1We0nWbliFn+2K6TCKT89eSR8+a/XlXZE3svsaU4dBCoryfrBbOf5MWtaD
X9QaZp57ikpYtRZvnbUz+vaVnnKlvIql52MITD8/oca9aNGiFZVF6yYIgiAI
4u1EJFHWOHTu4WSf4Phl6NNo6fkYC8wnDwsLG41xzG+bZyjei+GzcVnQLkeR
y+wQRURkX41A8Kmh3hFE+cHjb+/evX9XBl9J9IZJTU1tePfu3ebo//LK5VSa
6teTCicMWniqCDUTU/gcIbhujI/BfCVL7xuLov+cs76Tbtq2QLzEY6PqcXpj
Q7VVPEdijOSFqMxBWC/p3NWMoULd78Y8d+pjq9g59aYuHXUxqyCjAVPPy5hn
5bp++qG7qYmtmZpnJRaLq1+6dKkb9paeiyEwXUsiCIIgCIJAxBJlDfRn3BAY
t6K4EmgxeH2P94t4jYl+vW9rLrlej+Fwv5YfOjJR5Oi2R37s5BgNh/ONVq15
K/eHuSmNoa8Mxx/qmevWrZsdGBg45XU+maTFmBHdeU5TwvtCtnf/dNGseYGq
u/daaQ30icZzJn4PRMRm90N/mFMRj0c/rVttVK0EPbvSc9OaTPf4+3w+O7eO
xfehgfsqj51TF7cBt8WcPmTGhOl+Vqhx79mzZ2xl0LoJgiAIgnh7kUiVH5+4
9GjMWr+ba4p50q8sPZ+KIpPJqty4caN1ZGRkZ4lEUs3S87EoqMfw+Z8pLl3u
L5q7yE/qF+imzsyqjz6fwNBn0kwBdcDS+l2mGkOrhXfUGu0HCpW6ulyp/thU
5BWy6nisWLn09p07LV5XF4q0GDOBOoxIXEN+5vxQkeOsUOX16O5YQ8mQzzRq
C7rvgOpX43J7uq2+vPvYhbRx6OGuNUEMHfrDJD2628p57dSj6Btj8f1oAHo9
KSet6QyPsedQT2JqbA/62qMHN/aWnoshlHr3VgatmyAIgiCItxeJTFX9TGT6
iFXbYr24JVLG517js76VK1cuxGdmprwPZgxYY0Uiqa5KvNNavHSlj3jR8s1Y
9xafqevzGXT38xafYyXEHDH0qMMU8qSNo1PYEy/fLZhhKiLv5k2NT8rsIZHK
XlsXnrQYM1Bauzo6tovQaVao/NTZERqhqKahOoxUpqoWnZDXddbqyF0Hzz6c
gnmqptBhEKVS8dGt+7Gd5vk6hrKLC7+z+L40AJVK+cGdh/FtsBYU5ipZej6G
wvQcH4x7vXz5chem5lgRBEEQBEEgeC0efi1j8PLN0b6cEuk3lp5PRcEal/7+
/tPQ34Kp8ddGB+/flMoP0b9XujPESTjTJUzqH+SmSn30s0Yo/ESr0ectkSZj
RPLz87+bPn26H/amGgO1j5gH7HGT1118OGjhSc5AEzF0yem8JYHRe4sFstee
H0iLMT2Yh6S6n/SbyH1+gGz3XjtNccmXhuowMt25/8btgs7unldC9p1MmcHl
Sb/WmNBTSiaXVou4GT5ohd+CrRxe0beW3peGIFfIq0QlRvZctm2OH6eEzcht
QNDzFmuiMdX7lulaEkEQBEEQBCKTq6peis7qv9g3amtRsYSx15YIxo9jLAzG
Xb+q1svbjN5Dhsf/XBkX31680nOdyMF1r2z3PltV2qOm+jgZheJDyl0yDqgD
4n2OKfVAuVLz8ZV7BTaow1hD3SLSYkwLxrGpMjIbiJet8pb4blmkLiysbUjN
JL0OI1dVu3mnoONszyvBoceTZ3JKJN9oNKb19hZLRTWORRyYtGnf2hUlgmJG
epNhDesLMWeGbQlbv5yp24A8WxOaid+TWIt70qRJwUytyU0QBEEQBIHIFeoq
V27m9F6w4ZpfUbGklqXnYyh4PYkazNGjR4e8zl/0redpjIyGxa6liLzaS7x8
9QahreNB6eZtC5QxNzpp8vJ/QL0G8yD08TIMvE63BsypxWDsijVoH6TFmA7U
XNQFhd9LvDctQS1GlZFZ35CaSU91mKpxdws6zPG8ErT7aJI9avCm1mEQgYj/
WciJHW67Tvq7CMR8RvqUiCTCT/af22W38+iWuXwR73NLz8dQSv1WsEY9Ez1X
8LzKYrG+odhXgiAIgiCYjFyh/igqPrfb7LVXgthcCSNz+BG8x8jIyKg3fPjw
Q9nZ2T8w8VmfWUFNRi6vomEX1VLevNVeunXHXKGd036R06zd0i075iouRAxQ
pab9rNHd/2m4xV9pBYJPtWLxx3qNRqH8UIvPU/EaHp/L477GXgfWadKq1O9r
laoPMM4Gx9BKZdXQs0YrEtXQYk4UX7cu/JmhNUjKgjlylEiLeUu0GK32XfwM
ykL22ItmL/BXJaW00H3+yl0z6R8d5l5h+zm6833IkfuORVzz6DAIxpH47lmz
6kTkofFiqZiRXl48YckX2w/6LDoYHjpdJBEyVvPH5xVYFw3zeZlYiwg1mKKi
oq9IiyEIgiAIgskolOoPb94t6Oi66nIoiyNmbLwv3mcUFhZ+O3fuXE+MW2aw
FvOuVq3+WMPh/qDOzaurzsk1NfXU6RkNVfeTW6IfqGzv/mno7ysYM/ECv1vf
+4KR4yKwZq50w8ZlmM8kP312uOJaVA9lwu02quQHLdRpj5qqH6c30vVN1A8e
/qL726+qO/f+UMbFt8PlFOcvDpIfPzVaFnZwqjQwxEm6Zft8iZfvct3PzqqH
aT+bYfssQlbsjXaDu3SNzMnKqmOqY4W0mLdAi8GaSQLhJ/Ljp0eLnN13K2Nv
dkJ9s7zxang+lMtVVePvF7abs+5KYPDh+05srqSWuXQYpKiEXWvJNveAawkR
feQKWRWL71sD4PI4X68JXOITHnN6mFQuZWydPqFQWGPXrl0TtmzZYs/EWkoF
BQW1HB0dN2Fv6bkQBEEQBEEYilKl+SAxmdXGftnFA4VFYkbWhcD7DPSKUSgU
H2LMNcOflVXTcLjDRO7zEwQjx2UKRow1H8P/zuYPHF7I7zmAz+vUU877q4uG
16G7kte1j1j3Nx6/72AOf8AwFn/QiALBkFG5gqGjcwTDxmTj6/T9sDE5+r/h
/waPzMPl9OvrP5TN7zeEw+8ziMvvNbAE16/7uVj/GnNunxnJHzg860jXnrcF
ubk/mOpYIS2mkmsxT2ugKS5f6SNymhWKuibGphmqwyQksf6au+7qzqBD95zZ
XPF35tRhcA75Rbl1HFZPOpGSfr+lWq1m5DmazS2sPcfHfu+tpNiOSqXiQ0vP
x1DwOxJj9jCG9HV16q0V8u4lCIIgCKIyoFJr3r+fxmk5fVH4sQK2iJHXNZjv
jhoM5iihHmPp+VSQ6urcvAmCkeOKlHHxoM7JJZiHVnbzliRz8MjHipzcuqY6
ViqTFuMalAjO/rHgsC0KHP1u6n9/q7WYpzmEqhtxHUQus0Pkh4+N1/D5nxmi
w8iexMPodZjAg/dcWBzz6jAInqMfZiS1sF898WQ+O7cuE+MWcc65rOwfbVeM
Pfs4J7WphsE5lrgtqMGgZwwT/WIwrufkyZMDsLf0XAiCIAiCIAxFrdHqrpGL
m02ee+5MPktksmf4pgRrJx04cGDkqlWrFmBtCEvPp4JU193LTxCMGFuE9/XU
GNk0JdnZ4p19B6Tr+rpgomOFWVpMIrjsvAm2vhfBYcdTrUWHi38MzPC5CHYb
L8Co2Zugz7SVMNAtAGZsiX6lHlPptRjUYRTKD1V377cSz1ngLwsJtddwuF9D
OfWTUh3m1r3CdnPXXdHHw1hCh9EfqwpZFcxNwhwlzFWy+D42ALVa9X7S47ut
HNdMPl5QlMd4TzJ8frF+/Xp37C09l/KCcT2VIAaWIAiCIIi3HI1W+256Dq/h
uFlnLuYVCutaej6GgPnumzdvdggLCxuNuoyl51NBSIthftPkZGaKh3Tpmq7r
TfaZYpQWExQPdhsOwZ+d+kAPl73g4HcLXHfGwuRF3tD49/7QffI8+HPYXBjk
5AOdBo6FXrP265d567SYJ3XOPlClPGguXrhsq3TztvkaA2pXP6PDtP/XH8Yy
OgyCPrcHwkOnb93vtRT9by2+nw1AppBVvXLrYv/l2+fu4JSwv7X0fCoK5icN
GzbsMBPzfNBvGJ+/MNF3mCAIgiAIohQtwDs5BcJ6f7ueisjOF/zExGd9pfU5
8bqMyXHjTyEthvlNw8rKEs/t2Ttd19cFEx0rjNJighPBYXM4dB84FJoNmA/T
N18Hx22Xof/YyVC/83T4e+kemLTuAszwPgMDxttBV/tgsN/x8m162Xx05613
lQpVdVUR5zszeV4bRm5eHYxxeVU9aqyPpHqY+rN4icdG9LjG1+hry5fjuPi3
XlIB1ksKDD5iWR0GKRFwv/LevWrNicuHJkikYkbmlTzRk3bP2HHQZzFT9aRn
we9MfIaBvaXnUl7IL4YgCIIgiMpCHktYZ4L7mfDH2SWNLXm9bgilOoxYLK5e
CXQYhLQY5jeNIidXnDVsdDr5xfyLi38UjHVdAvV+Gwxj1pyDGV7H4I8OnaHd
1G1gtzUanLZfhwlLd0K7QXYwetV5cA5MKPN8lGpN1ayHOf3y7GaFZ/Ub+Tiz
z4hMayNLR96A0cnCWfNC9DlHz+4/Lbyj12FSHzUVL1vpLfHcsFKVlfPTqzSb
V/FUh6kWd7egw+y1V4KCj9x3NHe9pJfNqZCT/z/3DXZhCck32ytVSkZ6emFN
7k371nkcvRQ2WSwVMVJPehb0VktLS2vARI81Fov1jbu7+3rsLT0XgiAIgiCI
ipDPFv0wdf75Uw/Suc3RP8bS8ykP6A+zZs2aeRcuXOghlUqrWno+RoC0GOY3
jTwnV5w2dFS6nLSYf3ANiocZ6/ZDi9YdoetMf/h7zlr4qUUfGO5xBhy2X4dx
C7ZA+2HOMGzRIXDwj9MtX/b5yJXqj5NvpMxI6zmc5b0sDJZ7h1sdK30vqIK9
jmSjHoPxMf/suyd5SR+qHqY1Ey9b5S1Zvc5TlZHZQFvOWkOlOszNuwUd53he
CQo5kuRgaR0GwZpJKRn3Wzisnnw8h5X1IxNjL5GiElatRZvdAqNuX+kpV8oZ
WZP7WfLy8mpPnjw5CHtLz6W8oE8MfveTXwxBEARBEEwH6yfZLr5w5N7Dot+x
rpKl51NW9HUtcnO/nzp16s6EhITfKsl1GWkxzG96v5iRXbtZrV+MKeoWvbmO
UiI4brkEfUaOg8Y9ZkLXIWOgSe9ZMNX7EkxZ7g9/9J4CA2YFwRSvC7oxY8vl
3StXqmskxSTPTO0+lIu6h6l0qYowe9cd5ZaAyPScfiPT1KUand6nV/GRKim5
hXixxyaJp9dqVUZmQ205z2V4LpTKVNVu3CnoNNvzStDuo0n2RVzJt5bWYRCp
XFI9PPr0iJUBCzdzeUWMjGN4WkOp3syVE06nZT34Ra1hXu2h58nUnZu6du0a
kWnCc5SpwO/6wsLCbyvJdz5BEARBEG8xhUXi2o4eEWEJSay/lCoNY+KV8fpY
IpFUS0xMbIk5Skx93vocpMUwvz3x7u1qSe9e89ctQi3mWlLhxEELT76yprVr
QAxMnLcW/te4IzRs8Tt0nhkEM3wvwZApDtCozQBo2XMCtB5sD33ddoGDX9n9
YhipxaAOI5FWV8Yn/CWau8hPsmHTUlW2Pi/JMB3mdkHn2Z6RwaHHkmYWFVuH
DoOgt8q2A95Lws6GzBRKhIz0WlWpVR/cTU1s7bLW5nBlqKGE4HOMsWPH7sHe
0nMxZO6jR48OY+LcCYIgCIIgngXrnLqtjtx1405+Z4VS/ZGl51NWSr1iMDep
MlwbP4W0GOY3jTg7RxwxcGi6rq8LJjpWXqvFWKBukVyp+vhSQtb0gQtOvDpO
JygBbL2OQvMWLeHbRl1h1Orz4LwzHhy3RsJ0n4t6XcZ242Wwr+xxMdk5P2p4
/M8VlyL7iVxmh0j9A93Uefk/GOIPI5Upq8Um5nd2XxMZHHo82c6adBicH2oX
s71n7rt1P6aTUqkwyvcLejUrVJpqMoW6pjngicTfno06O25lwLIdBRz2jxqt
PpeX0d85GFNSUFBQi4mxJeTdSxAEQRBEZQE9Beauuxpw/VZuD7lCzYg8eLzG
xzx39IrJz8//jrQYalbUnnj3DrWkd69p6xa9DIlM8cnhS3fm9Jt7rOR1OVP2
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
e9HPP/+c9ttvv/Hc3d2fN2zY8Erfvn23T5s2bdamTZsGU22bsLCw8uQnwufz
HVQvowdLOve0WxZDsSXJLx7Bv1drlC1TBo3adMXYiVMwZaI/urdrggrlK6D9
wCl4liCAwWiCkdk+MeIuhnduDDdXN3i16oTh3t7o060dKpV1R42GHXH0djhU
WgMMGjmCT29AJTdHlHSrhoHefli+4yREEqlFY+o1CoRc2o3G1cuhtKM72nTr
Cz9/fwzu2wMNvZqifdOaKOXoikWv6ndbub3FYvDqPCFmR+u5xEI+9PyczlFi
lzKZ7Gtrx5SRl/akSZPmveWp/aomkkmh+NrIFxTXP4uopN5zYKB87KTN8lF+
geqdu4fpI6PKGaXS74jTFOZYGBLldIqk6h8Pn4vs4z/vyo6bD3lNVGr9V9b8
nInj0XyZYu7ovm8LxcTEON4Out2w+fCmvP5Ldlnoa3s+19v6bDivnrr18OM2
I5u/uPfwTj1bHc/79OLlC9dTl4537j+h67mb9641io6JdrL1mPT50edYkFz2
XRUWFkPf9UFBQdUL+jufEydOnDhxyoc4FlMEmi1YjESm+X7D3pDx24+E+Ujl
2gKvbUlzRlrHb9So0WXiGBRz8tNPPwk+++wzLb06OTlFT548eS7xmoLcT5pv
0Ry7fv36N/7973/ricVkJ2I1//nPf3Rffvml8ttvv5XQcfz666/JdCx0nFOm
TFn27OKlucKO3YR5ZjFGDXgRl9GuQT3UbzsM4Tw+y2IUYgECF3jD09MLa46+
HQ+ikAiwe6EPc055YvWRB8zvdDDpVUgIOoqmXl7o5LMQyQKJeQQYdGokPH+M
tfMnoWPrpqhVozpq1KqDFm07Y9rCDQiJSoRG/yqPyGSCXqtC9JM7WDTVFy0b
N4BHNQ/Uqd8Q/UdOxJlboZAqtcxmJkYGiJKjsGT8INT2qILaDZrCf0kg0iVy
i8Y0mYxs/M61Y9swoGsb1PSohpp16qNbP29s2XsCW+aOQsOGjbDu+CPIPgCL
oXOE1nJ79Oixh+a7H5rFEIc5c+ZMS+KZ2fpzmvmJWvMF+eZSXSOTRPqdUSL5
nmQibiJXfG1Sqb4kv12TRvs5eb7olcqvBDxeSb2UtpV+bxSk/2zkJZXSB4fU
1Bw41E8xc84y2aDhRxSz5i2hWtX6uHgno0z+TVFgMObPlu6dxy+96DFm7pXA
a/cSWhDLtvZnTHPlgQMH7mDuE1F077eR4jwbN+B5dqtpaOPTkmo3516+HXK9
bfvRbU0dRrfWeHWrqfNs1CDRhseTozw9PePq1K2dUrFqBVW9+vVoP+JsPGYM
8/k9Zj7HrfR5FvS5a1ZhyFGi5wFiMLbgyZw4ceLEidMHFMdiikCzBYuRK7Tf
UHz9iu0Pp4sk6h+t1W9eRXMZel4dMGBAwFdffaV4l2tQrMmOHTv6UP5HQe8r
7WevXr0CibHkxGKyYjNffPGF2tHRMWbEiBFr796920geGTUsP3ExGexDiaTE
RCQmpUH7ik8YDQbIRHwkMj8Xy9UwGt9UF8rydyYjdGo5eMzPkvki6JltMo9B
8S4yiRDJSYmIi4tjFA9eUgpEEhnrw2t6Z58Meh0konR2v2j7eOb40gRCqLV6
lsO82pDpVw+JkNmX+Hh2G75ICgPTn6VjEo/RqORIS01GPG3L9JecyodcqWKO
VcAcFw8Sxdt/Byu1LFkMMRizd+6HZjHk5UIxWBRPxvq6ZHjnfkZsxSgU/US1
o/WxcS66kNAa2svXWmoOH+tFsSvqzVtHq9ZvHqfauMVfvXWHj3rfof7asxc6
0ja6m7cb627fbai8frNp/LGTXRQHDvdVbQzwU/w9b6l8mM8B4i/KOQsXUV/6
8IjKRr7gF5bjGO3PFzyvos9RKtd8d+pqdNcxc68GXrod11au1H1ti8+X4imI
w9y6dctE93+bKS4WCcnMdZWaAF6aJUq0bHumfxqHxrPp8diXZMznd4z5HB/S
51nQ569ZhcG7lzjMtWvXPK9cudKQ2HJB7w8nTpw4ceKUR3Espgi0WBuwGJVa
/+W5GzF//r369gryn7RWv/kRcRbiLcRd3mUYZcuWDX/69GmFgo71pnkXxeZM
nDhx/jfffCPNLYeh+J4SJUokUf47xSuQ169Wq/2emb/3zY9fDNcKvGXJYsgX
KCoqytXafi25Ec1jbt24Uf/u5cuNlbyk3w3xCY66u/c81fsODlAuXj5bPso/
UNprwFnZYO/D8glTNyoXLJmnWr1+knrT1jHqgB2j1Fu2+7JMZtnq6cz2sxST
Z6yV+03YJh8zfvvzISP2da5a7WnU1BkraHvN8ZPddQ8f1WWO3dGYLixmUij/
V1RiYDKLPlOZXPvtuesxf1I8zPkbMR1lCu23tuJsdK9/dc/P6dzjmn03CfP5
7WY+xxBrfnfnV/mqS/+BRPXo1q1bN7wg69Fx4sSJEydOVhDHYopAswWL0eoM
n98NTvLym3d1Z6pAYRexysRZnj17Vo58cf/1r38ZzRzjv//9r6pnz567qb7l
h4wxMNevpnU5ejakeBjKT3r8+HHVcePGLaK8o/cxGMpjKlasGL9x48aX6LmS
PsNMHsT59u7lWoG3LP1izOcOcTs6f2x+3mbkHP3HJJN/o09J/U0e9KiOdPe+
QYo5CxfJBo84LPcevVe5aNkc4jG6W3cb6l9GuxuTkn83pvGLE0MxisU/mCTS
jNwk6atcJZHoRzaOhs9sk5pWghT3ONjjz7btTsQ/fVqJcppMSuVXJuY4ixp7
ySz67CiO8MKtuHbEYU5fje5M8TG2/Ew5FlMkml2yGPqepftSQa9r5CRalzl9
+nQr8snn/GI4ceLEiVMhFsdiikCzBYsxGIz/fvZCUGXQ5HMnktLkpazVb35k
zlMaNGjQ5sx5Sj/++GP6mjVrvCl33Fbj0nMpMRIaIz09/UeKW6E8k/v379c8
fPjwn1SjeOzYsYvJA6RFixZnye8lpxwlYknk41ujRo0HixcvHkt1sGkd8p3c
d47FFP6WJYsh0Xxn6dKlfuTXbJP5hLlmkULxP2Nq2q/6kCfV1bv2DhWPnbQ5
vEW7B5Jps1Zq9h/up3scUotqGhFXYT1gtNrP81rHiI7jwYMHNT6W+RHdG8gP
5srd+FZj5l7ZeeLyy+7kF2NrtsaxmCLR7JLFUJzJkSNHOtpzvAl9H9P+0X2m
MNUm48SJEydOnN4Rx2KKQLMFi6HnmziexLm3/6mLcUlSZ3t53qEYgsDAwF6/
/PJLqjk/ibxuiYlYo+4DHSfljZjrDhP7obx5yn86f/58M4pdmTlz5gziQW3a
tDlJOUU+Pj6rzLWqaZ0uMjLS7ebNm/XI98VcSylzPhXVU6KcKqo38+jRo2oU
U5PNGiTHYgp/y5bFENfbuXNn79mzZ08lvod8nrtmmagmukr1Jfnm6iOeV9Ac
PNJHMWXmGop/oXyj6E1bRvWoXScoISSkGtU2ongZa8Wt0HlMx2LPa+pW+zsz
fzOqj3TzIa8pxQ8eOR/VWyzV/Eh1lGw9NsdiikSzSxZTGPxiaF0kODi4Cr0W
9L5w4sSJEydO+RDHYopAswWLISWlyksNnHTuZPjL9MoGo9Eu5lYUNxIeHl62
cuXKIeZa0W3btj3B4/F+s4QXmWNdaF2N1tcEAsFPVDfi5cuXzrdu3fpj3759
3ZYsWeI/evTo5V26dDnQunXrU/37999qrj1NdWhCQ0MrUe1pqt9L3IbiWojj
0D6+W0uJGAzlUjk4OMRSjQqqv01jEj/KYb85FlP4W7YsxlyXmGqYk38M8nhN
sKIYGI3mC6NI9JM+OsZNc/psZ2VG/tERxcw5yzXHTvbQR70oS/lGiS9euPb6
66/ddM3ka8wsRLE+FKNW0PXMbC26ZtUa/X/vhSR7+s+/un3f6YhBQon6pw/B
YUgciykSzS5ZDH2fUYznW3Xp7UzEiWgdxJ55ESdOnDhx4pQLcSymCDRbsZhU
geI339mX9wQ9Samn0xs+uMdoduLz+cWGDh26geJLKM9n3rx5k9h6MNlsT2yE
GAmxEpoj0jMm1a0ICQmpTDnnVE9mypQpc/r27bu9VatWp7t167ZvzJgxy5g2
5sCBA13u3r1bm+ppU14S8RNiN7QeR3Pp7DgKzbF79+69k/KUyJeX6nB37tz5
YCZf3s9ywY44FlP4W7Yshj5/OjeJw9A5ncknKHfXAlv/SPcZ1Y6mvnVXr7dU
Lls1QzZ05EHFhCkb1Xv2D9KHPatq5AuKs74txFOZ9xD/o2vAGnFk76owrKnn
V6z3slb/xaOw1DrjF14LCDwWNoL8zY0fiMOQOBZTJJpdshi6L1Bsmy3uD9YS
3V/MdegKel84ceLEiROnfIhjMUWg2YrF8IXK4pOX3th49V5CS2buYTf+D5Sn
tHv37p7FixdPKVWqVDzVtTSzDXp+pN8Tm6H5La39U84Q1b/ctWvXX/Pnz5/o
7e29pmPHjkconoZiVGbNmjVt69at/S9evNiEvIHp+Y5YCuUOUa4SeaxamqNF
76VcJldX16gmTZpc3LZtWz/iPxbOtzkWU/hbtizGLOJ7dK5QXtt742OIv+h0
nxmlsm/JW1d370F91YbN/nKfMbvlo8ftUG3Z7qt7+Lgu1aU2yeXfmAyGf7+b
f0TXiDkmK8ex8iCaw1E8mTVzruxJJuY7U6czfPbkOb/6pCXXN205EOqXlq78
1fiBa3NzLKZINLtlMeSDb88shr7vaX2kIOrQceLEiRMnTlYUx2KKQLMVi0kX
q36et/7u4pNXXnZTqnVfWbPv/Micp+Th4fGwXr16Nylv3OylGxQUVJ1iT1av
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
uX2fNURzOorx2bVr1190PJ07dz741VdfKf7v//4PxGNq1ap1j+5ZtozVeZ80
WsMXN4N4TUfNvrznwZOUejqdwa5jAmzKYl55f3cavRzxmXJtWe/voZm9v/Uw
6ZSIubUL5V1dUbfHJPa6h8loYb6t0oLcZGXW38sWj8k82yQ8wV9UV86lOg7c
jYRK/yp3yagHL+ohuv3hit9Klv7oWExhqUtPrJfuh8Ri7CnPkRMnTpw4ccqd
TJ8YdJrPHt27+QfTeM9exGRZa9Zk1CH++XU0q+AIR7cGuPw8Efy0JMwbmhH7
strMWzK2hig1HlP+qg8nJ5fXLCbXa+lC0ZscpSrvrtNn5CgJBQII0sXQ69Xg
RV5D4/LOcKrSCleDI9g1MGaekSHm3yKhkK3PK5WTZ5/xNf9wdHTElE0XIJJr
Xx9n5jyiut0nvjWXtITF5LbvrHKULD0ec6Pn8fr16yeQRwP5w1irbrRApPpl
5srbqy7ciu2g0ui/LPhz9qOTbVnMK6/sfYtHwd3FCe2HzcbjVzWt2bXkW6fR
uUEluFesi8ArTyGVSfH00k40b1gfPX3n41H4S+ZaJB9u5npOjMbpgJlMP67o
NGY5UtKlrBfDuY2T2Liarn4rEBGdCDHlF2ZTY4V8NDUqOQQCPtLS0hAZFgzv
dh5wdHLHupNBiEtKA58veN0HXZ/H2evTBcPm732L9WQ317R0DHOjv9OeeUPY
v93Y1Sffym98TzPqExIVvA5d43lBD2uRZxPlD1J8yLlz55rv2bOnx9q1a0fM
nj17Kvk1kX9T+/btjxGv6dChw1HybRg1atTKefPmTdqwYcNQ4jUXL15s8ujR
o2rEayg+n+JrKN6FeA0xF5qfENfIzGtom+HDh6+7devWHwWRe0A8hmrbr1u3
bniJEiWSPvnkExOxGNKXX36ppPpslGNZED6cFP9CcTBUv3r38fChlI9pr7lJ
ZtmaxTgx1+ykjedy9v5m7i1ZshjKNbYk35a53nKdm2zMJvfR0jHT+EgMv4B6
bk5w9miPx7GZxqTnmLQETOvjydwXnD86FlOYcn/ofkd52PRa0PvCiRMnTpw4
WSST4ZP05IhfR3VuuNfJyVEVcPoORArt61rWbGP99BR4dvcwaruWhmu1trjH
PCcJ2TpC7Vg/mTm73viDstwm4i661HFByd8dM1iMSmfBWnr6q/WxV+v0F0Ig
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
qrinWLs/DMMwDFMIrO7d+1SLOUBVHR3IqV73PLWYsmUcqHKrIUYtBjoI6hUl
xkXStXPHadncqdT1t5ZUrVJ5cnR0oga/9KQzd56QSq0rhBYTTZO61TNqMV5+
j0mRQ4sxxsUY52v/MuU1zueUGQqSxITRkU0eVK7kV+T6QxcKiEyg7Pa8xvPx
3WT0o2nQfWqe71NBmrm1GPhfwrt32EzfHecQ66/ScGyMZWAtxvZbobUYYd8X
OT5Yb8yaNWsSfBFsLY9AAGsn5CxduHChHjQZc+ox8LY6fPZxl4mLLqyLSZB/
bWva1YswqxZj455vOduLtJjcG+YYmRRy/QS1/K48Varbhs7di6YsE3jtZ2ui
0GIwFs+dO9cQ9axtKb5EKpV+sG7duv4A/7Z2fxiGYRimEFhdizHmKIX4UcPy
juRYrRVdfxL77xwl5PQcWGKYhzlQvW6TKVqS+lSL0ahJo9WSOsswV5OmUkJs
NPlfPk3j+7am0l87Uq+pniRJlRdYi0lLjKWZbk3IyakcrT1xn+QqIcfoqf4T
GxlK/v53KVWuzHUuqNepKTLkPP1UsQyVKVeffEMM87dsaUo6VToFHV9tjItp
+gdqVUgL/F7nbObWYlAXVq7IKr77aLDb1GWXVmFtg31nc7wW8y9Yi7H9Vmgt
Buui0NBQx6FDh66YM2fOhBYtWhyLjIwsbau6Anxkzpw502TAgAFrw8LCyphL
UzK8P8Wi49O/Gb/wvOcRv9BOGUq1zeRd5BdzajG27vmWsxVci9GTTpNFUQ9v
0xS3NlTetQqNXbaXJIhxNW0hJatrMbjHQMeAHoN/29K9BbGCqNeGeB7039r9
YRiGYZhCYH0txjCPS4p5SP2bVzPM4yrTpjOBJM82j1OkxtP2Wf0Mz3ekvh5b
DfO4dMNcLZHu3rlBweHxlKXRPnuqnjRKKQWc3kiVnJyoXteJFJWQ+vc8Dl65
A+Y93cN7XktPSaDVY9ob/WJm78hW50ivpeS4YBrZ8Wf6rnZj2nrqFqUqsv4T
H6PNUtD9q/updtmvqey3relaGPxv/nmKOiONLmyfafSL6Th2DSWkyAv9ngvN
3FoMgG9MRKzMcdzC8xtRUwleDIbTtZl5m43CWoztt0JpMVgTIY4kICCgypo1
awbCtxc1iGx5/xfnhHwInAfuVebag89Uqt89eu5J+3EL/toYFSf7xh51Y3Nq
Mbbu+ZazFUiL0T+Nhwm/f52mDmxPFStWpu6jF1FwVBJpTFtDCc2qWgzGY1JS
UonVq1cPgueKpV+/qH0Xcjehw9hqrCDDMAzz0iMCLSbDuA+2e+EwcnZyoDYD
ZtKdZ/HNKUkJ5H/pGLWrX5mcK9Wl7X5BJEuXUdDZbfRzo3rUZfhcuv0glJKS
Ed+cSgnRT+jYpumG45Sl30cupfhkGankqXRy/QRjXE2HUcso+En03zUdcmuY
9x02zvucaMDcXdm0Gz3JU+Npw9Q+5Fj6f1SrWVfaffwChUXGkESSSIY1htE3
JvDqWRrbuxWVKl2Gfh+2kKKTpP/KucK57pzTz6gNua/0oZR0ZZHedzRLaDEg
U6V55+SFsLajZvttCwlLqajV6l4z5+sxrMXYQSuwFoM1BjQLrJOwzoA/DLx6
UecEfg62WO9EAP0WzgPnaGrvGMTEIG5v4uIL6w+dedwVuUrWPmdzYNYcJRv3
fMvZ8qvFYF9FrZRT8C1fGtalBVWqVJV6j1tMd8PijZ7DJldiRKDFoK5Zu3bt
9uHRlmJicI+USCSfsW8vwzAMY+OIQIvJNPrsxTy8RkM7/kQuLq7UvF1Pmjhl
Gk1wH04tGtY2xggP9NhAUUkyY41LScRdGtO9BZU3PLdxy/Y0fPQ4mjxpIg3+
ozvV/bYiVa3zE207c4cUhrmcViUn/2PrqHK5MlSy3LfUd/AoWrrVh9LSc4+P
0aoUFHR6o+H5Zalxj8kUkZD69/4c/Amjg6/T2F6/UDlHBypXvhL92OwX6t6z
N7n16UMdfmtN31WrRGXLlqUm7frR2TuhpFJnq8NkOFBqQgRN6taQyjpXIa+z
90iRlUddzgI0S2kxmKslJCu+Wrjhxpw1O/zHJ6dlfmpL8zcbhLUY228F0mKg
VcTGxn7l4eExBfEj0C2E3yFOBr4xW7du7QEfXFsde+h3XFzcl1OnTp1x5cqV
OjgvUx07U6l55+T5sN/GzDvnBe9ee4yJAWLy7hWb51vOli8t5pkOc/eSD/X8
pSFVqlKTRszxpJBntZ/MoMOgWT1HCfeRZcuWDYcuakv3k9TU1I+WL18+DPdC
1Jmzdn8YhmEYppCYTItBHHLAsfVU74d61H7kYopPzt0HJUOWTHuXjKIffviB
Jq19FheSLS54yXR3ao16mDVrUK06P1CbDr1oqdd+CotLJo0xlkVv3FOLDL5B
y2eOpbYtf6Lahud++6weZu9BY2j/mWvG48LPRa/XUmrcI1o01o1qV69Ktes3
pdGLtlOyNPfcIL1OQ/FPblHnBlWofPUWdO5e5D9+fUafGhXFRYTQvk0rqH/3
DtTwhzpUtUplw9ytCtX6vj791rk3zV+9jQIfR1FmluZf+eV6bRZFBPlR8+ou
VKVhF7odFv+vWO7CNktpMUCt0b0e8EDy3XAP351/XY9qplRpbKbugg3CWozt
twJpMdAlULN6ypQpHvDszb7ni3/fu3evAupa37lzpxr2hl90PLGCWB9PT083
1LnGetAUxzRqPBJ5qSlLL67ef/JhT4WdxsQAMWkxYvN8y9lerMUgtziTQm6c
pB4t61OlanVp+pq9FBGfkmf8rImaVbUY6L6oYQ1dw9ZiSxISEj4fOXLkEngO
cw0lhmEYxoYxmRaj1+tIpTDMyaKjKS4pzejDl1tDvSF5WpLxecnSbLlCz+Zm
stRkio2JpoiICIqIjKTYeAnJ5JlGD79sL2aMpZGlpVBcbAxFGp4bHh5BUYb1
qiQphTJV6mw+LnpjLI00JZGiDceLNDwnMVVG2jz6h+cr0hLIa4YbuTi70uQN
xyhZrsq2L6YnveEcMuXplCRJoOioKENfw42vj2PHJ0hImq4w6kY5KjAZ5pTJ
dHTdJCrv7EJ/eGymhDSFSfbb8Nk1aNAgAj6f5t7bwvHT5Vkf7D4a3Hfi4gvr
wqOlZXU6vU3N42yIdwzr966GdXyC4THd8H8pY3OkGT67BMNnGPo8LQZrIcTb
Q6PA+gj5SdBaso9n49hLT38fda0RO5Pz97YE1oHweoCHL/KV4Otb1Lwr6MKn
L0b8MnrOua3hMVIneFxZ+zzNhai0GJF5vuVsL9Jinu6/BNCY7s2pQqWaNG3t
nxSdKDXMVcwUDfNPs5oWg/sGvKdOnz7dFI+2dh+BZo17B+6VttZ3hmEYhsmG
ybQYe2o6jZJCbx6jlnWrUp3W/ejm49gi+/Zhvhfz6Ab90bI2Vanbik7cCiWV
xjR7bvjs6tSpE4d6AljfmNtLAmucmPj0rz1WXlnmte/uiFSp0mbzJUTOG9ro
mIayDt3uqW/cOmRYy++0O6Jjdupi47bj0ep9MQ87DJ/dXsNneNtwjl/nPp50
xaKjo0vOmzdv3OHDh395Xk0QPBe6BYDHA7QZW/WOwT0DPjg491OnTv2Ee1dh
7yNCTMy0ZZdW7j0e0keeobbrvAVxaTHi8nwz7gtlyikpKZEkEgk9vOdPg3+p
TmUcnGmNz02KiJVQYmLS38fITE+mAyvGkmtZB2r5x1S6GhBM8QkJxr8VePr8
DNKZNk7GaloMxt3Nmzdr9O3bdyPGn618fwue5vCKwaOt9JthGIZh8oC1mNya
/mlszM5Fo6ha1Wo0dvleik9V/LtmUoEOh73BONqz1J2qVfmW3BfvpoQ009XH
xGfn4uKibNas2QnUeMQazdzzlCy19o3rgXH1hnn47rx8K+ZHVZb2LXO91kvM
K7qk5K/k7hM2G9byt2TtuwbYHR2735a7DTyHR6v3xVwYPjvDZ+hl+Cw/y/kZ
Y4wiLgRaxOTJk2c+fvzYKT/5AliLjBs3bt727du7ZfeUsTUQ2wMPHKwJL168
+ENhvWMEX3H3uee2RNh5TAwQlxYjLs83+L74n9lFwwcPoF69elLnju2p4jcl
6P33P6B6zX+nbj16Ut9+g2jepkOUKpNTYvR96tukEn1UvDhVb9CcunTrQT17
9TL87T+49R9Ei7YczfM1C9mspsVAyz1//nx91FBCjpIlX7so4H4RFBRU0d3d
fSE8p1iLYRiGYWwc1mLyaELc8oQ+bahBs4509PpDUmb34S1AgxfOw2s+1PHn
BtS270QKhE+MCeOf8dnVrl07fuPGjX0HDBiwFnnUly5d+t6cMTLGGOd01Ufb
D90fCH+GyFiZI+cqmeF9NqzLsYZHTAVyXOyO6JhvdLFxpfBo9b6Y7xy/xmeo
z6axCDEh8MxEnD1yk6Cv4Gf5WV9gLXXixIlm/fr1W481ibWv00Jf389yJU6e
PPkzPHAKU1fJWDspPv3ryUsurt1/6lF3hZ3HxABzaDH24vmGXOlz3guoft3v
yNXVlcqXL09Ojg5G7aicS3njz6pUr029J68hSUoqSaIDqE+zOuTs+M/vc1K1
Rh3qN8OTElPTTfZ+k5W0GKEetHDfsaW4OujOu3fv7jhjxoypyOO0dn8YhmEY
poiwFpNneza3vHeF1q5aTQd8b5I8U1WoIyFe+saZ/bR61Vq6ci/CqOmYMhNd
8IsJDg52efjwYbnFixeP6ty58054Y5ozRgZ7z1FxsjLTl19euXV/0NA0mfJj
3qdimBeDtdCDBw/KT5o0adbly5frFlSDEOJp4uPjv8DfQnfNr44jNoS8K+Rm
wTMH2kxB1oeZSvW7R/2edBy74PwmY+0kO4+JAebQYuzF8w1+bhmyFIqKjMi1
JreRiEiKN56j1ljPKSEmiiLyeq6BCMPzE5Kleb4nhWxW0WJwn8DrQcO1Nf9v
9D0yMrI0fM1NWX+NYRiGYawEazHPa8a5ZRaly2Qkz1AW2stPb5irKjPkJJOl
G30KTZWbJLTsdZSQ34D9IuwzY8989OjRi1A3tqDrm/ySpda+edU/tuGwGWd3
XQuIq4/cJVO/BsPYC9BKBA/eHTt2dFm0aNFo6ClF8UnBeEd9V/g/2HJNEezR
I7YP5Nc7BjWro+NkZcYvPO95+OzjzhlK9bvWPg9LYA4thpvFm1W0GNQtQ1wJ
7j+2kt8oxPLgXgcNxpZ9yxmGYRgmG6zF2EHLWdNa2DNHjMzChQvdu3TpsmPT
pk19oqKiSpl67xzHSpMpP9n8593hHiuvLI1JkJfG+shUx2cYewFjBXkBMTEx
/8P4hE+DKerJQsOAT9TYsWPno9arra5RsMa6evVq7UGDBq1+8uSJQ360Y9St
Pnj6UbcJiy6sj46XffOy3HtYi7GLZhUtBvEwbm5unsgJtJW4GNzT4DE8ZsyY
BdCurd0fhmEYhjERrMXYQcupxQhgjQc/imPHjrXA3AvzmGvXrtUydY44fGJQ
23rCwgsb9p142EuekVVcryebXA8yjLmA/uLj49NqxIgRSzFWTTUGcRzsdd+9
e7cS8nyw142xb2uajKAhC3WuX5S3hftOWLS0nPu8c5uP//WkXaZSk2f9KXuD
tRi7aFbLUYJma0t1iNBP5Ca1b99+L94rW+k3wzAMw7wA1mLsoOWlxQBhfQMv
mfnz549FjMyWLVt6Yo/JlDEySpXmnbOXI1qPmOXrHRyaXFmr1dnEfhvDmBsh
vh56yYIFC8ZAj4FeYur4NIxn5PbA2xLjHf+39rkX5jygI8E35sKFC/WgG+f2
PkHrlcmzPvA+fH/gjJWXl8clyku9TOsz1mLsollUixHqQSMuzxbvDYgp9PPz
a2TqeyfDMAzDWBHWYuygPU+LERBiZLAORP1Y1MO9fv36d6aKkcHcKDEl48vF
m27OXOPtPyFFqizB8yXmZSb72ickJMQZmig0BjyaY2zgmDg+9J4JEybMsdV8
Jdyr7t+/79qnT59NuEfltm6E1vvgcXKVYR6+Oy/ciP5JlaV9y9r9tiSsxdhF
s7gWg5izbt26bcdejLlfz5T9Rowc5iq4d9pS3SeGYRiGeQGsxdhBy48WAzCn
QQ4D6rfMmTNnQteuXb23bdvW3VQxMmqN7nX/Bwm1hs44s+fm3fgf1God+/gy
Ly3QFEJDQx3h47JkyZKRiFmxxGvCDwIxJdg/xni3NZ9L9BU+Olu3bu1x6tSp
n3AOOX8PrXfNDv/xSzbd9EhMybRJzakosBZjF83iWgzqKrZr126fLeX5oMYa
6g9s3769G/QYa/eHYRiGYUwIazF20PKrxQAhB0AikXx25MiR1th7Hj9+/FzU
YEFtl6LsOQk+vht2Bbgv2nhjVlJqxku3RmIYjCHE02MNAY8Db2/vrlgDFdWj
tyCvj31kaDHHjx9vHhQUVBF9saWxiHNA/3FPQg247FqxWq1948bd+B+GzDi7
2/++pBY0YGv319KIWYtB3cBMeRrFxMRQslRurHmN+tWoRyhLf1oD+7+lBJ/W
rVaky0hqeF6WRpd3vUH90+dmKORkuDYMyEiRoTTWzBb+5Gnd7WRjH9LkmYWu
gWjmZnG/GNwH7t27VwGPlng9UwBdFlq2p6enG2sxDMMwjJ3BWowdtIJoMQJC
jAxyAWbPnj0RccuocSnkkhd23SbkDgyZfnbPtYC4BlzjmnmZgN6CMbR37972
iInBmgeagjXi6rFuWbduXf+hQ4euyG9dIjEhxMdgPzwwMLCy4DWakKz4av6G
63M99waOSpMpP7YljclUiFWLMXwWlJGWQEc2zqbmzVrR/K2nKC1dQWkJD2n9
sqW0bP1uik+Tky7H36hVGRT5KJC2rFlKi5eupMDIVFJrc1FsoPOkp9KjoJu0
Z6snzZ8zm+bOX0Rb9xymoEcRlJ6ZRTrD8ZTyVDq5ZR61bNac5mzyIYk0w/g6
ImsW02KEPB/E5tmSZy+Arn3y5MmfURfSFn1uGIZhGOY5sBZjB60wWgwQPEXh
K3Hw4MFfe/fu7TVp0qRZt2/f/rawMTLw1JSmqz723BM4eqnXrRnJaZmf2tK8
j2EKA65xINSXHjly5BLsP1uzZizGL8Y2/C4RWwKvBVtbh6Hfq1evHoQ8L/hd
Zao075y+FN5mxGw/74dhqRW1Wp1FYo3Ehji1GD1pVAry991Jzb+vQS16jqOA
J3GkUWdS9L2T1KhqFarasDsFRUlIkFmgrSikSXTD7yD90e4nKlPyCypboQbt
uRpBGep/ayd6veG5aQnks2URNf2+Orm4uJCrq6sBFypXzpnqNG1H245fIxn0
GJ2GYkP9aUz35lTjh+a02y+QFCpNLvE4Vm0W02Iw7hH7irEEfdOcr2VKoG3j
HgA929ZyLRmGYRgmH7AWYwetsFqMgBAjg1yGmTNnTu7evfu2Xbt2dYqNjf2q
MPMfjVb3WtDDpOqIjblreNRwTSXGThH8eZOSkkpA90AcDPwx4cH0oprMlkDI
V8L4vnjx4g9Xr16tDZ3V2v3KL1iL4b62cuXKIUlJySXCo6VO4xee9zxw6lF3
RYb6fWi/1u6jNRCjFqPXaSkx8j6N7fYzVareiHb4+j/VP7RKigz0oRoOZcih
xu8UGBH/TIvRU2Z6Evl4LaTmDWpTlep1qEKZT6nkNy7kfSnsP1qMRiWn2ye9
qH5VZ3J0rUnuM5fR0VNn6fjhPTRxYEcqU7Ik1fypO11/HEdqnd74fP8z26lh
9UrUrMd4ehCVaHhdUakxFtNiMOaRKwlfb/h7m/O1TAXuUbivQj+ylT4zDMMw
TAFhLcYOWlG1GCDEyMTHx39x4MCBtr169do8ZcoUD39//6oFrSFp9NZMU366
fOvtqZv3Bw2TyVVm9yxlGEsjjBnEzs+YMWPqihUrhiIHAPqB2LQOaDEY125u
bp43btyoaUux/ng/sZcfE5dUcvOfgUNnrLyyLDZBXlqn19tUzpUpEaMWk5Uh
pQu7F1E1VxfqMHIJRUikxnyhPLUYvYYkUTepT4sm1LbbEPI+cIz6t6pGjk6u
uWox6SnxtHJsZ6pQvjyNXLSLwuOSSaXKIpUyg8KCb9GAVjXoGwdnWn7wFqUr
NcY4GmlCBC0a0Y7Ku1ajJXsvkixTbZ03J/dmMS0GGvGtW7eq37lzpxq0WXO+
lqkQvIbbt2+/F/q22O6pDMMwDGMCWIuxg2YKLUYA8x3kZ9+9e7cS1peIkdmz
Z08H1GYpSIwMasxeuBnddMRsX++oOJmD/iVeNzH2A65/6BjYr4Vuibwf5CJ5
eXn1hj+MNXOSngfiY7C3fPny5brw7cbaDPqMrXjIIE9h2cpNo3uO8Pa5fDu6
UZZaaxPrSXMhOi1Gr6PU+Cc0oVtjKutSg7zOICdI+/RXz9FipCmhtG3TLgp6
FEkxUWHk3r4WOZXNXYtRyFJov+dCmjxpGl0OiSWVRvi93qjTrHJvTw4ODjRp
wylKlauMv9GqFBRwahN961KOmvSYTGEJqXl7Alu+WUSLEe5ZGENiiNUrCLhn
IS4G9yxb6jfDMAzD5BPWYuygmVKLAcJ+P/SXffv2tevRo8fWadOmTQ8ICKiS
3xgZPCdWIi89dv5fXvB3UKo0b5uibwxjaYQ8JOguGBfwwUUu37hx4+bBwwTr
G+QAiDEeJrfzQH+Rj/jnn3/+jrwqsesxiH8Jj4xz6NRj5H73iYtWSBJTvxDz
+2wJxKbF6DVKCr9zlOpXcqZqP/Wle5GSv/OBnpejhPpKcnkGabQ6SkmIojEd
8tZiUBtJIUujlJRUUmm0/2gqhn9IJVE0d0BLcnRyoQV7rv4d/6LXaykhIoh6
N61KzpUb0omAcFLl4glspWYRLQb3LOjEqA+PfRZzvY4pEfQj3HOhIVmqBh3D
MAzDWBjWYuygmVqLEcB8CNoLNBhoMdBkoM3kN0ZGrsgqvtPnQb95667NT0rN
5PrWjE0g+PBm9+O9cuVKnbNnz/4IzQV1knbu3NkZega0DWv3t6BgjYPcw4ED
B67BeBbz+sx4DzLcR/Ydu9er78iNf27feaAH7knW7pe1EZsWo0Z+0o455Ozk
RO1Gr6T45PS/fXLz1mL+3V6kxeTe9KRVZ1LI9RPU8rvyVKluGzp3L5qytNli
ZpLjaPmo3w3HdaZ5uy6RNEM0eUoW0WIwvvfv3/+bh4fHlOTk5E/M9TqmBHox
YnOvX7/+nS3V32YYhmGYAsJajB00c2kxIHuMDHKVoMdMnz59GuZJmOM9T18x
1rcOTa4ycMrp/fceJX2rZQ9fRoQImgv+jRgReL4g9gVx8diXhd8tdAtDGwhd
BuPBlut6oM84r5CQEGfcM4S9ZzGej1qjez0gWPLdiJm+3qcuhLZJSk77tLA1
3uwJsWkxirRE2urRh5ycnGjc2hOUkq76+3fm02L0pNNkUdTD2zTFrQ2Vd61C
Y5ftfVa/+p9nqdJT6Njqsca+uc3aTolpGaY56aI3i2kxR48ebYk4OFvRMeEP
tXjx4lHI/cQ919r9YRiGYRgzwVqMHTRzajECQowM9tPh6duzZ88t2GuDZ0Ze
azjUOElOzfxs/vrr83YeedAf+9vm6h/DFAbEviPPCB6R8CbANQ6P23bt2u3D
PjJ+Bl8VaJHQaOxFA8B4xbkjrgfnvnbt2gHwIBaT3w1yk+Ik8lJz112bv3aH
/7iklIzPEySSzxGThP19selGlkRsWow0KY4WDGpJTk5laenBOyRTav/+nVm0
GP3TeJjw+9dp6sD2VLFiZeo+ehEFRyWRRpej/lKmjG7tX0JlnZyo9dBFFJck
M9VpF7VZRIvBPQv6Je5ttnL/ghYDn5jbt29/a4uxhwzDMAyTT1iLsYNmCS0G
CDEyqHWNmtfw9cV6FbkaWK/mtjbKVGneOXUx/FfUoY1LlJd8mddPjPXBWgRr
EsS8YL8V+sqqVasGo1YHHvF//DwyMrI0vFTEpE2YA4xH6Knw6Z4zZ84ErIGs
3SehX6i/tudYSB/cO0IjU10QV4f8sP79+6+DB/HLvEYTmxaTKomhqT0akJOT
M208+4jkWf/oIabWYgzXBqmVcgq+5UvDurSgSpWqUu9xi+luWDyptTrK+Vc6
lZxCTntSOScnatRrOsVI0kx45kVqFtFikO8THBzsYkv1kxCrh3sxxjjPGRiG
YRg7hrUYO2iW0mIEhPUs9qwmTZo0C/WvDx48+Kuwds0+d9Lp9MUioqVOQ6af
3XM9MK6+Wq19addPjHUQYkAANMMjR460dnd3X4hrFvvFiLFAbAjiY7J7RL4s
awCMWYxd5CwJayBr11vJytK+edU/tuHwmb47/roe1Uzw/sbnhc8N9XltZW1p
DsSnxUTTpG71jFqMl99jUphLi3mmw9y95EM9f2lIlarUpBFzPCkkUpKrDmP8
kywFPfbdZPSyadB9KsVIUk134kVrZtdiMIZx7A4dOuyJiooqZY7XMHV/Mbe4
ePHiD7hXW7s/DMMwDGNmWIuxg2ZpLQYIMTLYp/b29u7arVu37bNnz554//59
15wxMmky5Sertt+ZuGF3oLs0XSWKfXfm5UDwf3nw4EF56C2IefH19W184sSJ
ZoiNEWL2s3vGvIwI4xm61MqVK4dcuHChHnQZa7wnWp3+1bBoabmpyy6t3nrg
3pBUw/0ju58P/C+gyVhbL7ImYtNi0hJjaaZbE3JyKkdrT9wnuUr39+9Mp8Xo
SZuVSSE3TlKPlvWpUrW6NH3NXoqITyGtTvffAz5rOlU6BR1fbYyLafrHbIpN
lJrorIvcLBIXAw0GcX+4/4l9vKB/YWFhZdBfxCaKvb8MwzAMU0RYi7GDZg0t
RkDIRb9582aNCRMmzOnTp8+mw4cP/4J1rlDjN0utffPS7Zgfh3v47oiKk5Xh
+RVjboRYGOyx7t69u2Pv3r29cF1iHQ+tEDqDrXgnWBK8X9BWhw4dugJrOEuP
VcPrFUtMyfhi/e5A90Ubb8yOSUgvjdi67M8RaqwgLu9ljY0RmxaTnpJAq8e0
N/rFzN7x71pFptJi9DoNxT8JoDHdm1OFSjVp2to/KTpRSjrd8z1+1RlpdGH7
TKNfTMexayghRW6SczZBs1iOErygbGGs4H6DHGh4pbMWwzAMw7wEsBZjB82a
WgzAfAl1chEjs3379m5du3b1njt37njEImDdi7VUbIK89Oi557acuxrZQqXS
cI1KxizgWsSaA167qIUE7QXXITyNUCuI9Zfng/cH79OjR4/KYuzi30/HsPnf
N3x26YqsDw6eedzV3XCvuBuSWF2j0b2e83n4TPfu3dt+5syZk22lRq+pEZsW
o0xPocMrRhv1jgFzd1GS9J9aRXlpMXq9jlSZckpKSiSJREIP7/nT4F+qUxkH
Z1rjc5MiYiWUmJhEaekKY9xLZnoyHVgxllzLOlDLP6bS1YBgik9IMP6twNPn
Z5AuW5xMhjSJds7pZ6yj5L7Sh1LSldZ4i3JrZtdihFg3W/BdQf9wn8FcAns5
eBR7nxmGYRimiLAWYwfN2lqMAOZRyAG5ceNGzXHjxs3r27fvRh8fn1bw4UiT
Zn68eX/Q0KWbb01PlSpLWLOfjP2CtQfy5OAHs2TJkpHwosWcXojRsnb/bAEh
pgg6DGrKohYu/m3O98+wNH9FlaV5Cx4xI2b5ep+5HNE6U6l+N7fXxGd87969
CosWLRrNWkw4iaFpVQoKOr2RKpcrS417TKaIhNS/60rnpcXA98X/zC4aPngA
9erVkzp3bE8VvylB77//AdVr/jt169GT+vYbRPM2HaJUmZwSo+9T3yaV6KPi
xal6g+bUpVsP6tmrl+Fv/8Gt/yBatOWoUY95+uJ6Sk2IoEndGlJZ5yrkdfYe
KbLyzmeycDOrFoOxA00anm7wgzL18U2NUNMOfbZ3z3SGYRiGecYrERERZRs3
bvzo0qVLeszr7JXIyEi7PT98dobP8CHywa19TQkxMtHR0SW3bNnSs0uXLjvm
zZs3LijofqXLtyIaDZx6+s8n0WnlcuYdMExRwDweuXJKpfKtx48fOyEvCTHu
2b14mYKB+KJz5841HDRo0GrEFZlzfYQaSY/CUypMXHxh3baD9walSpV51qwW
7jHQ2V5Wz5hwkWkxT/OHblHnBlWofPUWdO5eJGU9S0TS61QUE+xLv9T/geq1
HkAPYhKNWoxKIaVz3guoft3vyNXVlcqXL09Ojg5UpkwZKudS3vizKtVrU+/J
a0iSkkqS6ADq06wOOTv+8/ucVK1Rh/rN8KTE1PSnr63NooggP2pe3YWqNOxC
t8PiSaN/fk6TBZvZtRjcA3/77bf9tuAVg32cTZs29Vm+fPkweHxZuz8MwzAM
YwFekUgkX/Tt23cr1vKY29kjjRo1CmvRosUDPFq7L+YAn53hM9yCuF4RXFNG
hBiZa9eu1RozZswCNzc3z83b9rkNnHRwz1G/xx0ylRqukcCYBGgEoaGhjojh
gO8j9BjksXA+UtHA2g35SXhP8X7CS8Yc7yt02TiJvNTiTTdnLthwfS7yGfOj
1eJzhm+MtTyGrYnYtBj46irSEshrhhu5OLvS5A3HKFmuelrXSK8nTVYGxUZH
U3SshLI0WuPP9TotZchSKCoyIu+9hohIik9KI41WS1q1ihJioijiOfsSEYbn
JyRLDc/XGfukTE+mo+smUXlnF/rDYzMlpClINEqMBXKUoGkgbxi6pdjHSFJS
UokpU6Z4HDt2rAXGtLX7wzAMwzCWAPvGWMNj3wTzAXslMjLSbs8Pn53glWvt
6yk7wv41PECxTv7t944Hf/51yPmxM/9cFy+RfiX2uSFjG6SkpHw8Y8aMqciL
w1hgDcZ0CB4O0GCOHj3acufOnZ2RF2SqsYvjIAZm+6H7AycsOr8h+ElKJcM6
+oXxN8Ke/++///4nfIFetntJuOi0GCKdRkmhN49Ry7pVqU7rfnTzcSxpXuCr
a86GWJ2YRzfoj5a1qUrdVnTiViipNKLJT0IzqxaTveaYLdwThXhaaL620F+G
YRiGYRhbQPADvXz5ct1+/Yd6ft/otxv7Dxxpl5iY9KnY9CPGNsB1gz1f7Pdi
vQGPIszj2e/RPOB9vX79+ncDBgxYe/HixR/gBVrUYxrjbjLV7526FP7riFl+
3lfuxDaCZ4xeTy/8/ITat506ddpljXpP1kaMWgziXxAbs3PRKKpWtRqNXb6X
4lMVhh9bXo/BaypS42jPUneqVuVbcl+8mxLSMsgKXXleM5sWg/GAuNQjR460
hhZjymObGmHPBp42tuAxzDAMwzAMY2sYa1sb5lkhD0PLuw328K5Tv+WN+fMX
jkOtTeQa8PyLyS/Q9lD3dMWKFUPXrl07AJoMri3eSzUfQr5SSEiIM95v6F9F
rQuepda+cfteQp1Rc85tPXz2ced0RVbx/N4HhPsJdBis46z9/lgaUWox9E/d
6Ql92lCDZh3p6PWHpFRrLd4PrTqTHl7zoY4/N6C2fSdSIHxirBijk0czqxaD
Y8IrBvFjpjy2qUFfEc8Ir3/UYuS5AMMwDMMwjHnIVKrfOXw6qGOr7osvd+3R
f1f//v3XnTp16ifkPXCMTNHAHDY78FHBejlnDSFbnOuizzgX6AB4vHr1au1Z
s2ZNCgwMrPwyrsWt9RngWsL7f/78+fqHDx/+pbA+FFqt7tXHEanlpyy9tNpz
T+CopNTMzw3HKZCuI+ynIz/zZau7IlYtBh4t0EHC712htatW0wHfmyTPVFm8
F6iVfePMflq9ai1duRdh1INEp8SYOUcpPj7+ixEjRiyFbi3me/7Lnm/IMAzD
MAxjKeDJGR4tdRow+cSfew5f67569drBqLW0dOnSEah/wzEy+UNYFyM+Ae8Z
1qLQszCXxdoUMQOY38IHEbFHWLPiOagXij1I/J3wPgvajbXPKbdzFECcPfxK
Vq5cOQQej4jRgE8M5yRZHlxbyFPCPjbyDguar4R7QKxEXhpevfPXX58XHZ/+
TWHqquFzxzpz4MCBa162/XTxajFkzFXSarIoXSYjeYaSdFaIR9HrdKTMkJNM
lv7UK1iEQgyZWYvB/R73SlvQKaHvIs80+/cSwzAMwzAMY3qk6aqP1+70H7dq
++2J4VEJDljXYf8Oa6ozZ8404RiZFyPUDtq3b187xIjgPUMN8Xbt2u1DDXHM
we/fv+/q7u6+cMiQISuhzyQmJn46ePDgVe3bt9/7119/NcD8F38HbQa6hhBH
g5/Ba8DSOT/ZtSGs7+EfgL5Ba8K54ly8vb27om88X7cegjYG/xh8RqgrjWsn
P58JnpOSpvx064GgIahfHfIkOV9evXkdC9pjhw4d9iBXydrviyURtRbDLb/N
bFoMvj8RswbE/F2KMYz7O/zkXtb69AzDMAzDMJZErda+cT0wvv6Q6Wf2PIlK
c1aqVG9hLgrvj86dO+9cvnz5MKy9eW72D0IcDHQIgDn2+vXr+02fPn0atBgh
fwdrUmEvFO8fNBjEquP/AP62eA72H/F8xCNBv9m4cWNfaDBXrlypM3v27Ik7
duzogvU2joHnA8GTBT9HH0zlsygcE7oL+orjIkZq7Nix8+EVi1ge4VxspSaI
vSPkB2EdBc3v3r17FV4U04bfyRVZxY/6hXYYNdtv2/WAuHqqLG2+vHrzOh6u
B19f38a4nq39nlgS1mLsoplNi8G42LZtW3d8p0LnMOWxTQm+t/z8/Bqhr2Lu
J8MwDMMwjL2ANVRCkuJ/U5ddXH3ozKOuqKWC9TX0BfhQDBs2bPmgQYNWY42F
eA1eez/d54QeAv1l79697QU9BrpLQfK6sj8Px0SsDHKZcCxoIFgTHDx48Ffk
A+E1kN+EOBrEHkAfw8/27NnTYdOmTX0ePHhQHhpJTg0I82v8H3kjggaEXBL8
DLlFQj4V/o/PF+to5FJBExo1atRi9Ak/h48QvGLZD0a84LPbtWtXp6FDh65A
XaO8xir0FlWW5m3USho522/7yQthvyky1O8XVcvD6+GawjWY39gce4C1GLto
ZtNicP9cuHChO2rQo0a0KY9t6n4uWLBgDGI6xV7viWEYhmEYxl7IyFS/e/jM
486Tl1xcE58oLyn4gkAPwJpu9erVg+AjA38Q5CG8rDEyOGecO9a8qE86c+bM
yQEBAVVMpU9k94oR/H7xWgDr3JxxMUI/1qxZM9Df378q5tJCbhTm1NBRkLuC
//fq1WszclgQz9KvX7/1+NmlS5e+x3OWLVs2HF6NOA72Q4W4GEG/gU4EjSmn
7zAjLnCNIG4J1wC0urz8ezQa3ev3HydXHb/wvKf34fsDUqXKT0z1uULXw30C
mqK96bY4n9zeU9Zi7KKZTYvBNYPxiLEp5hwlfJ9gzwXf+bbga8MwDMMwDGMP
wKszLFpabpiH764LN6ObqrK0b/7zu6cxMufOnWsIrxOAf79sMTJCPAn8dIS8
IKw7TZUbVLjPTVcM82chvx/z/KLGxQhrBbF6CDMvviaw947PHWu/nHlkhrH+
amSszGH2mqsLl225NS0+SVGyMF69eQGtb/To0YvgNQX9ztrvR2ERtGi8lxgf
GDNYTwcHB7tgrGV/LmsxdtHMosUINefwfSHmWDHhuwPfJ2LuJ8MwDMMwjD0i
k2d96PVn0PAFnjfmPKtp+6+6y1h/ICYGe97wkUGsDPbPrKlFWAqcH9aYHh4e
U5C387LViWFsD+gH8BqCv7KQb6DT64tJkjO+XLvDf9z0FZeXP4mSOmu1epPu
02Mtd+LEiWZ37typllOzECuC3w76Dj0SGhY8kuCdsW7duv7wMm/ZsuXRn376
6dTu3bs75vTDYS3GLppZtBjoMBcuXKh34MCBtmLNTxK+35YsWTIS9w1r94dh
GIZhGOZlA/VT7j1OqjZo2pl9t+8l1FFrdP/Ju8H+OtYqiGOGhwy8ZOApg7gZ
e4yRETQoxI8g9uTQoUNtHj16VPZl0J8Y2wYxKYhN6d+//zp4MON6Rc20vcdD
+oyZ95dXYLCkJny7Tf26gmcM4gDEWONcyP1DH3HfQt4eNGXk63l5efWGR3Wb
Nm0OVaxYMeh///tfTIkSJZKKFy8uK126dOTkyZNnIj4m572OtRi7aGbRYhBr
smrVqsGenp5uGBOmOq4pwZhATiryVjEWxDZmGYZhGIZh7B34eabKlJ+s9vaf
sHLb7ckp0sxPc5uTCfoE4vVRYwk+Mtg7xvzVnjQKnAfmzqg3jf1x7Gli/cae
KYwtIORGQIfBeE1KTvv0zMWwNiNn+W0/fyP6p0yV5h1zXcd4XdQTg24pBq9n
IZcPe/9Yc8JDafv27d2grcALu2rVqv6lSpWK+vTTTxOhu7z11lvKYsWK6f7v
//6PXnnlFf1HH32UCo8lxAXm5vfBWoxdNLNoMbjuzp49+2NgYGBlfD+a6rim
BroktEjktvL3G8MwDMMwjOWBp2dAsOS7IdPP7A14IPlOk0tsjADWJIhnxt77
wIED1yCOH14q2Ae0hxgZzJtRU9rNzc0TdYywvrR2nximoBjzDxKTPlu4ZP34
XiN3HDl4KqSrTJ71gTnXW7gHrFixYuiGDRv+EENtXIzd48ePN+/du7dXzZo1
byDG5bPPPpN88MEHUugur776qha6S2689957cug1qBOel58pazF20UyuxQj7
FtD0xbpPIeTnCbFsYvYWZhiGYRiGsWcwL0uVKkus2n5n0oqtt6ckp+UeG5P9
+ciFgLcCcs3hI4P1F/aexTr3fNH5o9/QmDA3xePt27e/xXrSHvQl5uUDuYcB
98KqN/+1n1/PP8btioqRlDZc52a9lnFPQO7ixo0b+4pBi8F6GDXZXVxcgl9/
/XV1XrpLTt5+++3Mpk2bnr527Vqt58U04H7XuHHjh5cuXdJDj7FXIiMjddbu
gxlJN3x+hwyf4y18nqYaB4jBunv3biWxxsSgXw8ePCiP8YrvPGv3h2EYhmEY
5mUGsTB3QxJrDJlxdvf1wLj6WfnwlMBeGmKbsd6BP8XIkSOXXL58ua6txchg
Xnrjxo2a06dPn4Za1fi/GD0vGCY/oD5SdHz6N/PWX507ecGR5YePnv5VqLFk
znEpaLRCfS9rjx+8Pnxe+vTpswlxLvnRYd54442sWrVqXUN+Cd6v550Dcp/6
9u27BXoM4mPsEcO5PWnduvVdPFq7L2YizHBudwyfoxc+T1Ncd/hOnDJlisfB
gwd/FavOgTEKH/41a9YMFINuyjAMwzAM8zIjeHxu3Ht35Nx11xYkJCnyVTNI
WH89fPiw3OLFi0fBRwb74pGRkaXFHCMjxJEDxMHMnz9/7Nq1awdw3jxjyyD2
BfXQPPcEjpqy9NKah2HJFTIyMt9FHgI0U4zLvHJuTAU0DNRTEkN+H+5B8BxH
bIzgBZMXyFmCd+++ffvaoQbVi+4D0KIFL5rw8PBv7BVcM9bugznB54fP0VR5
OvgOmTt37njUQTf3WCss0F82b97cC3sQtlL3jGEYhmEYxp7R6nSvPgpPdR09
59y2E+fDfs9UqvO9pyfEyKCuLfwuR48evQg+nubI8xFqooDC6CboD/QX+PMi
lhw+i4mJiZ9yThJjyxh9p+VZHx48/ajb6LnntqIuWpZai/iUYvDynTRp0izE
fuFaN5feKNRmgdcK1rnW1jXx+jhf1En68MMP0/LSYaDTODg4PEHdG/iZWrvf
jG0ieGej7qBYYyuFPiJ+VQzxawzDMAzDMIxhjkb0iiJT/d6hM4+7jJ3/16bQ
yLTy0Gfy/ffP5nghISHOCxcudEeMDGo0REVFlTLVvBRaCeaQyCVCLE5+6rVA
J8L6Kjo6uiTmyNjzxt43vIePHTvW4kW5CAwjdvR6ekWp0rx94Ub0TyNn+Xr7
Xo5onZGpfhfXteDTibq10EoRI2OunCW8FjQY6LHID7L2+wIQGwNfjHLlyj3M
LTYGNZNQx3rOnDkTUOua9VimMODah66PPQix5iahjxj7gt8+f+8xDMMwDMOI
B+MeeqKiJPKU1u0MGPsiH9/cgPaBvWjoHH/88ceGMWPGLIAPJtaAhV3nCOtJ
6DrIc2/UqJHfggULxuSW6454GaypsBbE3BjPwX43PIbxt9BlEJMeExPzP8xL
ee3F2Dpqje71oIeJ1cfO+2vT7qPBbmky1cc5xy2uc+gv0CIPHTrUBnXCoE2a
8voXxinGHzSQwsaumaov2PdHnA7yJlFLCfWTcuowqGmNOD7cW/hewBQWXDvY
H/j999//RF6XGHUOfDejNlivXr02h4aGOvL1zjAMwzAMIy6wrvO/n1Br+Ezf
HX5XIlsqVZp3sO9ekGMIMTLImYcXS9euXb23bNnSE7EpBY2REfbybt68WQP7
7djDhhfnr7/+ejAuLu5LzCehuSBHCq+Jx3Hjxs1DXepz5841xB4l1pyYewq+
APgbMc6VGaagaHX6VyNiZY4zV19ZsnLb7ckJSYqvdM+pmQR/J6EmPcYH/o8x
YcrxgOMhL+rRo0dlLV1LRshhxFg/ffp006FDh67o27fvxlWrVg2uU6fOlew1
lVDfumfPnlvQT67ryxQFfK/BfwXXE77nxPj9Am3yypUrdeDtxt5oDMMwDMMw
4gPzs3RFVvE/TzzsiVyl4MfJlVEjtzDHEvwtfXx8WmE9BI0E89X8xsgIa7qd
O3d2rlev3oXixYvLsJcNkHOAuqHQaXD8qVOnzoBeAz0me1yMoLsIWPv9ZRhT
Ac0lMTnjyzU7/MfPWHF5WVi0tCy0mef9jZBL8eTJEwfEjGG8YD8fHkqm0iNw
/L1797ZHPRms+Sz2fhjGOs4J3sEzZ86c3KlTp12IhYPWgvvQhg0b/vjyyy/j
cP949913FW3atDnk7+9fNT+5jgyTFxhTGDvQ/bE/IMbrSdAoMTaRn8TaI8Mw
DMMwjDjBGg+1lJZ43Zyx0PPG7NgEeWnUyi3MsTAHxBz1wYMH5VFfAjEy27dv
74YcobxiZIT6TPfv33eFfgNfzez72eCzzz6TeHt7d4VWs3Xr1h7wgMG6j+Ou
mZeBZ7XPPtp3IqTXmHl/bQ4ITqyp1ry4Fr3wtxgnWI/B32XAgAFrly5dOsJU
vrVY88HTCTECGOeWeC+gKUFfgt6CfMRp06ZNhzYrrDtxvvDMadu27QH4+DZo
0OCvS5cufc/+pUxRwfcY8pIwfsSqcaCPGB8Yj2Kt78QwDMMwDMM8RavVvfYw
LKXChEUXNmw5cG9ISpoS3jGF1mOEGJnDhw//0qdPn00TJkyYg7US/Cuy6ydC
nSP4zbRs2fLoJ598kpyb5+b777+fPmLEiKXwpkGcjRADY+33jWHMjVF7UKrf
OXctqvmIWX7ef12Laob/F1RTEDRPxIb8+eefvyOmBHFmGKdF8bTG3yE3CbFp
0DrMVVNG8KeBHovYuP79+68bNGjQ6uPHjzfHz3K+Ls4J9x9DO4znQCNmHYYp
Crh+MF4QlwkfJrH69uI7ddasWZN27NjRBWPc2v1hGIZhGIZh8gYeMaos7VvX
A+Lqj5rtt+2oX2iHdEXWB0VZuwgxMvAPxLywW7du2zE3FGJkAPbp4THj6up6
P6fXZnYQJ4O8JXhz8nqKeZnQaHSv3w1JrO4+968tiItBfExRdBMhdwFj8+zZ
sz8iFk3wkilKPwX9FVpPUY+V27ERh4C69JMnT56Jum2bNm3qg/sHXiuveDto
v7j/4Hz5vsEUFSHeCjog4jjFGBeD6xy66LBhw5Yjf0+MOVQMwzAMwzDMvzF6
S2So3z99KbzNhIXnN1y6Hd3kqZdv0fQYodbRwYMHf0VNh0mTJs26detWdfg6
eHh4TKlbt+7lMmXKhJUqVSoKXr1fffVV7BdffBH/+eefJ6DuCWJlPv7445TK
lSsHYi3GMdfMywJyBSNjZQ6zVl9ZvNr7zgRJcsaXz/PqLdixdcUQZ7Znz54O
8GhCnAxizqB5vCi2JbffISbG19e3MWJVTFVbRvC7gcfNypUrh8ATBvWokROV
Hx8qIUaPdRjGFAj1uuDXi1gwMV5XQpwavGw4J49hGIZhGMZ2wLwtTab8eO/x
kN5j5v/lFRgsybcvxYuOi334oKCgitBfunfvvg0+MoGBgZUfP37shBpM2MOD
pwPqvhw5cqQ11oiox7RmzZqBqAUBjwv8Pe/zMS8DyBFMSs38fMPuQPfpyy+v
CM+HV29BEeqSQdcAu3bt6rRo0aLRGI+5aZ7Z61jnXOfhWIh5g1aCcVoUzVRY
T+J4yKdCnuPw4cOXQeuBfmTN+tnMywmub+T75JYPJxaE71nEj1q6phnDMAzD
MAxTdLDvjv33tTv8x5tyDSjEyGAuu3///t8QI4PaK8hpQC4Bfoc5LuaQyDuA
3wPWiZj/CmtFse5FMowpMdZ2z1C/7+MX2nHUnHNb79xPqK1WF10TfR4Yf9BF
UYvo6NGjLTEmESODcSfkYuAROg1qR1++fLluzvwgIZcI60GM34J6OglxLPC7
uHjx4g9jxoxZAN0WuY1RUVGleJ+fsRa4prFHgL0ES9YLKwgYH8g3HDly5BJ8
z1q7PwzDMAzDMEzB0en0r0bGyhxnrbqyZLW3/4TElIwvCuvlmxMh7wA1qqdP
nz6tR48eWxEDg5hq3u9mGPq/LLX2zRt3436AV++pi+FtMzLV75l7XAhaqeDp
C00FMWnwZcG6DroKfjZ79uyJyCeE1zb8uHPuv0NLwVg+ceJEMxwrv/0W4g7g
w4HYHOQjIR4O/8fP2aubsSYpKSkfw9sM9fygU1q7P7mB8bZu3br+GLeoKWbt
/jAMwzAMwzCFQ6PRvXE3JLHGmLl/bT54+lG3dEVWcVOtB4V1H9ZsqE8NPQZ1
aZGzZEWfTbwm1nuIAXiNsVleffZZmuS60BuOhVgxrU7/moHXzY1ao3szLFrq
PGXZpTWee+66J6ZmfKnR6t7I/hxDf17Vm/AccwN77FevXq0N3+1r167Vwri8
cuVKnWrVqt157bXXNMWLF5d16NBhD7xxs+cjQYtBTXvkFcEX6kU5hYIHB+Je
sM7FvWDs2LHzEReD+Bj2e2HEAK5jXKPCNWnt/uRE+E5FDh8QYx8ZhmEYhmGY
/PGslu67Zy9HtMb+/I278T9kmThPwpiLIZe/By9OaDE9e/bcAm3GSjEyr2q1
uhLJqZlVYuLTa0QzNonhs6ti+Ay/NHyWJlmLaLS61+OSFY4Po9NqBUel1jU3
dx4lNlm2487CIbN9j529GdXpfkTKD9l/HxKVWjs8XlYpWZb5han9Y3KOTWgk
WHsiPwPeLR07dtz9zjvvZKC22SuvvKL/6KOPUt3c3DyR2ySs/YyeU2lpH8J7
Bl7bOEZexxfWjqjnBD+Yvn37bkT+IurAcD4iIway11LHtYz4LLFdl4K/kuAp
LMY+MgzDMAzDMAUD87kUqbLEpn13R0xbfmllRKzMUWfi9V/2GBnkKsEfYsaM
GVORw2ThGJl3DGv4duMWnA/oMvJodKcRPowNYvjsHhs+wy2Gz/IzU1wXKTLl
59O8Lm/rMP1Y2G9TjsaYm7aTfeJ+dj8o+3HE/oxfJ/nE5fx9u6lHo7rPPhE4
Y8uVzYa+meQcXwTWoohTcXR0DIUGI9Sax78/++wzyejRoxehdpKQRyR4AgPo
Mjl1VfwePjTQYOH1i3ykVatWDUZtNeg+vI5kxIIQ54Ua0aihLsZcOYyXJ0+e
OHTt2tUbsTs8fhiGYRiGYewDoa7u9BWXV3j9eXd4qlT5iTnmekKMDOopTZ48
eSa8fQ8cONAW+5EWipF5NyY+vYdhLZ948248RcenM7aH3vDZZRg+wxDDZ/m1
Ka6LuGTF1508jj90W35ZP2jtdbI2IzfeTF96MOhQr7knb6Fv5h7/GHcSieSz
ESNGLEVekqDDZNdjUIce+in0VGGtir+Dxyn8KxA3I4xhePqGhYWVgQ8N1o7w
70b8DLxoOK+CERvQExGriesUMVxi1DnQJ2ihyBmEJiPGPjIMwzAMwzCFA7lJ
1wPj6g+f6bvzwo3on1RZ2rfM8TpCjAxyFJDjgBiZmTNnTkaNXAvsl79rWMv3
6DTCJxHrem422XSGz05h+AyfGB6/IRNcF7FJ8m/aTzsWDh1k1GZ/qzPRO1Dq
eerRju6zTwSgb6Y4x+eB8Xj79u1va9euffWDDz6Qvvnmm6pixYrpsusx+P/X
X38dsWLFiqHQXwQ9BvlN8JuBlyj+DV312LFjLQYOHLhmwIABa1GvScw1ghkG
1z9quEPjEGudaCGf8OHDh+Vy1jZjGIZhGIZhbBvM7WTpqg93HnnQb9LiC+si
YqROps5Vyg7WcqhVgTXgxIkTZ/fu3dvr0KFDbTAnNmOMDGsxtt9YizExGG+I
Y1m/fn0/xMa0atXKp2LFikElS5aM/vTTTxOhz7z99tuZb7zxRla5cuUebtmy
pSdiXASfjZCQEGfoL+fPn6+P2ILOnTvv9PT0dMMxESPD60ZGrODaR0wYrlOx
1vgTasDj+1KsfWQYhmEYhmGKBnKVsL6dsfLyss1/Bg1Lkyk/Nue8T1jLwTMU
9VW6deu2HfV0UeM2PzEy+H0Ba7CwFmP7jbUYM41DrPWw5kMeUmhoqCP8Y7Zu
3doD+kqXLl12IG7GycnpcdOmTU/7+vo2xv48xmlwcLALalQ3b978+Lhx4+ZB
X0XtXTH6bjCMAK5P+MOMGjVqcc5aYWIBYxN5U/BcQowZxpu1+8QwDMMwDMOY
B+QqXQuIazDMw3fXVf+4hob/51ojxZQIMTI3b96sMX78+LmolXvkyJHW2K98
ntaCmG2sGQuw7mMtxvYbazEWQNBn4KWBGBiMRfhVwIsXa8Ljx483hw8v/J5Q
GwlxbRi38+bNG4ccJt67Z8QOtMRTp079BC0GObNivGbxvQYvJowvjD0x6kUM
wzAMwzCMaTDWq5UpP96yP2jo9OWXV2C9i3gZS7wu1n6o2blt27bu8PycO3fu
eNS3yC1GBhoNciNQI3vDhg1/pKSk5CeGh7UY22+sxVjx3gA/Daxbz5w502Ts
2LHz4fe0ffv2blgvnjt3rmH//v3XwXeDY2IYMSP4lkFnxLUrZp8Y5E8h9ozz
/RiGYRiGYewf+MRExEgdJy++uHanz4N+MrnqQ0vNAYVauKi7gnwH7Ln7+Pi0
Qpy2UIMFfUEuhYeHx5QvvvgivlKlSnfxnHzkNbEWY/uNtRir3BN0xVADDdro
kiVLRnbs2HH3woUL3ZHbgZg2/B7jD+tarBnZq5cRK4IPruBnVMA8V4v3EzFp
eBRjHxmGYRiGYRjTo1Jp3jp/Pern4R6+OwMeSL5Ta3SvW+q1s8fIwCcUXhXz
588fK+wNIrYc+/Kurq73X331VS3qvjRp0uQMfCrwd885Nmsxtt9Yi7Egwnow
Kiqq1M6dOzv36NFjq7u7+8ILFy7Ugx6afR0r+DdBm7l161Z1aDe8fmTEBuJh
7t69W6lfv37roS2Ktc46vucQazZmzJgF0GOs3R+GYRiGYRjGMhhjT9IyP1uz
w3/CQs8bcxKSFBbPpxdiZK5du1YL81E3NzdP1Gvx9/ev2qFDhz3vvPNOhlBz
t3jx4jL4VWCv8zn5EazF2H5jLcZC4x9rVsSj+fn5NUJ9JXhW7N27tz28tpHT
kdv9AOtaeG9jrGLcvkAbZRiLAw+kffv2tYO3Ea5vMeqF6BM8tEeOHLlk48aN
faFvWrtPDMMwDMMwjOXQanWvhYSlVBw9x2/r8b+etMtUqt81/Nyi81YhRgb7
8ps2berz22+/7W/duvWRjz76KPWVV17RC1oM/o18JdRhes78mrUY22+i0WJG
et2mYeuv0OA1F2nI2is0fOMtw8/u2LwWI2iggYGBlVG/pVOnTrtWrFgx9OHD
h+Wwjn3e2hW/gwcHPGROnDjRjOu+MGIC1yfiTdLS0j5MSEj4XIxeuOgjxiBi
QBG/g/HE/ksMwzAMwzAvF3o9vZKRqX7viG9opzHzzm1+HJFaXqvTWSWeG3NR
1Gfx8vLqXapUqajsOoxAsWLFdGXLln20e/fujnnkR7AWY/tNFFrMyE23aODS
Y/TbsAXUpMdE+un/2TsPsKayrQ3/905z5k694zR1Ruli771g7xV7b9go9t67
IgqKiIgdK3ZF7L2LYkMRFAi9p5AAgZT15wtmBr2oVBNw7ed5nxA4OWefs/cJ
2V/W+tao5dRv8TGy3+xHk7YVTy1Gt05Fnd/t27cPg3/2nDlzliK+BevB3OZy
6Lxl8F0+wD4NMfaA+bTQ/Q+5d+9eXZ0PriHOS+hD8MeGH/274s8YhmEYhmGY
ko/mc+C/YxNkZVd63Fnlsf/RtGRxul7q1eJzNPxjkPvwn//8R/a2DqPjiy++
yGzUqNHNGzduNM6hNgZrMcW/GYAW4092rueoTfc+ZNawBzXuPYkadOhHpnV7
UJ9lZ2nCVn9tfMyEzbfJbuMNsve4m6d4mY+txehizxAngFgWW1vbDfDSQF15
5Enk14cXeszRo0e7w9vpQ/E0DFPUQBeExgh9EbGT+u5PTuAegTfMokWL5iOP
CveNvvvEMAzDMAzD6I9MherLBwFxDR2WXNx7/X5Ua3mGstTHPD4+n2Jdh1rX
f/31V3hOMTHZ+fbbb6Xwk0FOxVvf5bMWU/yb/rWYbX40ZuUOsqxSn1rabSOb
dZdp+BIvqlG3AbWesIdsPe6RvdtF6jfNlTrYLKWukz1pzIabudZjPqYWA40T
+Rrw2l2wYMHC/v377/Xw8Bj96tUrk4LW0MXrfXx8Oo0fP94NsTacZ8HoE8R2
ubq62t28ebMR/Kj13Z+cwP8r+Anb29uvh1e9ofoKMwzDMAzDMB8HrMckKfIf
dx97Nna+y40NETESI5VK/dHWVYjZhndF8+bNryDu5X06jM47pnTp0omzZs1a
ju/1s60BWYsp/k3/WszWOzRq0XoysmhGPRafIvvNd2jEsl1Uo14Taj/VW+sf
M3TWGmrYayZ1c3Cm5l0HUrsp+8nOw89gtBjc0/Bygebi7u4+FhoMasT7+/vX
FIvFPxSGboJ9YP2LGDXEJOA+5tgY5mMDPQP+R5jvmI+GmveD+wX5fNAw3+eP
zTAMwzAMw3xaQHuJiJYYz3O+7rb3xPMxEqn8x4/1ORFrw9WrV081MjIKRf3q
D8XF6PSY8uXLC1CDAq9/3VfWYop/MwwtZoELVbCwop5LfMhm1T5q1qUfmTcd
RoMcL9AEz3s0bu1JGu54jsasPUVdBo+jlrbbyXZT7vZflFqMLh8JfhTHjh3r
ZmNjs9nOzs713LlzbZAbUdh6ia4mNtaX+J6f61wzHxPoG5jrGzduHAedMYe8
VYNA53l98eLFlohTQ7/5PmEYhmEYhmF0IDfpul9kmwlLLuzzfxbXALlLH+O4
+K7w8uXLVvPnz1/UoUMHXxMTk1e//vprPHKR3hcn8/nnnytq1qzpj3Xma/9Q
1mKKfzMQLcaZKli0oJ6Lj9OweW5UvUl7Mm/cn3rMO0oOnvdp4hY/cnC/TkMW
bKHG3cZRv2VnaMLWB3rVYhAfAD/QW7duNUTM2KBBg7x27tw5RCAQlC9Kf12s
K5GjNG7cuI26e7EojsMwb4NYGPgeQW9EDJih5snhnjhz5ky7sWPHuoeEhBgb
aj8ZhmEYhmEY/YC1WrIo/ZdNex9NX+5+Z3VMvPRPlbroc5V09V3wvSFitx8+
fFhjx44dQ5FT36RJk+vwkPn555+Tvvnmm9TPPvtMmV2P+frrr9M6derkg9qg
CoXie9Ziin0zKC3Gepkv2XvcpFErD1KbXoPIsv1ksll3lSZ43KBBszdQE+sJ
ZD33INltvpfr+kqFrcVgXQcPUMSluLi4TOjbt+/+VatWTX/69GkV5A4V9boP
9y+Oc+TIkR6enp6jEKdWlMdjGMw5xMDg/wbiYp49e1bJkOt54f48depUR+gx
HDvGMAzDMAzD5ARqWr8KF1acufqqp/epF8NTpBk/fMzPjTgWvt/HZ9ekpKSf
8Z3+9evXm6xfv95+6NChO2rUqPGwTJky0T/++KOoVKlS6ahz/dNPPwlRGyYi
IqJieLRkGGsxxboZmBZzmiZse0gTN9+gQRPn0Z+1+tJgR18avmgz1W0/grpM
2UYjnM7RePfbH927V5cfhPpjqPOO+2Py5Mlrrly50hy1fXEffax7F3qPzq8D
j1hv8nf/TFGAOQ29D/8XXr58aYp7wFC9inAP4p6Anw3uCUPWixiGYRiGYRj9
ky5XfH35TnjHCUsu7kF9pY+Vq5QTOv8LfO8Ovwt89sb3i0uWLJnbvXv3o+bm
5kG///57rKWl5XM3N7epj5+FT+w74UQiazHFthmMFlPerAl1nn2Axm64TuOc
fanHCHuq0GgEDVlxXPOzHVk06EI12w6h+t1tqePknWTn8XH8YnBPYO2Jur3Q
XaZMmeI0bNiw7dBjoMtgbaqv9R6O7efnVwc10dA/XncyhQ3mGOb9iBEjtl66
dKmFodZMwtyPjY39fe3atZOQRwWNUt99YhiGYRiGYQybrFyltF889j+eutTt
9pqoOGn5j1lX6X3gu3Z89ob/IWooIQ9j3759/WbMmLHS3t5+6/FTV1ysbY+I
WIspts1AtJg19EdZCzJvNoCsBs+lFv0cqHKDttRk1AYat/EW2btdptHO52mM
ywUau+4S2X6kuBjMf+iSqDsGf6VevXodRF4S8pMQS6bvWBRoRMgXhGcwfEoN
dZ3MFD90sVfwiQ4ICKgMHQb/BwxV78Pcv3r1ajN42SCHiutXMwzDMAzDMLlB
qVJ/FhIhMp/tdM1j78nA0eIU+U+G9plXl8+Ez+fwLI2LizMKfBkzro/DcY6L
Kb7NQLQYZ/rLpBG1HLOC2o1cQK2HL6YeM7xo7IabudZcClOL0XkqIWcPXko9
evQ4Uq9evbt79uwZgHgxQ1nnoZ/QhO7fv18bPh5Yj3LNGKagYH5HRET8efjw
4Z7Q4HEv6DP+633ovGxwHyCXCl69htpXhmEYhmEYxjB5XVepLXKVbj6IbinP
UBh6fZT/RMRIhvabwH4xxbgZjBZTwdyKei4+QePcrpPtxhvk4OlXYB0mr1qM
Lh8pLi7ut7Nnz7bFd+yIOXF3dx8LX2vEg0GLMaR1ni6vEOtl5BRCP8JzffeL
KX5gLgHEvyDXR9PWBgcHmxmK9phTf6HB3LhxozHiwnSxaoZ0fzIMwzAMwzCG
j/YzsET+393Hn42dvebappcCoaVSqTLIz8Cv4ZrWxb8ZgBZzl2yWuFOletbU
d+U5rXdvQfWX/GgxWMPhe3V/f/+aixcvnte/f/+90GBQuxc5GvBIAljz4Xv4
wrhWhQn8Sjdv3mwzZ86cpYhl4PUok1t0sSXwHILWCE3j0aNH1aHrGXKMCTQi
5CONHj3a4/jx412RT6XvPjEMwzAMwzDFE/jERMVJ/1rpcXeVy/b7C2MTZGUN
xTsmB1iLKf5N/1rMNn+a6HmbxrhcJAfP+7muVV1YWgzWmVjDQXPx8PAYDQ1m
4cKFC5D3g/gAxJg8ePCg1p9//hnx7bffSkeOHLkF+UCGtj7FuhT5GfCzwaOh
xjIwhoUuFuz58+eWCxYsWLhx48Zxunmvbz+kD/UZOhFqmF24cKEV6gAaan8Z
hmEYhmGY4oFCqfr8+cuk6qhzve/kcxuRRP6zoa37XsNaTPFvha7FxCTJyvdb
7Bs0at1NNfSYArPpXoFeP2mLX4rz0afHhq04cx990/VTl9uDGBLUXcF366jV
fubMmXbIUcLfdHWsfX19O/zxxx8x//rXv9Tly5cXwEfDEL+Dh/6CdTTylbBG
hbeTgb53MHpEFweDOYK5jrmMOJidO3cOCQ0NNTJkHU+nnUI7gpc8fsZ8Zx2G
YRiGYRiGKShqNf0Lda5v3I9qPXHpxd1nr4d1l6VmfmeAa6qCazGak1UpMylF
IiFJioyUKhWp87cnUmtemy6TUGx0JAkE4RQVm0iZCmW+92cITaVUkiQ5niIj
o0gsk5NKXehnU+haTLIk/deF22/tgB6D+Jj30WuBj6D7nBPRLRwOpneddSK2
13wfwdvb9F3kG/Kh/byPPgtOhQ5dfsZ/0Y5b29A39BFrTaFQ+NOdO3fqI6dn
4MCBu7dv3z4sLCysAtZ12e815Gvgb7/88kvC//3f/1GpUqXS4eWLNauhrv/g
rb1q1arp0IzQf333h9E/2X2F8BgUFGS+aNGi+YgBQ0wJNEfUDDNkHQagfy9e
vLCAbrp79+6BUqn0W333iWEYhmEYhik54HNziizjh5MXX/WbvOzSrtv+0VbQ
ZwxMjym4FqNSkCguiDxcnMnFYz/FiqSkyteO1JQuFdLZPS7Uo21zqlG7AXUb
NY8E8clFqsWoVEpKlaVQmjyjKHQSkgoTaNvi0WRl1YI2+z6mlHRlYR+i0LUY
1ASD5oEYFOQEvY+IuBTTc7fCegyb6Xvu8r3wLhHxKaZvb6PZz3v3kRvQF/QJ
MWfQJrAOXbdunUO/fv32rVixYiZqVsNvJSdtBR4yK1eunPHTTz8JocUgNgYx
Mp6enqMMdR2IWAEfH59OI0aM2Ip8Kn33h/n46Hx48bPOCwm5dleuXGkOzQW6
44EDB/pA1ygOXs+6On6I50HfDx482Cs2NvZ3Q9VDGYZhGIZhmOKL5rPnv5NF
6b94HQsYP8PxypZHz+PrZWQqv0LcjL779poCazFqpZwiA85QixrVqYbVYHoa
EU/K/Ega6kyKDblDvZtUpTJlKlD3wWNp8TovihelFJ0WoxkIqTieju/2pLO3
Aig1PbPQD5GSFEsuk7qTqZk5OR3yI0maorAPUehaTG7B2ioxOfW3dTvuz1+3
88H8JFFakdUn0uVkREVFlfX29u49fPjwbRMnTnS+dOlSC+RpwHviXcdGzADq
yXz33Xcp0GLAF198kWllZXUZeRKGGEeAc0F+UmRkZDnEO0Bn0uVc6btvTNGN
uW58MScxr6FZYP5Cf0RdsAkTJrjAjxq6DOYDtMT3zX1DQZeXFBgYWBF+wvhZ
VzNJ331jGIZhGIZhSibw7Y1PkpXx2Pdo2lzn6+7wkclUqL5Uk0HoMYWgxaRT
+OOTVMfYiIzrWNNjQWy+tBi1Io3C7h6kGmbGVLXNCLofEExCsVSb81RUTa3K
oMjAy9S7VTOaue4oJUnSCv0YJVWLgZ6Ylq745sLN8M4OSy7ufRqcWAsxK4V/
nKzv0rEevXbtWtOpU6euHjJkyM59+/b1i4iI+DM3NWJQV2bAgAF7vv766zSd
FgNKly6diHgZ5DoZ6lpWV59427Ztw+/du1f37fwrpnii0110Ywk9BTEi4eHh
f0F3Axjz3r17e7u6utphDkB3wTaYr4aoH74PnB9i18aNG7cReXfQGfXdJ4Zh
GIZhGKbkAz0mOl76l9ueh7OWu99ZHRwmrKRQqAwhprzItBidT0pUVBSlpMop
VSqhuJgoChcIKDw8guISkig9Q0GatQgplQpKjgmhG4ddyNyoAtXqPJZu+T2m
yJiELL8YnSeNKJlitF4yAhKEh1N0bDxJZGmkub5vdUqzT0UmiYVJFB2VtX14
RCQlJCb/fUwVjhn9ii7sXkmVzc1p8MwN9DAgmBJFr/WfPB5TrVZRRnoqJcTF
aM4va9uYuASKjQqntRNLnhajVKo+fxGSXHW649Wth84EDZWmZnxf2PFe+M4c
uRioR+3o6Ditb9+++9euXTsJsSxYl+b2O3Xk+LRq1erCl19+mZFdi/nss8+U
tWvXvo96S1grfqxrl1dwDbZu3TrC3t5+PfQn1mKKJ9nHDTEtiA8B0CXgD4Q6
7L169ToIrQLzG/oLtBnExxQ37SX7OeNcoZk+efKkKnKq4DXM8TAMwzAMwzDM
x0Kzdv8sIkZi5LTl3tKlbrfXhESILIoijiCPFJkWIxUl0PYlY6lli1a09eQt
8t6+nob17UoN6tam2nUbUr9Rk+gU8oLkCpIkx5HrzCFUv5oJlfrqK/rPT79R
1Zr1qPOwWRQal0SKzHSKCPKnDctnUY+ObahBvbpUv2ET6tZnGLnsOEaCOOE/
8TPQYTLSKPTpbVo9byJ1bGNFdWrXpkbNWtII+9l0+uYTkqRlaHWijXOGUW3L
vzTHLEW/lDWi+k1a0AKPEyRMSSNlHo4JbUcuFdKt03tpzMAe1LB+PWrQpDn1
H2lPm3YdovmjOpCJqVmJ0WJea4t/aubyEszn2ERZWZW68Oq262ofYZ26a9eu
wZq2a8aMGStv3rzZCGtWrEtzq0dgO+ynatWqT/7973+r4BUDTQb8/PPPSZUr
Vw5ADWDoHR/j2uXveqv+jfNGnRzkdaCvedGimKIne4yLTn/AGOnycBDPhHwj
5Jzhb9AjRo0a5Qnt5fbt2w2Qs5OQkPAL5iryj3Rjm32/xQ2tZ5pmrvr7+9dE
bBrnJTEMwzAMwzD6QqlUfRYaKTZb5n5n9arNd1cIoiUm8EnVY5+KTItJSY6j
DVN7k9GfZWmgjS2179iDbMY70JRJ9tSjbRMqV+4vamZtTwERiSSTpdD1kztp
8aTB9Hvp0lShZiuav2Qlbdl3ipJEEop++YCmDO5ElpaW1KbbAJoxZx7NmupA
HZrXp0pVatKkVbsoJlkGGUYbyxL54jbZ9mmj2b4Kdeg5kBwmTKBh/btT1Yrm
VLelNZ24HUgisZiuHttG4/u0RK4KNe4yhFasWU9nbgWQLDUtT8eE9vP8+mHq
2KgaGZtVoT7DbWnBwoU0xX40tWvdlto0qkrlKpiWCC0GOkxCctrv2w8/dZjl
dG3zi5DkKoWlKWLthvgUrNvOnz/fGnEgI0eO3HL06NHuiG2BX0xe16VY98Gj
ombNmv5lypSJrlixYmCLFi0u1a9f/w68f69fv94Ea2BDjzvQXRusbQ8dOmQN
jQrXide1+gdzB2MBHQX5Q5inwcHBZnv37u2PWuvIN0JsF3SX/v3778Vchh6D
R11cTHYdp7hqL28DPfXy5ctWNjY2m69evdoMz/XdJ4ZhGIZhGObTBevWYIGw
0iLXm+uct/st1Kyfy6v0p8cUXVxMchxtnN6Hfiv9E1Vp1Jl2+dygiJh4SkpM
oAC/S9S7cUUyMqtOe64Fk0yupPSURHp6zpMqmphQ/V6T6fmrCJLK0rTxNd5r
J1NFMxPqOnoh+T0LoSShkJIT4+jh9ZPUs2k1qlSrJR2985LSMlWUKk6kfY72
mu1Nqf/UtfQ4KIwSk5IoIiSQti0bT5Wr1qAR8zdTXLKEJAmR5L3ankyMTWjU
4h0UFpWgrack0+zjYB6OmZIcQ+un9CHj8hVo+Dx3CgyNJKFIRLERIXRk00Kq
9Nev9MsffxV7LQaxL0nCtF/3nnxuM2XF5Z33Hsc0lWcoSxVGbpKuTszDhw9r
LF26dA7qI7m5uY3Hmjb7WjWvYJ0Mv9+dO3cOOXPmTDvUX3r69GmVefPmLUb+
R3Hzw0V/kVMF3xyscxFvkR+Niskd2TUwzE/MJzyHjoJ8McR5QH9BDp21tfUh
1OZCThFiuNasWTP55MmTnbENdAhsD+0le82jkjhuOp9t3Le4DvAcNmRPJoZh
GIZhGOaT4V+ZCtUXz18lVZ+79vrGjXseztTmeKgKL8cjDxStFjOjD5UrV5as
JzpTeJxIm8uD2tXihChaMaYDmZiY0mrvu1p9Qp2ZSqE3dlNlMzNq1H8WRcQJ
Ya5LiVFBNK5jLTI2q0W7Lj0haUaWfwyQJcfSrqWjycTUnCY6H6EkSSolaLYf
0x7b16a9159TamZWHpFKkUExwXdp1bLltGHXSRKmpFJ6SjKdXD+FzEzNaPwq
b0oUp+XjmDKKj3hCA5takpFpHfK+HURpite5SyoFRQXfp76NzahsufLFWovJ
iodJ/X2fT+Coycsv7bz5IKoVvHsLur7S1VcJCQkxxjoWHrvz589fBJ9a+GUU
NF5Ft5bWrYeh+eA5vIBz4/traOjyt2JiYv5ADgy4c+dOfWgDxaGejqGB+YD5
h9gV6FqYb/gZugnipaCbwC939+7dAzE/MScRAzN69GgPaC+oL43XQ3/Ba3S+
uvgdfn47J6ekjw/OFeeNOQntCteB/aYZhmEYhmEYQwFxBKht/Tgwvu7M1Vc9
dxx+6pCYnPZbYXpu5JIi12KMjY1plscZEkrlf78G+Utu0/uQqakpLfW6TqLU
zJy1GNQ5enGJWlgaU/nKrenYlTsU/CqENOt2LcHPH9OxjbOpQgUj6jBuFUUn
JFJkELY3IZNa3eh+aMw/NZ20fr4ZJBaJSJIi03q95KjF5PWY8QkU+fwcNTE3
JpPa3cg/LNsxSU3C+AiaN6Q5GRmbFEstBnMVsVxRcdLyWw8+mThlxaWd1/0i
26SmZf6nIOsrnacG1rk+Pj6dxo4d644aK76+vh3wu6KMV9HVC0aMDL6/L4pj
FDW4Nlj3Yv3v4OCwbtasWctx3fC7vPjplGRwLXT+t7g20Kowr+DZgusGjQCx
GxcvXmypq1MFHeHgwYO9kE+0cOHCBbq60i4uLhN27NgxFPt7Oy6Gr/U/4Hoi
hw5aFeLPDNkTm2EYhmEYhileaNbwn2vW7GVikqQVohMLhFFYtLjiicsvBw2f
ffqM18lndqHRYsu87icmSVY+WZL+az59Z4pcizE1Nftbb9E1qTCONs3sp9Vi
lnhde6cWg30LHhylGn/9QaW++ZEsKlWm6tWr/0O1alTJ3Jh+K1uBWg1fQJEx
Mdrta5oYk2nTwRQcFU/vK6+dkxaTn2OG+R2m6przN232v8eUJMaQk10X7XUo
bloM1pjpcsXX8ISBR++cNdc33X8a26ig8TDQCrDmvXv3bj3kCg0cOHA36gRh
zfsxvkPHd/XIV5o2bZojYhyK8lhFiS4XBDFFFy5caIU8GsR0PHv2rJK+PXDe
9rJFP3Wew+gXYnugkQD8DWt2+NlC38B2eA7dA8+hh+A5xg3PkXOG59k1EWgA
ungnXXwK4jKgsXTr1u0Y9CpcE7wW+W/QWuCFjGNAO4B/M3K/MP+yx8Xo9Bvs
D783dF8hfY63zq/41KlTHZGbxDoVwzAMwzAMU5hAh5nsdu1sn4WnQnsvOBVW
EHrN9xF0m30ipoXDwbSO048lWc/3Cc/rPvot9g1auP3WDugx+Tifj6LFLNt9
g8T51WL8j1JNoz/p57+qkd2kqTR/wQJa8BYLlyyjTfvOkEicrNVRapkYk1lB
tJi8HFOUTGH3DlE1aDE5HBNajKNtp2JXR0mpUn2WLE4rfeVuRPsZjle3rPa8
uywoNLlqRoYy33k9eB3WZ/CA2bBhgy3WxMuWLZuNNTHWuR/LhxbHefnypSny
obA2/xjHLOrz0fnGPHjwoNbw4cO3ofa3LoYD17wo85d0uotu/9AroKvovGyh
u6AOuZeX1yD4MGOsEZPUu3dvbwAtCboHtDFoJIiTwvPt27cPw3N4seA5tDs8
HzZs2HbsHzqarhaRzoMZ8St47uHhMRpazIfiYtBXaD/YjnNp8j//oIGhXhLm
GmAPI4ZhGIZhGKawQTwMdJiR627SePe7emfUuptq6DGIj8nH+Ri0FoN8oaig
K9SqsgkZ1+hIlx8Gaj10NeumLDQ/C5OTKVkoIok0jVRK+T85SjU6092QaFKo
/05S0uYoJScmUmKSiBTKd+co5emYinSKCDhDjcw051+rGz0IfTNHKTlOQDP7
NaIKFYyLhRaj9W9Jz/zPq3BRRc8Dj6fYL76w78CpwJGxCbJyyFXKj0+vLi4C
ugdiEEaMGLF1woQJLojl0MUefOx1G/SBFy9eWJSk2i64hogPQVwMtAnEKEBz
8Pb27v3kyZOqhZmPlX28oG/ofGlxTJ2XLTSRLVu2jMQ6HToK6lYdP368a3Yv
W1BUcTEcw/JxwHhhnFH3DLoXazAMwzAMwzBMUYC8IMSjQAeZvP2h3kE/0B/0
Kx/nY9haDHx0o4PJtnMdMjarSTsuPCapXPk67kSt9eNNjgmn4NBwEsvkpFKp
Xnv31iQjk2q09dyjv7dXqzIoJuQezbIbTxMXuFJUkpjSXmsx6MfYlfspUZya
j2MqKE7wiPo0sKAKJrXowM0X2tpKWdcmkwTPb1DX2kZUpqxh11HSesJmKL+C
5nLqSkjv6auubFvufnu139PYxhJpxg/58TLCPrEexvoY2gDiHgYPHrxrz549
A7Be1qd3rm7dXtL8LHTXHNcWGgniT5YsWTJ39uzZy6BpZNdA8uPJo9PVsObW
xZZAT5s0adJaaC+omQNdBMfCNsnJyf/FNcZ20Fag1XAd7pKBzhcb44oa635+
fnU4tohhGIZhGIYpKliLebMVqRajaWmSJDrkPJkqmhpT55Hz6F7AK0pKRmxK
IoU896fVU4dS607WdPB6IKVmKF/XtLYjc01/Oo+aT34BLykhMZEiQ1/QbqfJ
VNmyMvWfvp5iklNILhXSGY9ZZGJsTH0mu1BgSCSJUmQkEyXk6ZiSpChabdeN
yv/5Fw2d7UbPXoWTZp2vPeYux8lk8ecv9MsfhllHSafBxCel/nHNL7LN4g23
nKeuuLzj+IWX/aHLZCqU+co1wHob627EaDg5OU3p27fvfjziuSGsx6EVrFix
YiYe9dmPokSnm0BzQswJfg4MDKwIzaRPnz4HdHoMajLpfGixtoZ+guc6HQW/
x3Nsh+0R/4LxRH4R4m2g7yAHCH4/iJHQjW32vCWmZKHzRUbuGbQ3jHtxqw/P
MAzDMAzDFC9Yi3mzFbUWg9iSmJcPaMqgTmRZsSK17NyHps6cQ3NmTqF+XVtT
lcpVqNvIOfQsIpGUKjWpNNtHBt6mcb1akbmZOVl1tKZxtrY0pG9XqmZpQXVb
9KCjN59TWoaSlHIpPTy1iaqZG1E581o00nYyOe88SUKxJE/HVMhl9OjCHmpV
pxKVN7Kgzn2H0uQpU8hmaH9qYdWGurWpR38ZmZHj6/rdhdzypcW81mBKxSel
lrnuF9l6xaY7jg6LL+zbdfTZ+JAIsXlqWua36nzGwuhiLxD/gjgYxMMgLgaa
gKHU+EH/UJMYj/ruy8dC68Wcnl4KXjmIWcHaGZ4rY8aM2YRrcenSpRaIcXF1
dbWDXuPu7j4Wz5FLhr+PHz/eDdvrcpJCQ0ONkDeU3aPXEMaWKXqgvaCuFOKh
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
TCrVpalLXMjn7AXyPX6AZo/rS0blylHdtoPp7ssYynydL6RWKSkh/BlNH9SO
qtZuQXsuPszSS5TpFP74JNUxNiLjOtb0WBCr1WLyegxs//C8F1nVrkrth8yk
5xEJmv3kKVcpq6Z1HrUYrLvgAREWFlZh+/btwwYOHLh7zpw5S+/cuVNfKBT+
VNK/C4dfTM+ePQ/jUd99YRhDAPFvT58+rQJ/bpFI9GNJ1WEZhmEYhmGY4knB
tJjTNGHbQ5q4+QYNmjiPylXvQd0mrqQ67UdQlynbaITTORrvfjvP3r0fs6Z1
di1mqdc1iktIpriYKAoXCCg8PELzPInSMxRvxthoflYqMkkiTKLoqEgSaLYV
CMIpOiZOm+vzpteKWpt3JEsRafYbrd1vWJiAIiKjKD4x+e99w4slOfoVXdi9
kiqbm9PgmRvoYUAwJYqyvFxyainJseQ6vT9VtrSkSU77KCwmieTyDJKnp1Jo
4H0a27kOVTC2oHVH71NKelbuVUaqmK7td6KalSpSn0lrSRAv1uYXvUuLyesx
EEcjjhOQ08ReZFmpJq31vk6StDzpW3nSYnTffcfFxf125syZdra2thtGjx7t
ceLEiS7wiEB+wqewBsP5wwsHj/ruC8PoG9zziIOZN2/eYldXVzuOF2MYhmEY
hmEMjfxqMeXNmlDn2Qdo7IbrNM7Zl3qMsKc/a/eiFj0HkXmDLlSz7RCq392W
Ok7eSXYeefOL0Y8WY0pz3I7Q3i0uNLxvV2pYtzbVqduQ+o2aTL7IF9Ll2qjV
pMhIo5Cnt2nNginUtV0rql+vLtVr0Jg69ehPy1x3UWB4PGW+9qpB3k5i1Eva
vWEZ9e/RiRo1qEu1a9ehpi3a0AiH2XTq+iNtfo8kOZ42zhlGtS3/olJflaJf
yhpR/SYtaIHHCRKm5BwfI5Mk02HP1TR3zgK6+SKa5AqdAqTWaigbpvYmY2Nj
mrP5LAmlcgTFkDA2hGYNaklmFevQtvPIIVJmveIdWkyej6FpSrmMHp3dSrUq
mlPrIXMpNE5IebGNya0Wg3wkfN/94MGDWgsXLlzQv3//vR4eHqNfvXplglop
n4IGowN6FPyIOQeD+dTR6bPISbx8+bIVNNmSHhfHMAzDMAzDFD/yp8WsoT/K
WpB5swFkNXgutejnQJUbtKUmI9aTzdqzNNr5PI1xuUBj110i22ISF1O+3B/U
fcAIatuhK9mMs6cpk+ype5vG9Ge5v6i5tQMFRCRqc21UygyKeH6Dxli3JAuL
StTBegjNmreQ5s6cTN0021tUrESDpqyhkFihNt5EJoqnXcttqaqlBTVq3ZXs
J0+nubNnks3gXlSzckWq36o3nX8URhKJhK4e20bj+7Sk0qVLU+MuQ2jFmvV0
RqsD5RxXoo23kYgoOVlIcoXyH71D84M4PoJWjO1EJqYVyfHAbW1silqRTmH+
PtSsqgXVbDuSAsLj/84fepcWk9djZP1JSXGCpzS8TQ2yqGZFpzXnJ1fmWoz5
oBaDtRb8H6C5uLu7j4UGs3jx4nnQZPD996daqxbrT6w7WY9hPlXw3oBaYshN
ghbDtasZhmEYhmEYQyW/cTF/mTSilmNWULuRC6j18MXUY4YXjd1wM0+6iyFp
Mb+V/okqNexEO32uU0RMPCUlxlPA/UvUp6klGZnVoD3Xgik1U0UycQJ5LR9H
5sZG1GP8MnoYGErJQhEJkxLo6d1zNKBVDTK1rE2bff1Jmp5B8RFPaZBVNTKt
1pKOX39IcYnJJBQmU5QgmLxd51DLNh3IxfsaiWXpJEmIJO/V9mRibEKjFu+g
sKiEXNdT+qepSZmZRi/unqZO9SypaqNudDkgkjKUaspEftKe5WRhakq9prhS
bFLK37lU79Ji8noM3d9TkmJo3WRrMjWzoJX78uTD804tBuss5BxBbzh27Fg3
GxubzXZ2dq5nz55ti9wcaBCfUizM26B2N7yK8ajvvjCMPoD2gveDsWPHukOr
ZR2GYRiGYRiGMVTy7RdjbkU9F5+gcW7XyXbjDXLw9CuwDqNPLaZcubLUa7IL
hceJX2sfahInRNGKsR3IxMSUVnvf1eYSJUQG0qg21cnIpDrtuPiEZBlZOT6k
rRMdT/tWjScjI2MaPG8LxQvFFCu4Tz3qViTTGu3orF8AiaRppFCqSKVUUqo4
kcLDIylZkkpKlZrSU5Lp5PopZGZqRuNXeVOi+P3evf/b1KRSZFBE0AOaN6ob
WVaqTtNdvF/Xlkb97gTauXiENh9rhvtpSk6R//PKXGsx7z+Grsk153LKbbr2
WKOWelGCKDW3J5GjFoMcg+Tk5P/evn27AWrTDho0yGvHjh1DBQJBeay/PmUN
Rgf79zKfOqiZtGvXrsEnT57sjPgYfl9gGIZhGIZhDJW8azF3yWaJO1WqZ019
V57TevcWVH8xBC3G2MSYZnv843mClqL5m9v0LC+ZpV7XSSSVUWTgBWpe0ZhM
anYhP9SCziZAKNNTyP+YC5kYGVHjAbMpIj6ZRAnhtHRMFzIuX55a9xxObtu9
6f6TQIqKiSOxREqZCtXfGkaBtBh1VqxK2LO7NH9cb6pSpRoNnuJEgRGJpHhd
Q0mcGEOO4ztpfYqdj/qTJF35z8tzo8Xk4hi6pkiT0P3DazXnYkpd7J0oJlGS
2zN5Q4vB99rINQgMDKzo4uIyAXEfK1eunIEcBKy1+Hvvf4BHDupG4VHffWGY
j4nOLwm5i8hT/NT8ohiGYRiGYZjiR561mG3+NNHzNo1xuUgOnvfzVK/akLWY
rDpK10mULZdGKoyjTTP7abWYJV7XSCSRUNj9w1TD2JjMmg6h4Kh4yq5AqDNk
9PLydjLX/L1aJ1sKi0kkZWY6hTy6QlNH9qJqlSzJ3MKCKlerRR17DqRl67bS
g8CwLF9gdf61GNRhykyXUuB9zZgM6EhVq9ag4TPW0JPQWK2HsK6Pwvgomj+k
ueZ8LGjLhWCSZmSr9vQBLSa3x9A1lVxKL855krnm2rUYtpCi4kW5Ohd6rcX0
nXAiNCQ8yRz5NgcOHOgzbNiw7ZMnT15z5cqV5omJiaURJ8NrrTfBNcF6lH1K
mU8JzPeXL1+aLlq0aL6/v39N5DHqu08MwzAMwzAM8yGgefRZcCp04hY/6azd
j1P0DfqB/uhDi1m2+01fk5y1mCNUw8SYTJsOfqcWY2ZkTNU622m1GLU2lkRO
CTHhdOeyL7msmE8De3aimlUttblPzbsOpfP+ISTPVOVPi3mtkTy5cZKGdrWi
qtXr0sTlnvTidS2n7P0TxkfSnEFNtVrMtksvSZZbLSYPx3jjWlzcqvWmaT54
PkXFC3M1HgQtJkYi6z56b/Re71ODp0yZ4jR06NAd+/fv7wtdRi6Xf8UaTM4g
h8vNzW08HvXdF4b5WEil0m+RlzR//vxF0dHRZThWjmEYhmEYhikOxCTJyg9Z
fuah0+Gnvpt8gw4XhM1ngr0Lug/0A/1Bv/JxPkWrxSBH6cUlsrI0IZOanelu
SPSbOUrIyzmylkyMjanpoLkUGS/M0mIUmaRQKikzI50kYiHFRUfSw5vnaObI
LvRXeRMaNt+T4oXSfGgxmn1npNGLe2doSKdmVLVmI1q40ZsEscmkVKn+Z2tR
QjQtGdVacz7m5H76GUnl/2zzbi0mb8fQNZU8hZ76umnjYtrYLKPoBHGuxgMv
DY9KlDVoNyW1Qyfrs87OzhORn4Q8JV5jvR/2i2E+JfB+AB0G+Ujx8fG/cg0x
hmEYhmEYpjiRLEn/ddGOW9uHLj/jP3jp6Sf5RfP6h+PXXryKxwLuxx/9Qb/y
cT5Fq8XI5JQYFURjOtQkI5NqtPX8Y5Jm8+6VCWPJa+loMjIyoZGLd1K8MIVS
xQn0xP8eBYbFUoZC+XpTNSnSxfTo3Baqqtl304GzKSJO+LcWg+ONXbmfEsXv
97tVqxQUG/KIpg3uQJWr1qUF7ocoMkFMKlXOBZC0/jfTemed6543z/VdWkxe
j6Frmakiuua1ROsX03f6RopLluZmONBUEdFCWeehrlHnL91uhxgPzrnJHchP
cnJymoJHffeFYYoS6DCIgdm5c+cQaLUZGRlfIl6OY+YYhmEYhmGY4oJSpf4M
ugfiUJAXlF9ikqQV4pJlf+KxYPuRlUd/0K98nE/RajGpGdraR/tXO5CFqTF1
G7uE/F/XtE5OjKOHN05Rr2bVyKJqI/K69JQkKRJ6emEXtWvRlAZMWEEPnr+i
xCTUtBZSXGQIndq6ULMfM7Ke5EyxSRKSS4V0xmOWNq6mz2QXCgyJJFGK7B3x
J2pKS0miI+unUyUzY+pkM59uPwqk2Lg4io+P/5uEhETNPlJJs3bRaj3HtXE3
pjR2xb43tJ6ctZi8H0PXcJ32Lh+tvXZTXU9Sckp6rsaDtDlKKbK+DkdDBVEi
E15b5eFefl1rirUrpqSDeJg9e/YMcHBwWBcUFGTOc55hGIZhGIZh9EoRazGZ
pFJmUlTQHbLv25YqVqxEHXoNpdnzFtCsqROoo1UDbY3ncYs3U0SiRLOtguIF
T2ja4I5kqdm2ZafeNGHKDJo7ZzbZ2gymRrWqUI2GbWnXeX+SyRWklEvp4alN
VM3ciMqZ16KRtpPJeedJrc7xP02tooTIZzSydVX66fvvqXbzDjRg0BAaOmwY
DcvGqDHjyWmHj3YfSrmMnp7botm/GbUcMpcEccK/azjlrMXk/RhZO1OTME5A
cwZZkZlFddp2IYBkGe/OZ3qr5VjTmvkw8NIJCAiojEd994VhigJdXhLqJcGv
Nzg42Ixr2jMMwzAMwzCM3smzFiMTJZLXSltq3tyKNhz1I0ma4p+/iRNpzyp7
srJqTq5H7mn+lvlGXee1C6dSl3atqH7dOlS/YRPq1mcYOW87TKExSaTQxoio
tXWUwgPv0bol06lHp7bUQLNtrdp1qGmLNjR8/DQ6fP6ONmZEpdmvWq0kYUww
OU0fRQ1q16AGzdrQFCcvShLnkN+jVlB85CMa0b4hWZgYkXlFS6pUqdL/UKNO
Qxq9yJMShCmv843uU//m1cmydke6HBBOGa8NetUqOUUFXqSuzZpQ0y5j6XlU
AinzcQztvpQZJHh6iTrUrkjVrQbQg9DYN3x1PtBYi8kn8Inp1avXQfaLYUoi
iH0JDw//y8vLaxAeoTlyPTWGYRiGYRiGMQjyrMWolEpKESZQZGQkiaTpb/ig
vPNvr/14JcIkio6KJIFAQILwcIqOjSeJNI2UqjeKQWtjaSSiZIqJjqJwzbZh
YQKKiIik+MRkSpNnav1jXm+sjaURJ2uOqdlfuGabBKGElMqcc5RQnykuKoIE
YWGafeaMQBBOcUliUiiztCGZKI62LRpFFS0q0dzNpyhJKs+qgwQPm4xUitac
a2R0vNbbRp3PY6SnJJHPpjlkaVGRbBZvpziRLMdaS+8aEtZi8gc0mN69e3uz
FsOURMRi8Q/r16+3nzp16mrN+04F9vJmGIZhGIZhGIMhz1rMp9ZUinR65XeK
OjWqQQ27jCa/l9Gk+IAPb14aYm+igu+RTacGVL1RZzp9/xXJFbnOT9J2kbWY
/IE4gRcvXlhwjhJTUkDMC+YzdBjkJT1+/LgadBidV6+++8cwDMMwDMMwjBbW
Yj7U1FmxMXudJlPNGjVp+jpvihXKssXmFGTXqCUVQwecp1LN6rVo6pr9FCdK
pTzumrWYfIJ6vqihxHV9mZIAtBbUq7527VpTDw+P0fClzszM/ALxMKzDMAzD
MAzDMIxBwVpMLpquTvWsEd2oefu+5HM3iNIzlQXeL3x0gu6cpL7tmlOPkbPp
MXxi8h5zw1pMPklMTCy9YsWKmXjUd18YJr/oalPDC0YgEJS3tbXdAI8YePbq
u28MwzAMwzAMw+QIazG5aq/9hwNukfsGNzpy0Y+kafIC71WeJqV75w+T2wZ3
uhUg0Oo7+Yi2YS0mn8Anxtra+hD7xTDFFWgwyEWCNy/iYBAX8+rVKxPkKLE/
DMMwDMMwDMMYLKzF5LZp/YczKEUiIWnqm57F+d6lSkXpqVKSSFKyvH/zt0vW
YvKJUCj8afPmzTZ41HdfGCY/wBvm8uXLVnZ2dq6nTp3qCC2Gc5IYhmEYhmEY
xuBhLab4N9Zi8gn7xTDFDV0uEuJeoCGmpKR8d+bMmXYnTpzoglw7joVhGIZh
GIZhmGIBazHFv7EWk0+Q23Hjxo3GeNR3XxgmN0BriYqKKrtp06Yx7u7uY6HH
yGSy/+jiYfTdP4ZhGIZhGIZhcgVrMcW/sRaTT+AT07Nnz8PsF8MYKoiDQT1q
eMEkJCT8At3w5s2bjVauXDnDz8+vDv6m7z4yDMMwDMMwDJNnWIsp/o21mHwS
GRlZrl+/fvvwqO++MAyA9oL4lvT09FKIdUFN6hcvXlgsX7581sKFCxcgDwl6
DLQZ6DDsC8MwDMMwDMMwxRLWYop/Yy0mn8AnJiYm5g/2i2H0BbQU+O+i/jS0
F8zFuLi4386fP9/6woULrSQSyfdBQUHmqFH9+PHjahwHwzAMwzAMwzAlAtZi
in9jLSafIP4A3qcikehH+KHquz9M8Qfaii5WBY/QV1BvGh4v0FkA4rDwO/i8
IP7F39+/5t69e/vDuwhzETrMtGnTHPfs2TMA8xP6Cx4RI8NxMAzDMAzDMAxT
ImAtpvg31mLyCdbCR48e7e7k5DQFOR/67g9TvNBpLahphEfoefDSFQgE5eHt
Ap0Fni7W1taHBg0a5IV4l9jY2N+RF9e9e/ejFy9ebIntfXx8Oq1du3YSalMj
/wjzMj4+/lfExLAfL8MwDMMwDMOUSFiLKf6NtZh8ghiFBw8e1Bo8ePAuxC3o
uz+MYaOLo9J5tUB/uXTpUouNGzeOu337dgP8HvEtvXr1Orhs2bLZ0FmwDbyh
3xUXA/0G+UnYFjoMay8MwzAMwzAM80nAWkzxb6zF5BPENWANvH///r6IbdB3
fxjDAXMju06i+3nfvn39Vq1aNR0eLsgnOnDgQB9PT89RAQEBleH7gnkEnQUx
MOxDxDAMwzAMwzDMO2Atpvg31mIKANbYWFNzTZpPG532glgVxL7g56SkpJ+h
vaxbt84BP0Nn2b59+zBod8g1gtaCbfH77PMnu2cMwzAMwzAMwzBMDrAWU/wb
azEFALEMiGkIDAysyDVqPh2glUBLQV4QwM/QV44cOdIDsS7wasFzeAkh70gX
G4PfIz4GP7PewjAMwzAMwzBMPmEtpvg31mIKAOIadu7cOQRrbqy39d0fpmiA
boI6RLraRfg5NDTUCN7N586da4PYlkePHlVfvHjxPMTCQG+BPoM5wdoLwzAM
wzAMwzCFDGsxxb+xFlMAsCZ/+PBhDWdn54lcS6nkAA9caCjIP0PsE3j69GmV
w4cP97x3715daCwnT57svGjRovl41Gk0yEWCPsceugzDMAzDMAzDFCGsxRT/
xlpMAUCsA3KToMPoYiE4/sGwQEwKvHBRjwjaCsYIcSx4jtrReA4dBc9Rowj6
Gsby4MGDveD18uzZs0rQXnbt2jUY9Y2uXbvWFPWNoLkkJiaWhg7D2gvDMAzD
MAzDMB8R1mKKf2MtphDAevzs2bNtUR8Ha3l99+dTQZc7BG0FQHfBc2gq0FYQ
z4JYlVmzZi3v0aPHEXjnQpdBHpG1tfUhxLVAj3ny5ElV1JLu27fvfrwW+9q2
bdtw5J+FhYVVgN6G32Ff0GFYb2MYhmEYhmEYRo+wFlP8G2sxhQDW6evXr7eH
XwjW6/ruT0lF55mLuBXoX9BIgoODzVAXGiDuBTWhoan07t3bG9oYtslrXAzi
XLANYl/wnLUXhmEYhmEYhmEMCNZiin9jLaYQwHo+JCTEGHEXyFvhXKXCI3uN
Z1xXeOaiLjR8WqCtwMfF3d19LOKSUNPo7bgYHgeGYRiGYRiGYUoYrMUU/8Za
TCGA9T7yYxBHAT0AHiOIucDv9N234gyuH7x4kCeEeCPEw/j6+naAb8v58+db
41pDb0EMC35m3xaGYRiGYRiGYT4BWIsp/o21mEIEmgzyYaZNm+a4cuXKGdBj
OC4jb9cP+gs0F2gr0La8vLwGIecIOWCIg8HfoMuw9sIwDMMwDMMwzCcKazHF
v7EWU8ggRwZxMai7g3wlaAaxsbG/c63jDwMdRiAQlD9w4ECfCxcutIInDPQX
xMXEx8f/ynFGDMMwDMMwDMMw9E1UbEr/AZN8Iv2exKqhx5REYuKlJfbcNKg1
Y5eqGcMXmrEsbwBzqtij85eF9gJPWD8/vzoTJ0503rNnzwBd3WuJRPI96vF8
6toMrhWuA+KHkIuEa4Za0qhvdP369SbIP9Jtx/FFDMMwDMMwDMMwWr5IEqbV
muF4dY9mLR/Ub+LJsJLGwMk+oWPnnXuOR333paiADqMZwx2asfzVAOZUiQL6
AeI6zpw5087b27s3fE1iYmL+2Lp164hTp051hDaDOJro6Ogy8JpFHAi0GugS
eI5HPMfv8Rzb4TmIiooqi99By8Bz5O3oagUhfgT1g6D54LU6zUenaehT18h+
fGgtN27caDx37twlmzdvtkHf0WeuHc0wDMMwDMMwDPNO/qVUqr7SrOF/Q0wF
clxKIjHx0hJ7bgBjBx1GM5ac/1EEQE9AfIwuJgY1ftzc3MbDfxY5TPCXGTly
5JaePXsevnTpUgvEiLi6utr16tXrILbD84sXL7bE30eNGuWJXB28ZtiwYdux
zd27d+thP2vXrp2E59u2bRsuFAp/ev78ueWWLVtGHjt2rJuu/jO0GtR70pfO
ofPiRR4S9Bb0C1rMoUOHrJGHhOuj7/FiGIZhGIZhGIZhGKbkoMtfQvwHtAho
E3he2HExiDeBFrNp06Yx8K1BPA60jj59+hwA/v7+NaEPIUYHOg50mqLQZnQ6
lC7/COzevXsgvHjXrVvngL6i/zg/XAuOg2EYhmEYhmEYhmEYpjgCTQP6CjQY
5PzocpbCw8P/gl4DfQR+wjY2NpvnzZu3ODAwsCL+Dk1EF7+TH10Er4EOpPPK
ATdv3mzk6Og4DfE5+D30l9DQUCPE9rAXL8MwDMMwDMMwDMMwJZns+gq0l8eP
H1eDjw1iZqDZ+Pr6dkANI+QxwccG2gxiWrJ7zmQHWgq0FV1sDbSX27dvN9i5
c+eQBw8e1MLfzp8/3xq+xUFBQebYp64fHAPDMAzDMAzDMAzDMMynhC5fCjoL
NBLU3obHMGJYUMMInjPQZlauXDnDx8enE7bDNtlzpRB3A0+bhQsXLnjx4oUF
XgO/GhcXlwmPHj2qjhgZvEbnUcz6C8MwDMMwDMMwDMMwTBaIe4FugjgYPEJH
efr0aRX46l67dq0p4mZu3brVEP7AY8aM2QQPYWgsR44c6QGtBs91+gw0Gbye
tReGYRiGYRiGYRiGYZjcofOcQTwM/HWRj/R2XAz0G128DHvvMgzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDGB5qtfpfykz5FxKJ5HtZmvwblVr9b333iSlZKJWKz5PjY36Nio4v
I1cov1AT/UvffSrJFOX11tdY8hwqOXOooKiUis9EibGlo6LjyqRnKr40pL4V
p+vIFM9x5znFMAzDMCUHlUL+eUzgbXPX9evtD1+431aalvGNvvuUa7Q6UvoX
yUnJP6dnKL9Sq4voM8nHOk5JIIdrJU6MKe00ZfCKbv3s9z+NSqigVJP+9L5P
YCyL8nrraywNag6VNAz5ns2pb0mxP6+ZPGBlmw5DTt0NjzPLVNNner+G78Bg
rqOhUcLfh0viezDDMAzDMIWPMj2l1GOfjW3r1qnjZ7Nk5+IEkewnffcpt6iV
8s9ig2+Zzp8xd/nNF/GV5Ur158X5OCWBnK6VTJL8/aHNjiMWLnebHZYo/l2l
x8+On8JYFuX11tdYGtIcKmkY8j2bU9+E8VG/zhvSyrNS9XYPr4VEVzJkLcZQ
rqOhUdLfh0viezDDMAzDMIWPMl1Syv+oc6eKFhYvBs7xXB0vlP5XrVL9O00m
/U+KVPadUqn8LCM9rZREIv5BkpLyvTxD8RXymtQq5b/TU2XfSMTiH7BdJmJl
Nb/HPlXa16f883p52lcpEvH3Yonkh9R0+ddv50Gp1ap/Z20j+V4sEv+I12Vk
298//Un9TqFQfI6fxWLJD6KEqF+u7HXs3aB+89s7Lz7pECdM+VmhUn2WFbP7
uo9pqV+j7yJx1n4zc9xvVj8zM9K/1PZBs29ZWvo3SpX6M5yLNDnmp6t7HXvl
fJy3r+mHj/vPeeO7wYwvZNKUb8Ui0Y/a6/P6uLp9f2gb3bWWpMi+V2brE65p
puaaIvdMnqn8MmvM8j+uuRlT9TuulTwj46vE2MjfwyNi/nw7pyD3Y//uMcL+
sL3iA7l27+ofxlKVwxyTSKTfK5Sqz9WFNJdyO6Y57S8vY6XU9P/t610Yc037
fpHDvgtzHN/5PpXPc3oX2v6+vqboQ06v+9A5FcW467bLlKdnHVcztlKp7Nuc
3j8+dB65eW9Il2eWSkmK/u/77tk0eUYpmVTy7dv7+Z99ZWR+9fd45+Ec3jlG
77hfE2IjftdpMVdfRVVOlad//aG59KH+5PQ/5p/7P2uu5ed8Cmve5vX+yc3c
/Rj3R17GNVOh+OJjvQfn5n7Ux3twbvqlr/dghmEYhmEKn5y0mDSp+Nvzh3d0
d9t+cMSrkGCTa2eOtHV1cZqwdv1Gh3M3/JsmiSQ/xYYH/3nqoFfPtasdp67f
tH3crUfBNWWaz/WINU6Vir49fWBLL7dt3iNfvgoyvXb2aBu3dWscHNe4TDlw
8mJXQUxSWXy+0sYpKzI+j48KK3vl9JF2G9c72zs6Ok3b6LnT5uq9J/UTRNL/
4vMB+nPu0PYe6E9Q4GPLI15bB6xe5TptyybHsSN7Nvf+448/Y/rbztrk7L5v
XIQopbRSsw5XZKR9GRUaWMH38N4e65ydJq5c5Thj49Zdo276P68tlKZ9j7W6
7jw3bj80IlQQWuHe1dNNPTa4jF/luGbaTm+fvsER8eVTJKLvzx/YZG2T43He
+j4KekAujotttZ9HRQk/Pr5zud6OzW6jVq9aNd3Jed2kvUd8rYPCoo3TM5Vf
qnKxTWqK6DvffZt7b/DcbxMjkv6sev1ZSiFP/er5rdP1NmzYYHs7MKaKXKH6
oiDjiuN8aExzvlZ7xwVFRpU/7b3V2m3z3tFRwpTS2u/x8jD27x+jhPKZmrmk
ypR/EfXsZsX169fbHzx/r31OuXZpMsl/3jWWMqn4u7fnmOuGHeNDk8S/yeVp
pQo+l7L6mZtxxz1UoLHSvPas99aeuuuN9XNhzDVdv7LvG+demOP4rvept4+b
m3PKOe9BN+9Cy148ebCjq/OaiY5OzlN3H/LtHRQW8/p1uZubun4V3rir/6VS
Zn6WGBv++41zx1u5uzrbOa52muaxbfeIW5q5lixJ/UGl0mmMHz6P3Lw3XL7/
op7Pno393nfPBkcIKpzY7dHPddOusYJEyW/KbDpnZrqs1OOrxxu7um6wu/E0
vDp039yfw/t51/36JCjQcs6QVlssq7V9dPr+w4a3rp5uprvmuzTX/OUbcyl3
1zSn/zFZ97/kt0xF5hf5PZ/Cmre5vn/yMHdzpnDvj9yPa9acO/MR3oNz+//3
Y78HY9xz06+39/2x3oMZhmEYhil8ctJiEG+yZGy39bWadr2xdJ794m5dOp1o
37bV2ZpVKz2pXq/FvbXb9oyebz/CuWOHDr5tWja7WMXS8nmjdv3PXXosqI01
vzA+8te5w9t7VG/Q4c7sqTarO7ZvdxrbNm1Q51aVqjWeDJu2Zu2rGGE5hSLj
i6igu2azR/d2Q45UizYdz/fs2f2IVZMG1+s2sLozf8OBiTFC6c/J8VG/Lhrd
ZUPNpt1uzJs0ZE3jhg1uNWjc5frkKaPWNqtt6vfjj6VFVp37+TpMd3QMShCV
ycyUfxnif6G6Ta+2+2vVqvOgZbsO57p07uDTsF7tu3Ubt7254eDl/uJU+bf/
nGf3G6uWTJ3brXOHkx00/WzWqO5Ny0pVnvexW+7+OCik4m7n2Xatapveffs4
b2sx8EDOzXHxHV+aJPH7o5sWjWyuuSYNm1pd79qt2/GO7VqdwXXo2M/W+1pA
eHWxMOGnD20TGyUoO31Ayx0N2gy+8DgizljXp/SU5O9Ous2wqV+/wZ2NPo97
pKQrvy7IuMbGhJd5/5g6rX384pVlTtfqbsDT6rOHt9/coGX/Sw/C40wVmj6q
lBmf52bskY/woTF6FSssm5mW8vVjX8/WLVu0uGS30mteovh/c+1kkqTv97rM
ts1pLJP+Z441vNWy/dDTN1+FV3rx4ELNwphL6KcsF+OeobmHCjJWcTERf8zT
jJX2egtiTVMkiT8UxlzLeH1v/71vzVhm5vIezu04vss7/I3j5vKc0N+394N1
eXSwn+ncMX02YNumzVtebd2i6aXatWo96DTAbv/lR6G10+XppXJzTuhrYY57
ekbGV7Ehj4yWThzs1KBevbs4bo/u3Y42b9zgRoNmba+t3uEzKlGS9iPWbLk5
jxjN2uxD7w1Oey8P3bxy5tT33bNXHz2us3HusAV16zW9u+PC0w6yDGUp7fXU
rMlF8eG/Lh7ddUODpp2unX4oqJeWkZnrc/jQ/6Z33a93AwKqzx7SaouJecMX
c+ZPWtq1UwcfXPOmDeveqlSpyrO+9ss36uYSfH5z0x/hO+7/W6FRFSNCHhnn
93wKa97mdp7l9n/qu+6zwr4/8jSuzwKqzR/dxa2o34O1uk0u7sf4mMg/PuZ7
MGJYctOvuOiIMvp4D2YYhmEYpvDJSYvB/+y5Q5pvKfOXaUSf0TO2XLn7uEFI
8HOz41sWDav45x+CKrUa+Y+f77rM7+mLasHPH1m6zx0+38zcMmiWu4+DUJr+
fXJcxG/TejfY/evv5eLa9xvnffr6/eZhgrAKj25fqG9r3XyfRaXaz1yP3u0T
ExNZxnPByDlVK1cNsF+6eeGjwFeVIiPD//S/ebbh6O7NDlatbfVgz5WANlGR
gj/nDrHaUsaokqBLr0GHdxz06ev34GmtFy+eVFxh283Z3KLai02n7vUIj00u
g88zMnHSD/vWTHZo1rjJ9bkbvCc+Cw61iBCElr/mu7t9m7qVbzfsZHM6ICLB
KCku6jfs949yJlHdBtn+f3v3HRDF8T98/IktGnvsvaDCUUVEKSpYsMUSjbHF
msQYe0nU2I0l9pbYu6LRWGONvVdUBGnS23GUO7g7ejnIcwuiiOAtRb/JL+8/
Xn/EHLcz85mZnZnbnfn93E2nTgGBgU1cH123HNvH+ri+cVv332+/6BKgzfuK
PK6T+3neBJWikpjratK184NAp8aD7S0uW/UYdenK/WftQkKlDQL9PPX+3LNi
RPcuXS8v3nl6vKfbHZN3fWbJrvPf+/q8aD7pc8ujRtb9Hzprx3yv5ltqRcWT
6yZPMDQ08lh/ynmQOknzSVHi6ufn20xXTH89cX+wj5ebQe6yCtfOCX8caOto
ZNnnsVOgrEWadqwXFxNeVVzsg+vritGRuz6d4hMTP5F5PWyxdevW709ee+IQ
n8dzMenpGm25ezXKK5aZ64e56tiTZ57mskhZ7d+LqS4duePVyd/nUQtdMRXa
UNFi5dPsVXkHhOiHBjg1LY66ltW2g2u9/m6Zvio6/NPijGNCavrHefVTb15X
d56y0/vm92R8FK+MqLJnydhZZqatXH9cvW+2q5evoZ+3e4vDv80b19ai9eNv
F2z/xd/fV09MnhJSNB9nxal44i6VBtd3XD7xh5ZmrVwmLd2+yMXT1yg0JKjB
09sX2o3pZ3+0lW3P+2ce+dompaaXEZMPDw83I119w7oTj4d4e7m/s83e9/Q2
vXdyQ5+WRhK3b37etzRSGf9p5jsXmpSSQc+vGHe3NL7fcciMY34yRf04ZWQV
sXnQdW/Kr71GyoLrzNe2jdp1G4f1Gjb+8NmXZe7y8HqbsX1sjhsYt3XLrkvx
qsjKYtIjkwbXe7v9e5jLIqR1DhQhP8VTb4U1HRH1TJvnqEhZLbF19+30Fn/7
KEhcI8KC6s59332wUC9SUsrquv8KcQjw92v6ofrgzLjHxlUWk643v/vD9cEA
AKD45bcWM394h11N9Qz9fjv1cKAqIbV8RnpqyRDv2y26mTZ9rGfSye2vpz5W
SWnppdNT4sp4Xt1l11IicR86e9uaCOE5FmEtZmDbg40a6QUtO3D9G0VcciXh
ueaU+Jjyd46s/MKgeQvvIT9tWuf65IbFgHam103tBt956BVsnP2MdUpcdPmb
B5cNlOgbvPhm8b6l3j7eLYT0NGrcLHDhzgvjw7XXSEvTlFJrxyCbZgxaamhk
4X7kYaBdYlpG5ng4LSWpjJ+bk9Hli5e7eQaFNY2OUX6qjImp6u/loj99UAdH
A+P2bhfcQlqHh0vrCN/bpKm+/5ojt4dHv0xngnb8fmTlhKkGBoZeKw7fHyGV
SuttzuM6uYm9bnJaSplQr6sGXc2NHnUaMuPosxeBkriEpPLCO/LxKnlld1dX
05DwiLpBHlcM3/WZ0IiY2hHSgHoFWYspbFy9vDwlumO6ba2fn59e7rJ6Yz4i
rMUIa1EBTk0KEntdMRLyIjyXFBsbWzGvPYmyxUZHfJpXLLPLJncdE96/L7a6
9PvNUR7OF1vpiqnw/l5RYuXp5SF5Vd7+QQZBXlclxVHXhHS9Nbf0d9Ir3jim
lc8rbm9cV0SestP7xvdkpJUID3zaeLCd+RXzLiOvP/UJNUgT9khI15SQS33r
blmx6MdVWxwnuj670UpMnoR9zrPjVOS4h8vrSP2fNB3asdUl885f3bjj8sJC
FRtXKT4+vrywTnhpz+JhRgaGnlPWHvtJoYqrojMfWw9P8PRyl0wU0TeEhYXV
fVebfeQfYhDi59RssL355bafjbnoERzZRHhPKSVeWf7KnoXDTIyM3edsOz8p
Oja+ckSQcyNReVAnVhZzf8qrvb4ucwP/tUdvD8tZ5kdXTZzyui4lVRCbHl9f
32Zvt/+U0kI5FyU/xVJvc/RP765nt0d6u983Flt330rve2gfmXuq5KIrru+1
DxbqRXxCRV33XyEOcmFfog/UB2fGPS2ptJh0RYYF1v1f9MEAAKD45b8W03GX
xMje7ZJnsHlyunDGgeajiBC3BgPbGV43cxh93Ts0qlHm+81piaWCnp5oaWVk
6Dpg2sZN4YrY6llrMTaO+hIbj7MugW2TNBmZz1xnaJJKBj47bWZloO/WYeC0
k7fPbP/MQqLv3mX0zwdDI5W1X+1Bp/1cwNNT5lYS/ecdRyw47Obubjx/uP0u
fYO2nief+Ntmz5/zm1cLv7vFxkRUdXW63frQvl0j1q9dM33lypUzf14w9+ce
VpK7TZq39jnlHGQtPJcj5NPAqIPbX+5BFln5/Pv/pcTFlL+yc+4IiaGh58K9
N8aGhIQ0ELMWI/a6SWmaMtEynzqzhnffbWhk5j5s3Izte4+cHuLs/sIkLDyy
jio2oZJGk1ZK52fS00vKZYF1CrYWU5i4btjk4eFhqDOmQ+cc9fTykuReH3tr
LSY1sUzAw6Otxcded4yU8SkVxNT3d6/FvF3HircuXRvr7+fRTFdMhbIoWqzc
jV6P1aX6kTKfusVR14R0vTFH9/U39H141PJDxPHNNSARecpjb22hnAKdjrey
NDR43u3bpfulUapa2ft8C++yxKpiKsdER1XzvX+kjZg8Cf8vO05FjXtaSkIZ
IW0WLZp6mtj1v7th09aJ+/fvH5Fp765Ra36ePL9Fo8YBPcYu3xMWHlFHVz6U
qtgqYtdpda3FCG1WqZBV2zLrq8VGplaujjc8uwrPPCgjg2ou+qbHVtO23R9d
cg1snZycUFZ0HuSqmoVtr6/bhp3bRY+gVvnVpRiVuorY9Aj9W+72n11fipKf
4qi3r/snHfVs54XxztcO2Yutu7mvUaztY/i8IwFBwY0DA/yb+Pj4NBf4+fnr
RUbHVtNo0kvmH9f33QcLfUxSRTH93Qftg4W4Z6SXEJMuxf+oDwYAAMUv37WY
EZ13GrXs7vz6zNB07RjEvcEQO+Mrln3GXwiUyetlPaeeVDLI+U8za2NDly+0
Y5BXazGD2h0wbNnt2R3/MMmrM0czUkpIfa8372io/6x1z28vXT64crBEe91+
UzdsDleoq79Kl/A5n2sthM+16TftrIurq9n8EZ12Gpp0cb3hKzVOefl9ec+r
Mz5KiouucNFx7ZAutpa3La07PPhyyPDDY78ft23M16N225g0cWmkZ+F38mmQ
TebYTfhe064uwnkc2ekUnvW4tnv+MENDQ4+Fe8SuxYi/rrCOoUlNKu3ncttk
0bQxq+2sLe+ZmZm5tGpj4/TliO8ddx29NFimUNdITUn8WNdnosIC6hZoLaaQ
cc1ci9ER0zafTznn7uFhpGstJjU57uMXV3fZGRYk9jpiVCxrMW/VseKuS9fH
KpSxVd8d09gawl6gRYtVjnmAtryTU5J01iPddS0rXW+sxXj7Gnlc2WX/IeKY
uw7pzlNWenN+R0ZKfBnva3vaG+nre/WbJqQ3tnru62SkxJURWzeDwhV1X9Wb
IsY9TBZe1+vqbrtmDWoHV63VIKqleatnlpaWTtkszM2cDQxNPftPXLlNWDvR
lQ+h7ipkgbWLay0mOSmunPP57V0tTYxdxi0/tCAyWlkt6PlV455WZnd6fbd4
T1Cksk76y/IVlYeirsWIqEsxMTFVxaYncy0mV/vPKIb8FEe9faN/ekeeF2w7
O/Hh6a09xdbdt9Yqi7N99P7+wt1ze3v0crC/JORRYNXO/u7C7WcnxMQmVnpn
XN9rH5zVx+i+/8bWUESE1vpwfXBW3MWMC+SyoDr/iz4YAAAUv3evxfRwvhOQ
Pe9+PQZp03fCed1rMbaOEtMurjd9Xq+dZKSnlAzxumzQwVDfxbrv+HPXj67v
b2yg79lrwqodMrmqRnaaMtKTS4Z4XpS0l+i72gycccr1+XPTV2eYvhoT5T1O
F54hlvk90Bto1+qKcdseTr9fuNM7MDSsQURERC1fT1fJnGGddusbtPF8PXbL
+t7bOb63MGsxBblu5jMlL8+iiJFHVPfxeGZ4+o/9Xy6YMXGlQzvL28ZmbVyX
7bs0RhmXVPHdn7k4xs/Xu1nmfMuq/6OnOeZbwh6AR1dPnCIxNPJ8ey2m4HHN
Wot5d0xtBvz4p4enp6HOtZiU+I99b+23KWjs3xWj4lmLebOOvY+6pIxL0RFT
bdzjkysWLVZvzgPSXp6zUbS6lpWuN9ZifPwMX9zc3+5DxPGtZ6vE5Emb3jfa
aGpCab9bB2xM8kqvcGZxSnKZpLiYCt4399mKyVNwRHSdnPWmKHFfuvPUuKd/
7XIwadH8RecRcw4/cn5uERgY2PgNQUGNZVExNVOTYsvqykdycvLHUWGBdcX0
DWLWYtKEPT4CnjUe1b3NmXafTzj7/IWv5PLeRcPMTM1dlx+6OVqVkFIhs3xv
O1qLyUOaRiPqvJb85+y6yzxGqawqNj3yzD1ocrX/YshPcdTb3P1TfnlesP3c
xMcXdnUVW3ffWospzvbxxdTTLo+utdm4ZuX0hQsXLhIsXb5y9p83XTrHJ6WU
0xXX99oHC32MiPtvQIB/0w/aBwtxF5Euf38fvf9FHwwAAIrfe1uLGWjl2KyF
ufehuy86Z+8Fl64d6724dcDW3EDf47Pvl+x2unW8Q0czyROrfpPP+krlDbL3
+NCkxJVxu7Kro5l2fNFv6vrNnl6ekrzGEK/Gc4YWHocfBNgnCGsxwnjyzkGr
lhJ9j17jlu8KjlDWyXxPPV1TIjzAvfF3Pcz/1GveyudEYdZiclwndzkW5LqJ
aellkhPjysmj5DXik1LLaTSakkmJ8eVi5OHVna4fs+9obvC4w9BZx/wCQ5q8
6zN2X/109JnLs5ZT+lkdMWzd68kDvzBJ2svzomMVYZ/+9uPAZc1b6PsU21qM
jpj2Gr9yp/BOeu6yems+okkuFeJ+2bAosS/yWkyuWOY11ynuurRg97XvI+Qx
Nd4d09lHQyJi6hTXWsyjgDD9hIS48kWva1npeuP5eL8gSaD7ZaMPEcc31oBE
5Ck7vTnnm8LcJNT9imEnM8ljq36TzvqGyhtmplcb0+REdbmnd6/ZXL56s8tz
pzNt7EXkSfgNWtQcWUzch/xw7P6NYx27mBs6WWuv6xMa1TD7usK7CylCf6GI
rp6g/ft0bfvRmY/r9zv5+b/Qm9zP6g9dfcOrtZh3tVnt98fHRFTZvfCbuWbm
7Z13nr46YPboz3ZY2H15+65XqElq5r4iKSVDPa8aiMqD9t+FfxPKQjhPPXsf
ETHtVfRaTGxcZbHpiX75DMQb7b+A+Xlf9Ta//umterbr4rjnTucsxbTHN56f
eB/tY8q6LdIIeW21SlVZqVRWyaRSVUlISsksK7FxfR/385i45Iq67r9CHFzd
3Ew+VB8sXC84XFFXTLpcXF3M/hd9MAAAKH7vby2m7cF69RpKJ67YP99fGtlA
2O9QeJ/GcfmEH/QNDF/M3nJmip+PR/NZX3XeKzGzdXW87PRZZIy6mvC58CDv
hlvmjlwoMWrpsfzgzdGBgQFN8hpDxEVHVN06a8hiA4mp546Lz/oIaU9Jii/r
L7zPbmjg1u2bRQe8g2RNEhLiy8vDg2tfOLB6qJWkiVu9RiZBB256dA0KCmw8
b3inXbrGJqEhoQ1yXyc1Lb10znNMM1ITS4u9brRSXdXjzp/W0ydO+NXx4qNe
MnlMzbj4+ApxscpKnk+vtepjbXTb9otJpy8e39vvXZ+xGzLz2HO35yaLv+66
tYWkjeeBa849opSxn6qV0VXcna60HtLR9FL9hk1Cim8tRkdMt56bHBIc3PDN
soqtFvHWOUrpJaNlfrWLEvu3x9dJlZIT1J8I+yxHxcR+KrxXn1d9z6vOpGae
1ZzXPEB8TMXUpbnbzk+6d/GYw7tjOutYzuctijoPuP/C3/j5nT9til7XstKl
eGP/izD9KJlfneKMo5i1GDF5yk7vG3PajPSPhHonnPNsYGLjtu/Cgz7hCmUN
tVJRxcPpcush3Tuc7T16zoGnLo/NZ4rIk/AsiJg5sri4zzjm4vrEbM4Ih10G
JlZuO87c+UJIm3DdaO017p7Z23P6zAWrrjkHWCalppXRmY+v5+1/5vbc9GcR
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
+/wf3detWz/t7B03+4Sk1HI5vz9dk1pSER5S+/7Vsx23/rpu4vLly3/atGPf
2FtObm3lyriq/4SzPFPileVvHFg+2KGLw5WtZ5y/iE1M+yS/zwpnkSaooyv5
ejhLTh45MHDDmlU//LJs2ZzVazf84PjHn4NdvPwMlXGJ/9gzSsXmNT0tuZTM
60GL3379ddKJq0+6xiWmfPI6pv+VuBetfbzxmX9p//Hf3bOqqLH/L7WTd/UX
2fn8v1EWAADg3y9eO5c7vmPV14t+2TwnUK6qnf5/bHyb+/wflSq6SmHyW5Rz
hIr7DKIMTXLJcJ/7zRbMmvfLvReRRsn5jMv/bRJU8sq/r5o41aJV66dL9l8d
o4xPrvjW57TzSGVkcM1l4/pubN3W/uGhGx5dY+PjKwT7uDbbvGT6bFtzyZNG
evr+U9cdn6VQJ1bO/jthbC3zf9Zk6ZThayxatnxmbtH6qbVV2wdmpiauLS3b
P1605djkCGXCp//reWlybHSFC5tnfmtoaOix4vCDEaqEtDzP+hV+142LkVU9
vn3ZN93at71p3qqVs027Dnc7d+50zdaqjTZfpq5tOvS4s97xr1FydWKV/3W+
ipJXTVJsWddzW7patm79eMyS/YujlPFVs9cT/ktxL1T7uOnpkJCi+fiNuvMv
7T/+y2e5FSX2/7V2kmd/8bJ8/i+VBQAA+PfTpKWVkoeH1g4OkTVI0vHcd9bz
z0kfx6rVlYRndoUzMFIL+cyu8Jt+YnxceeG5X41GU1J4Fjjre9WV44X3K9Iz
SuZMS+YzxcmJWddWqqqIfV449/g9OS2tdM78potMR97zgIyPhGfH47OfHc9M
z9vll/Nv7weEGSQkJZaLVasqZb5LkpT81vPR7ypnodziomVVb/2+aoBVW7sH
+6897xGuUNUQ3k+JS0gq/+r3uoys3/aE71DHJVTUpKe/PDP2ZZpj1RXj4hNf
PeMtNra6PlfQuL5RF1MSynjcPNTOyljfpdNXP/3hJ4uun3utLCMtqZT/0/Mt
O5tLnKx6j7vgHhDWLNzHSW/a6C932tl1ujlqcO/f6zdsGjL2l8ML5aqEKtl5
jldGVtm/bNwMY+0YfuiUJZtvPHK19vV50fzKqb19e9ua3jJu3fnJaSd/26S0
9NL51yeh/DUlkhITyqnVqspKVVY9LHT+X75flKD9fPYz8HFKeZXzm2foXp9I
jv/4+dX99h0sjJ2se3x1yfH01f7efgHNQkKCG/p6PTc4vnvdqC5tTe+3tvv8
9kXnwDbJ78zXPzyvSeqyzqfWf2agr//iq7k7V0fGxH2aoa3bUb5OTd9/3HWX
w4cqi0K1j+DIppqc76nk0X9ExMRWS9P2D0L6CtvP5s5/1vsfqsrq2NhKySlp
H2f1XdpyfPku3dtlqLucC9oHF+Z+VfD70ruuIaQtraTwjktR+uYixV6TWuo/
107y6C8yr/3B+gwAAABxEuNUFS4d3d1/847fv5PGxFbP+zmRrLGjPDy49t3L
pztv/W39xFWr18zYvufg1/edPS2i1QmVC/rMrnDdKyf2fb5l7/GvA4ICGjvd
+qv99k0bxq9ctXbG/qPnBvmERDUS3ovPPvs0UhpY7+ZfJ7tt+XX9pFWr1szY
snP/mFtOz9tGKeM+FcZv+V0n9/g9Nk5VMWd+47X/LSYdec0DhHF2lNSn3u87
f/t6+94jo/0j1XXySkv230pa9XC+6PTE9ublPx22bFw3adWaDT8eOXO1b6BM
UU8411VMOScI5fbHti/G9Lc7WqdOA9mQCT9tW7Zy08xN69ZM3X3s0iDhnZTM
OZXwjHWwa4PN69dP2bjr+JhIVVzVzDlKhuYjtSK42sHtm789eObW5+r4pAri
YiuuDoiOax6xEuaBCqlv3RmD7fcbmLZ7fuzeC/vE1PQyOetholpe6cT66RMk
+pIXP2w8+aM8Oqaa9Ol507ETZ246eu5qn+uHVg00NJB4vTm+Tv9IEe5be8aw
nnvse408f9fd3ywpVVNGuF6sXFrt4LKxP7bQl3gv3n9jjDI+pUKedUlbD9NS
EstIA7waXzjxe7+N69dMXbFy1awtuw98e0+b/5i4xErCmprY/GfO4ZLiywZ4
PJUc2rNt1OrVa3/csff30XfuP7L5Y+3USRKJoee71icSVfJKf6yaMNWghb73
gp2Xxwu/02at6WXNidQKWbXz+9d+NWHKjI1n7nl1SNDOh0W3z39YXvNci0lN
LP3e4y6yHArSnxWlLArTPhSxiZVzrh0kxqvLv9l/zN62fuvhcSHK2OqpaSml
C9vPZud/895jX/v5++jdvniy628b1kxZ9+uWyZfvOrdXKNVVw4N9Gpw/5th/
3epVP/66be+4+y4+5vHJqWUzRJZzQfrgwt6vxPdfYvpDTck4ZViVP3ZvGbWn
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
amsmf7G6Vfsv7tzzDjYODXjaVOc11xyZ7fH8nqmYtPn6+jYTU575zTWF2MZG
yz7d8tNXiyWG5h6/nno4MDYp9RNhTVD4983Cvxu1ct902mlA7rlKenLsx/mO
r3MRxtZqhbTa2T3LR9haWjwaOWvD2uAoYS/nvH/3T0tJKuPn5mR0+eLlbp5B
YU2jY5SfKmNiqvp7uehPH9TB0cC4vdsFt5DW4eHSOmLqtefzm6a9LI3umTuM
vubiH9Yic5+EjPQSUaE+9eYMs9/TuHHTQF1798bHhFf5c/eqkd07tLlhpM2z
aUsLl269vjg36cf5a3cdOjnMxcvfMFoVX0Xzjrr5b8hrvnOr9xx3seWQrPm7
lNj+rKhlUZT2kS02OuLTnP1HYmrqx+EBTk2K0s9m57+pnqHfb9o0qRJSy2ek
p5YM8b7doptp08d6Jp3c/nrqYyXssZGeElfG8+ouu5YSifvQ2dvWSCPktcWU
s7DOq7MPLuL9SlQcD98Z6e35yFDMNSIjI2sWqm/2kRql5l7bL2Ls/yvtRFd/
8b7vFQAAAGLpWovJSEssFeh0vJVFi6aeJnb9727YtHXi/v37R2Tau2vUmp8n
z2/RqHFAj7HL94TJVTXFXjdrTNZxl4FRB7e/3IMsktOznqVPiYspf2Xn3BES
Q0PPhTsvjHe+dsjeQqLv3mX0zwdDI5W1Xz2TrUkqGfD0lLmVRP95xxELDgv/
L+/8iVmL0ZGOvTfG+vv76c0Y1O5ACyM7941bVk7s2s7ilsPgqcceaectKcK7
Ie/Y8zhrLcbasYXE2vPMs8C2SZqM0tl5CHx22szKQN+tw6DpJ+6c29lTTDl7
e3u3yDmXSkhJKRvqfadFv3atrg/+YeNGWaS8VpDrRZPe7a2vz990bOqyKUPX
9Bg152CALKpeRLBbw697tD392beL9gWHyeoHOB230HXN7t8sPHD/wp5uYtLm
4eFhKKY83/V8tyYlvoywL62ViaFL9m+86dp5XeiLey2+aN/yWtue3150DYxo
psk1FhY7vhb2mIgOD6x9fPvSb7q0s7rd/5uf9jq9CDXKbx+brL/RlIyNiajq
6nS79aF9u0asX7tm+sqVK2f+vGDuzz2sJHebNG/tc8o5yFomC60rpl4/vXKg
k7m2Xncbs3SfVPgN+2X9SVBGVXZc8u1Mfe084p1z8r9fnmkdG1PRz8NZcmTv
5pE/TPz2154O9pdbmpq4GhoaeVi2d7i7cKPj9KAIZZ77GP1b8lpcazEFjbvY
chDas9j+rDjiXtj2kS33WkxCUkK5gIdHWxeln83Ov8TI3u2SZ7B5Vv41H0WE
uDUY2M7wupnD6OveoVGNhGc1hHtK0NMTLa2MDF0HTNuwSSZX1hRTzmHCWoyO
Prio9ytxcfxr/LMbhzuIuoa2Ly5U3xwZUzuve0pRYv9faSfFuRZTmHsFAACA
WDrXYrRjP+9re9o3a1A7uGqtBlEtzVs9s7S0dMpmYW7mbGBo6tl/4sptBV6L
GdFpp6FpV5dbflKj1Iy/M+eKwrMi13bPHyack7Bg29mJD09v7WmoHVP1m7ph
c7hCXf3Vd2SklJD6XGvR0VD/WZt+084GhSvq5jV2FbUWoyMdC/dcz1qLGWjt
WLNG/UhTk+Zu9evXk/b4euEBr5CoxrrmuZlp0M4hJGbdXG77hRlmXyMzD77X
mwt5sOw55tKVQ6sHiSnn3GsxiWkZZWIigmrNH91ju23fcefcfPz07xxZ29/a
tsfdk3ecO53btWSkjf2XN266+Zh73j9mZW9h/mjWpjPTFApFNTGx7Td2we5b
R9f3F5O2zLUYneX57rUY4fdPeeiLetO+7HDIpG0PpyvPAy3iYpWVrh9YNtjU
yMh9ypqjszP3e8gVb93j66z9NsMDPRttXTx5dnsb63vDJi/e/Ngr2ChZOO8j
3/W0jI+S4qIrXHRcO6SLreVtS+sOD74cMvzw2O/HbRvz9ajdNiZNXBrpWfid
fBpkk7k+oSP/87ednfTwzy2fZdbraRu19Tr2Vb1OilVUPL1x2ve69rN93Q6y
zxqJLR8tj6ouDQlq4PLoluXODUsm92xvfrOFxNzr591/fa+MS3r7DNx/SV6L
vhZTmLiLL4dXc8wPFPfCto9sb63FJMSVf3F1l11R+tms/HfeadSyu/Nt/+w+
Lv2jiBD3BkPsjK9Y9hl/IVAmr5e1d21SySDnP82sjQ1dvpi6fnNgcFAjMeWc
uRajow8u6v1K1H1p+7mJj85u6yHuGsqahembo2OTKhV37P8r7aR41mIKe68A
AAAQT+daTGpCab/bjtYmLZq/6DxizuFHzs8thHdk3hAU1FgWFVMzTaMR/VtR
9tjd0Kzbs9dj97fHvI8v7OpqbKDv2WvCqh0yuarGq3SlJ5cM8bwoaS/Rd7UZ
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
OXv37hm9avFP87rbWV/v+sXYkw+9ZYapmoxSwlmRuf8+r+uKG/NeHxuliK7+
8Nyu7l2sW93t0HPgxRUbt05z3L9nxJJZE36xbW3u1GvkzIPPAyP10t51nnRx
rcXk+J7U9PSSqsjgGjt/HjvHxMT0+aTl++eHymNr5vVbq1DGwj4HdRoahPTq
+/np+cvXzd1/4MCItUt+mmvX2uSRVdchV2+5B7dMSIgtL6ac1UpFlRPrp00w
aNbEt9eIKYc279j3nVeYqqFCO85dNaH3uqaNGwU2amHlc+qxv63w/pLwjv2Z
zTPGNNbT82/aSC9wxaFbo4RzToS0iY1tosi0RYaH1i6WtZi/hXNa4z52ubS7
s7lefe+69RqECft/OgeEN0/LUcYpifHlnlw7Zb9+7arpyxYvmj9lZJ89tWrW
jGzTbdDVeQt+Xrxy9boZv5+/3cfP64FkeMeWF2vXay4dOX76tsVLl8375Zdf
ZmdbuWb9j39cfNgzLiE5j7WPtBKRQS6NxvSyPSkxtX4+Z/nGuQcPOg5bvWTu
3GFfjTo47dsB2/Wa6vmPnr1u9am/bvScOdhuv676FCYLq3tsw4zxpoYGHh37
Dj+7cv1v0zdtWD1l/PD++7rbW12v16hZ8C+/338VpzdlfJSSqC53988dvbrZ
tLptbNba9csR3znOX7xs4Zo1q39c+vO8BV8P/fyghXYuYddrxPlLT3ytEuLV
FTwu77W362B367vFe5ZEKd/+rfifmde851bvPe4FKIebT30sw6VBItYgi14W
BW0fecl6Z+bN/uO5v7T53TO7eha2ny30WszUNZufO98xF1POJy9c+2xyf+sj
uvrglALcrwp/X4qpLv4aGR+p5KHVC9o3F0fs/4vtJL+1mA9yrwAAACgAYe+R
XyYMWO/Q59szLqGRTVOSYsu6XtjRpVNH++sTVjjOlyvjqwq/JyXGRle8f+lo
l2nfDd/q0NHuurWN7f3O3XtfHP/jorVXH3lYxyWllhOeI9bk8fd5XVelCK+2
dvrQFQ49Rpx/FBzRPHtMlpqg+uTeH2v7denS5cr6ow+GqrRzduF3qtvnDvWY
9M3QHV06tr9uY9vuXrfe/c/NWLxhUeZeesJvj/n8jqiUh1X/ZeKX6xx6f33W
OSRSTx4VVjNnfqPl4dV1p+P+V8HBQY1yfo+wr47wTnmoz5Nm04f33tO199Cz
Zx/52Ob5W2uUtMbi8V9s7Nz36zPHj+3/8qfJ327o1snuqo1th7tfjpjgeOLa
k67qxJTyYstZk5ZcOsj1hvG4Ib0cLS3bOvUd9M3Rm57hprHqmMrXDvwy2KpN
m0d2AyafeiGVN0wX0pkSX+bFrUO2dlZt7rft8Pntq+4h5skv5yHiYyvuc2Lj
qhYx38jI0GTuUznjq657LVpbPvlh7R+zolQJVXPGOkGlqPTH+hkT7dtZ3TFv
2fKZqbGhW1O9pv76EiMvs5YtXdrYdLj//aItS587XbAc0KHt1RbNmvuamJm5
tjQ3f2Zubu6crY2t3f1Jy/ctkCvj8qivGR8J7eLJlaMdxwzpe7Cdrc3djg49
roydNn/DuZtOnVzunrUZ2a/rsfZdPrs2a9Xu2Qu+679JZ72OS6qoCPOpu2vV
nOm9HOwvWVnbPOjeZ+CZeb/8OvfI1sXfde7icPW3k06D1Il5n0ssxCMpLqaC
y72L1ktnT1nar1e3szbWbe+3bt36sU07u7t9v/zq+IIVm2c/dPczjU9OKyvM
3Twu7e5o1brl40EzNm8Ij47N812Tf2JehbS7a9PeuVOna1NXH54jvE/w/uMu
vhyW7Tk/NjgosJGo/qyIZVHQ9pGX9LTkUrn7jxseYWbKGPmnhe1ns9t9154j
zz0OiWiWte9Y+kdymU+dyYO6OfYds2BP6MuzgTI0ySWl7pcN+3d1uDBu8e7F
0vDwOmLKeeaqXXNmjuq9U1cfnJiS9rHY+1VR7ksFuUZyvLJ8Qfvm4oj9f7Gd
5NVffLh7BQAAgHgaTVqp6EhZTWlYZN3M8wGE53jjVeWloaH1o2JiP9Vost6R
Ft4BT01KKKuIiqgRGhzcMCgoqFFIqLSB8Ptgcmpamez9J/L7+9yEs1+U8vDq
0rCIuknC32efoZqunWPGKitIpdJ6wtkvwnPAme/gJ8WXlUeG1wwJDsq8dqg0
rL4iRv2pcLbku/ZGEPIXEyWrIVxHSGfu/Ar/LSYdqWmppXN+T9bnsvZJVUTI
aoWGhtWPS0z5JK/nYl5dUxZZVziz5FU+goMbhUfIayUkp5Z9XX4iylkrLTWp
TFREWK1g7f+XhoXXS9DOt4V9QBJjYyqGhIQ0CA2X10l9ed6DUH7C8y+h2n8P
CZXVF+YqOctMfGx1f64gcdVdP7PLN6yWkCeFKr6KJtc7++kaTUl1TGRVoRze
2j8zcw/N4Mbh8pgayUnx5WShIfXz/IxWUFBwI+E9nvzqq5C3FG3eo7SxFq4V
HBzSMCJKUTNRG7vU5MSPI2VhdUJCQhtERauqKTLrl+78C+elxqmiK4dJQ+pl
lqW2TkfHqKvGa2MoppyENKWlJJdRRis+lYVJ62aXQVBwSKMwWXjdGFVslez2
IdQBZXhArW2Lxs/9Yf0fM/N7Xu2fmNfM9p+g/kT4XGafoq0DHyLuYstBoZ2T
paamlhZb74sa94K0jzy9o/8obD+bd7sX0pdSKipcWjssUlHr1V65mfU2oYxM
m9fIaHU14d/FlHNktLKaXJtmMX2w2D6taPcl8dfIKGTfXNTY/xfbSV79xYe8
VwAAAADAKxnpH0XLAmqvmj56xfbTj74Q81wSAAAAAAAACicjPa2EUuZb+49D
R4f4yqLr57fvBwAAAAAAAIpBRtb7InFx8RWE87507SkCAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADwf9n/B2/pZ5M=
    "], {{0, 794}, {1123, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{744.5789473684156, Automatic},
  ImageSizeRaw->{1123, 794},
  PlotRange->{{0, 1123}, {0, 794}}]], "Input",
 CellChangeTimes->{{3.799389279747905*^9, 
  3.799389292507909*^9}},ExpressionUUID->"2e7ef5ff-9dae-43b4-825f-\
473e2ac61539"],

Cell["\<\
\[Beta]: transmission from vector to host
\[Gamma]: transmission from host to vector (Assumption: related to \
reproduction ability, higher reproduction rate leads to higher number of \
within host population, hence higher transmission rate to the vector)\
\>", "Text",
 CellChangeTimes->{{3.796968485557713*^9, 3.796968500284544*^9}, {
  3.797846552863061*^9, 3.797846594503326*^9}, {3.797846673683043*^9, 
  3.797846695794943*^9}, {3.7993925610197277`*^9, 
  3.799392577997252*^9}},ExpressionUUID->"e0c2a4e6-a6ba-4e76-bb5f-\
fe59ddad01d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Naive", " ", "vectors"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Sv", " ", "=", " ", 
     RowBox[{
     "Nv", " ", "-", " ", "V1", " ", "-", " ", "V2", " ", "-", " ", "V12"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Naive", " ", "hosts"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Sh", " ", "=", " ", 
     RowBox[{
     "Nh", " ", "-", " ", "I1", " ", "-", " ", "I2", " ", "-", " ", "I12"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Vectors", " ", "singly", " ", "infected", " ", "with", " ", "parasite", 
     " ", "1"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dV1dt", " ", "=", " ", 
     RowBox[{
      RowBox[{"\[Gamma]1", " ", "Sv", " ", "I1"}], "  ", "+", "  ", 
      RowBox[{"\[Gamma]12", " ", "Sv", " ", "I12"}], "  ", "-", " ", 
      RowBox[{"\[Gamma]2", " ", "V1", " ", "I2"}], " ", "-", " ", 
      RowBox[{"dv", " ", "V1"}], " ", "-", " ", 
      RowBox[{"\[Alpha]1", " ", "V1"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Vectors", " ", "singly", " ", "infected", " ", "with", " ", "parasite", 
     " ", "2"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dV2dt", " ", "=", " ", 
     RowBox[{
      RowBox[{"\[Gamma]2", " ", "Sv", " ", "I2"}], " ", "+", 
      RowBox[{"\[Gamma]21", " ", "Sv", " ", "I12"}], " ", "-", " ", 
      RowBox[{"\[Gamma]1", " ", "V2", " ", "I1"}], " ", "-", " ", 
      RowBox[{"dv", " ", "V2"}], "-", " ", 
      RowBox[{"\[Alpha]2", " ", "V2"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Vectors", " ", "coinfected", " ", "by", " ", "parasite", " ", "1", " ", 
     "and", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dV12dt", " ", "=", " ", 
     RowBox[{
      RowBox[{"\[Gamma]1", " ", "V2", " ", "I1"}], " ", "+", " ", 
      RowBox[{"\[Gamma]2", " ", "V1", " ", "I2"}], "  ", "-", " ", 
      RowBox[{"dv", " ", "V12"}], "-", " ", 
      RowBox[{"\[Alpha]12", " ", "V12"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Hosts", " ", "singly", " ", "infected", " ", "by", " ", "parasite", " ", 
     "1"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dI1dt", " ", "=", " ", 
     RowBox[{
      RowBox[{"\[Beta]1", " ", "Sh", " ", "V1"}], "  ", "+", " ", 
      RowBox[{"\[Beta]12", " ", "Sh", " ", "V12"}], "  ", "-", " ", 
      RowBox[{"\[Beta]21", "  ", "I1", " ", "V12"}], " ", "-", " ", 
      RowBox[{"\[Sigma]1", " ", "I1"}], "  ", "-", " ", 
      RowBox[{"dh", " ", "I1"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Hosts", " ", "singly", " ", "infected", " ", "by", " ", "parasite", " ", 
     "2"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dI2dt", " ", "=", " ", 
     RowBox[{
      RowBox[{"\[Beta]2", " ", "Sh", " ", "V2"}], " ", "+", " ", 
      RowBox[{"\[Beta]21", " ", "Sh", " ", "V12"}], " ", "-", " ", 
      RowBox[{"\[Beta]12", " ", "I2", " ", "V12"}], "-", " ", 
      RowBox[{"\[Sigma]2", " ", "I2"}], " ", "-", " ", 
      RowBox[{"dh", " ", "I2"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Hosts", " ", "coinfected", " ", "by", " ", "parasite", " ", "1", " ", 
     "and", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dI12dt", " ", "=", " ", 
     RowBox[{
      RowBox[{"\[Beta]2", " ", "I1", " ", "V2"}], " ", "+", " ", 
      RowBox[{"\[Beta]1", " ", "I2", " ", "V1"}], "+", " ", 
      RowBox[{"\[Beta]21", " ", "I1", " ", "V12"}], " ", "+", " ", 
      RowBox[{"\[Beta]12", " ", "I2", " ", "V12"}], " ", "-", " ", 
      RowBox[{"\[Sigma]12", " ", "I12"}], " ", "-", " ", 
      RowBox[{"dh", " ", "I12"}]}]}], ";"}]}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGCQAGIQ3XPuwi0OzzeOZbLmr0B0/sk6Vk4g/Wvudh4QbaNk
LQaiJ1QuANNzWBZLg+is7GO6IHpT0FJjEC2uE2kOoqcsM6hS9nrjWL7hSi2I
Zv9j1wKiY7mqwLRA5KIOEP1o4/tOED1pyq2JILop120qiN4cWDQbRMcI7gTT
19SmLQfRr8Rvg+k5C1dvBdEiE/+CaSeDKadA9JQDvZdAdICx2zIVIN3HbLAZ
RKedOn4SRB/e9R9MC6/c+dDD741jgpcwkyeQflQYoAii8z2bwPQ1vkSLw0Ba
wEbFHkQ3V3//Ht0ADAdDzb8g+vS87ywxQDpK7wobiLbboM8LoifsKxMG0bt2
pSqDaItzXOogmuXsIl0QzdNxSx9Ez27wN0sB0m4an81BNAAjdq6V
  "],
 ExpressionUUID -> "5925574b-5e13-4407-91bd-dc53ac4194c7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"odes", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "dV1dt", ",", " ", "dV2dt", ",", " ", "dV12dt", ",", " ", "dI1dt", ",", 
     " ", "dI2dt", ",", " ", "dI12dt"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"var", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "V1", ",", " ", "V2", ",", " ", "V12", ",", " ", "I1", ",", " ", "I2", 
     ",", " ", "I12"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.825393561575795*^9, 3.825393593673726*^9}, {
  3.825393681719616*^9, 3.825393698111599*^9}, {3.8253964625258427`*^9, 
  3.825396462669517*^9}, {3.825406166928005*^9, 3.825406204020452*^9}, {
  3.8254062373765574`*^9, 3.825406241299733*^9}, {3.825406378080468*^9, 
  3.825406385493287*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"solSim1", " ", "=", " ", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Thread", "[", 
              RowBox[{"odes", " ", "\[Equal]", " ", "0"}], "]"}], "/.", 
             RowBox[{"\[Gamma]1", "\[Rule]", " ", "\[CapitalGamma]"}]}], "/.", 
            RowBox[{"\[Gamma]2", "\[Rule]", " ", "\[CapitalGamma]"}]}], "/.", 
           
           RowBox[{"\[Beta]1", "\[Rule]", " ", "\[CapitalBeta]"}]}], "/.", 
          RowBox[{"\[Beta]2", "\[Rule]", " ", "\[CapitalBeta]"}]}], "/.", 
         RowBox[{"\[Gamma]12", "\[Rule]", " ", "\[CapitalGamma]"}]}], "/.", 
        RowBox[{"\[Beta]12", "\[Rule]", " ", "\[CapitalBeta]"}]}], "/.", 
       RowBox[{"\[Gamma]21", "\[Rule]", " ", "\[CapitalGamma]"}]}], "/.", 
      RowBox[{"\[Beta]21", "\[Rule]", " ", "\[CapitalBeta]"}]}], ",", " ", 
     "var"}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.825406248035616*^9, 3.825406262399452*^9}, {
   3.825406323821843*^9, 3.825406465838674*^9}, {3.825406693435514*^9, 
   3.825406702976392*^9}, 3.82540954562211*^9, {3.8254095764520817`*^9, 
   3.82540959587808*^9}, {3.825409686850684*^9, 3.825409687125762*^9}, {
   3.8254097267737513`*^9, 3.825409748110024*^9}, {3.8254098040872087`*^9, 
   3.825409826296534*^9}, 3.825410064736637*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Thread", "[", 
       RowBox[{"odes", "\[Equal]", "0"}], "]"}], "/.", 
      RowBox[{"V2", "\[Rule]", "0"}]}], "/.", 
     RowBox[{"I2", "\[Rule]", " ", "0"}]}], ",", " ", "var"}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.825410084572585*^9, 3.825410149075021*^9}, {
  3.825410226854685*^9, 3.82541026297066*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "svars"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Equations may not give solutions for all \\\"solve\\\" \
variables. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/Solve/svars\\\", \
ButtonNote -> \\\"Solve::svars\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.8254101290703077`*^9, 3.825410230209104*^9, 
  3.8254102638936787`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"V1", "\[Rule]", "0"}], ",", 
     RowBox[{"V12", "\[Rule]", "0"}], ",", 
     RowBox[{"I1", "\[Rule]", "0"}], ",", 
     RowBox[{"I12", "\[Rule]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"V1", "\[Rule]", 
      FractionBox[
       RowBox[{
        RowBox[{"Nh", " ", "Nv", " ", "\[Beta]1", " ", "\[Gamma]1"}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"dv", "+", "\[Alpha]1"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"dh", "+", "\[Sigma]1"}], ")"}]}]}], 
       RowBox[{"\[Beta]1", " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"Nh", " ", "\[Gamma]1"}]}], ")"}]}]]}], ",", 
     RowBox[{"V12", "\[Rule]", "0"}], ",", 
     RowBox[{"I1", "\[Rule]", 
      FractionBox[
       RowBox[{
        RowBox[{"Nh", " ", "Nv", " ", "\[Beta]1", " ", "\[Gamma]1"}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"dv", "+", "\[Alpha]1"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"dh", "+", "\[Sigma]1"}], ")"}]}]}], 
       RowBox[{"\[Gamma]1", " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"Nv", " ", "\[Beta]1"}], "+", "\[Sigma]1"}], ")"}]}]]}], 
     ",", 
     RowBox[{"I12", "\[Rule]", "0"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.825406405107202*^9, 3.825406411112569*^9}, 
   3.8254066852467003`*^9, 3.825409819826333*^9, 3.825410060695384*^9, 
   3.825410129076758*^9, 3.8254102303330603`*^9, 3.82541026397538*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Numerical analyse of ecological dynamics", \
"Subchapter"]], "Chapter",
 CellChangeTimes->{{3.825397750755719*^9, 3.825397752529953*^9}, {
  3.825397821375317*^9, 3.825397831767188*^9}, {3.825409548927126*^9, 
  3.825409551739092*^9}}],

Cell[CellGroupData[{

Cell["\<\
Lesser efficient transmission in coinfection than single infection\
\>", "Section",
 CellChangeTimes->{{3.8253994174789257`*^9, 3.8253994332053223`*^9}, {
  3.8254098661718683`*^9, 3.825409893053849*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"vart", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"V1", "[", "t", "]"}], ",", " ", 
       RowBox[{"V2", "[", "t", "]"}], ",", " ", 
       RowBox[{"V12", "[", "t", "]"}], ",", " ", 
       RowBox[{"I1", "[", "t", "]"}], ",", " ", 
       RowBox[{"I2", "[", "t", "]"}], ",", " ", 
       RowBox[{"I12", "[", "t", "]"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sys", " ", "=", " ", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{"vart", ",", " ", "t"}], "]"}], "\[Equal]", " ", 
       RowBox[{"(", 
        RowBox[{"odes", "/.", 
         RowBox[{"Thread", "[", 
          RowBox[{"var", "\[Rule]", " ", "vart"}], "]"}]}], ")"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.825398011682055*^9, 3.825398368561379*^9}, {
   3.825399122289693*^9, 3.8253991447812967`*^9}, {3.8254058424133797`*^9, 
   3.825405853614029*^9}, {3.8254062341945677`*^9, 3.825406234946637*^9}, 
   3.825406376070572*^9}],

Cell[CellGroupData[{

Cell["\<\
Changing virulence of the two strains of parasites (coinfection make \
transmission less efficient and cause more damage)\
\>", "Subsection",
 CellChangeTimes->{{3.8254072621745453`*^9, 3.8254072857649193`*^9}, {
  3.825407377426608*^9, 3.825407393078434*^9}, {3.82541136777547*^9, 
  3.825411371990757*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Common", " ", "parameters", " ", "for", " ", "both", " ", 
     RowBox[{"strains", ":", " ", 
      RowBox[{
      "same", " ", "transmission", " ", "rate", " ", "from", " ", "host", " ",
        "to", " ", "vector", " ", 
       SubscriptBox["\[Gamma]", "i"]}]}]}], ",", " ", 
    RowBox[{
    "same", " ", "transmission", " ", "rate", " ", "from", " ", "vector", " ",
      "to", " ", "host", " ", 
     SubscriptBox["\[Beta]", "i"]}], ",", " ", 
    RowBox[{
    "same", " ", "coinfection", " ", "transmission", " ", "rate", " ", "from",
      " ", "host", " ", "to", " ", "vector", " ", "and", " ", "vice", " ", 
     "versal"}]}], "\[IndentingNewLine]", "*)"}], 
  RowBox[{
   RowBox[{"commonpar1", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Nv", "\[Rule]", " ", "100"}], ",", " ", 
      RowBox[{"Nh", "\[Rule]", " ", "20"}], ",", " ", 
      RowBox[{"\[Gamma]1", " ", "\[Rule]", " ", "1.5"}], ",", "  ", 
      RowBox[{"\[Gamma]2", " ", "\[Rule]", " ", "1.5"}], ",", " ", 
      RowBox[{"\[Beta]1", "\[Rule]", " ", "1.45"}], ",", " ", 
      RowBox[{"\[Beta]2", "\[Rule]", " ", "1.45"}], ",", 
      RowBox[{"\[Gamma]12", " ", "\[Rule]", " ", "0.8"}], ",", 
      RowBox[{"\[Gamma]21", "\[Rule]", " ", "0.8"}], ",", 
      RowBox[{"dv", " ", "\[Rule]", " ", "1.1"}], ",", "  ", 
      RowBox[{"\[Beta]12", " ", "\[Rule]", " ", "0.7"}], ",", " ", 
      RowBox[{"\[Beta]21", "\[Rule]", " ", "0.7"}], ",", " ", 
      RowBox[{"dh", " ", "\[Rule]", " ", "1.1"}]}], "}"}]}], ";"}]}]], "Input",\

 CellChangeTimes->{{3.8254072014252377`*^9, 3.8254072488288603`*^9}, {
  3.825407294607746*^9, 3.825407366770584*^9}, {3.825407409603732*^9, 
  3.825407444530641*^9}, {3.825408434831793*^9, 3.8254084640653763`*^9}, {
  3.82540875906768*^9, 3.825408762821267*^9}, {3.8254089765768538`*^9, 
  3.8254090050821333`*^9}, {3.825409117291048*^9, 3.825409123941077*^9}, {
  3.8254091689543552`*^9, 3.8254091963300533`*^9}, {3.825410593806995*^9, 
  3.825410623835762*^9}, {3.825410660014988*^9, 3.825410660878598*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Parasite", " ", "2", " ", "is", " ", "more", " ", "virulent", " ", 
     "than", " ", "parasite", " ", "1", " ", "in", " ", "both", " ", "vector",
      " ", "and", " ", "host"}], ",", " ", 
    RowBox[{
     RowBox[{"i", ".", "e", ".", " ", "\[Alpha]2"}], " ", ">", " ", 
     "\[Alpha]1"}], ",", " ", 
    RowBox[{"\[Sigma]2", " ", ">", " ", "\[Sigma]1"}], ",", " ", 
    RowBox[{
    "Transmission", " ", "when", " ", "parasites", " ", "are", " ", 
     "coinfected", " ", "are", " ", "less", " ", "efficient", " ", "than", 
     " ", "transmission", " ", "when", " ", "parasites", " ", "are", " ", 
     "singly", " ", "infected"}], ",", " ", 
    RowBox[{
     RowBox[{"i", ".", "e", ".", " ", "\[Gamma]1"}], " ", ">", " ", 
     "\[Gamma]12"}], ",", " ", 
    RowBox[{"\[Gamma]2", " ", ">", " ", "\[Gamma]21"}], ",", " ", 
    RowBox[{"\[Beta]1", " ", ">", " ", "\[Beta]12"}], ",", " ", 
    RowBox[{"\[Beta]2", " ", ">", " ", 
     RowBox[{
      RowBox[{"\[Beta]21", ".", " ", "Coinfection"}], " ", "cause", " ", 
      "more", " ", "damage", " ", "than", " ", "single", " ", 
      "infection"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"parVeco1", " ", "=", " ", 
    RowBox[{"{", " ", 
     RowBox[{
      RowBox[{"\[Alpha]1", "\[Rule]", " ", "0.5"}], ",", "  ", 
      RowBox[{"\[Alpha]2", "\[Rule]", " ", "0.9"}], ",", " ", 
      RowBox[{"\[Alpha]12", " ", "\[Rule]", " ", "1.1"}], ",", " ", 
      RowBox[{"\[Sigma]1", "\[Rule]", " ", "0.4"}], ",", " ", 
      RowBox[{"\[Sigma]2", "\[Rule]", " ", "1"}], ",", " ", 
      RowBox[{"\[Sigma]12", " ", "\[Rule]", " ", "1.2"}]}], "}"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.825407030801943*^9, 3.825407032075163*^9}, {
  3.825408488315988*^9, 3.825408569291039*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"maxtime", " ", "=", " ", "4"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"maxpop", " ", "=", " ", "50"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"init", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"V1", "[", "0", "]"}], "==", " ", "15"}], ",", " ", 
     RowBox[{
      RowBox[{"V2", "[", "0", "]"}], "==", " ", "13"}], ",", " ", 
     RowBox[{
      RowBox[{"V12", "[", "0", "]"}], "==", " ", "3"}], ",", " ", 
     RowBox[{
      RowBox[{"I1", "[", "0", "]"}], "==", " ", "1"}], ",", " ", 
     RowBox[{
      RowBox[{"I2", "[", "0", "]"}], "==", " ", "2"}], ",", " ", 
     RowBox[{
      RowBox[{"I12", "[", "0", "]"}], "==", " ", "0.3"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sold1", " ", "=", " ", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"sys", "/.", "commonpar1"}], "/.", "parVeco1"}], ",", " ", 
       "init"}], "]"}], ",", " ", "vart", ",", " ", 
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0", ",", " ", "maxtime"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"vart", "/.", "sold1"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", "maxtime"}], "}"}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "maxtime"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "maxpop"}], "}"}]}], "}"}]}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<V1\>\"", ",", " ", "\"\<V2\>\"", ",", " ", "\"\<V12\>\"", ",", " ", 
      "\"\<I1\>\"", ",", " ", "\"\<I2\>\"", ",", " ", "\"\<I12\>\""}], 
     "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Evaluate", "[", 
   RowBox[{"vart", "/.", "sold1"}], "]"}], "/.", 
  RowBox[{"t", "\[Rule]", " ", "maxtime"}]}]}], "Input",
 CellChangeTimes->{{3.82539837125323*^9, 3.8253983930823708`*^9}, {
   3.825398698295349*^9, 3.825398879306521*^9}, {3.825399050709751*^9, 
   3.825399088281623*^9}, {3.825399129261237*^9, 3.82539920485401*^9}, {
   3.825399313889667*^9, 3.825399317922049*^9}, {3.8254058591117783`*^9, 
   3.8254058797556667`*^9}, {3.825405910725108*^9, 3.8254059275388727`*^9}, {
   3.825405974888533*^9, 3.825406040615662*^9}, 3.8254061531630297`*^9, {
   3.825408575200534*^9, 3.825408589087874*^9}, {3.8254093312583838`*^9, 
   3.825409342931078*^9}, {3.825409436977058*^9, 3.825409489288134*^9}, {
   3.8254103387566023`*^9, 3.825410363250174*^9}, {3.825410637909129*^9, 
   3.8254106382560873`*^9}, {3.825410668754446*^9, 3.8254106725467367`*^9}, {
   3.8254111129471073`*^9, 3.8254111285506687`*^9}, {3.8254112221521482`*^9, 
   3.82541123962532*^9}}],

Cell[BoxData["50"], "Output",
 CellChangeTimes->{{3.825398788228216*^9, 3.825398816403455*^9}, {
   3.825398851316318*^9, 3.825398879917914*^9}, 3.82539908235211*^9, {
   3.825399130344331*^9, 3.8253991750324*^9}, 3.8253992064541607`*^9, 
   3.825399318586678*^9, 3.825405688951028*^9, {3.825405860794012*^9, 
   3.825405881290172*^9}, 3.825405928206604*^9, {3.82540597575679*^9, 
   3.825406041333927*^9}, 3.825406154475486*^9, 3.825406712571233*^9, 
   3.825407034178493*^9, {3.825408584284737*^9, 3.825408589709197*^9}, 
   3.8254087672377863`*^9, 3.82540920521628*^9, 3.825409281273884*^9, 
   3.825409343587401*^9, {3.825409442756729*^9, 3.825409489933975*^9}, {
   3.825410339389065*^9, 3.82541036375718*^9}, {3.8254105995948877`*^9, 
   3.825410673092826*^9}, {3.825411113227463*^9, 3.825411129061138*^9}, {
   3.825411222854937*^9, 3.82541124029602*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.368417, 0.506779, 0.709798], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
rPl/wPCg9g==
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.880722, 0.611041, 0.142051], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.560181, 0.691569, 0.194885], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
BNf4wgIDn367fW3R/wPGpkqk
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.922526, 0.385626, 0.209179], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.528488, 0.470624, 0.701351], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.772079, 0.431554, 0.102387], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1:eJwd13c81e0bB3AjGeGoVJQyEqVCDhXhuiPZysgq/WzJKEWiIklEKpKINITs
kZV5bNkz65ihkuTJyCMPv/vur/N6//H93vP7ua4jbH3JwI6JgYHhMiMDA/nV
svvaTvvmoWzwTvO6FrUTvmQYWw/zG8HzUX2qhEkfbN3Q/fA9vy24Zs+85Qwe
gQ9lPs6eYq6wtfNjxDPZCZCU5014we8OknUKkxfTpoBh87cna4JesFVY+sy8
1yy0T5fesRLzAZcriU94WedB3+ZjoVWkH7QJdjKeWPsNCm3UrHD+u3BpHaPa
dtsV2K0Ul1QVew9ObLbqd4thQJwpbC/nBe/DhimdrUcUmdH81quRe+JDYBtd
M9eZdz0a9B8MNRZ7CJy8toN5u9mRzVJ8ZZXRY9B/c0fwsCMn6pE0Uz4XGQZb
lKxX/D5TEC2mSi6UPwL0hk9njuRvRrId17P3nH0KRkaf0EjxFpTMJnmwLDYS
Ui3T4/W7t6FwjyjRn4LRkHUh1vCIogCyOeWyWV8sDuQt3EJaakRQb4DIo28O
L6HXs1FGfH43EhtyYqkwegXmE8FmbMJ70HNeYT+zyNfQvcTcuOOyOPL3C7ke
zP8WPLPDK2RL9qMyAft846K3oLJ5RE+n4ABaKkDzImcTwGUtPoY16SCSMdwh
8/NPAkgr8A5WB0si55mFS8WxiYDOmoSxW0uhxPtt6YFKSWB/ZtofbZVGI6Kp
3w2HkgB1Vxv+5y6NjM5aOkwLJsNdb2mt6V2H0MNFhYRCWjLs98jcqHTxEKoP
2/L5rlUKXHh9XFIz8xBiOjgrpM+UCsaJ8knKM4eQUn3D+Z3xqeDdZ/jVSFwG
XbdJiP2mmgateearDeYyKGfVtz9vPA02dytrTAbJoOloc747Aeng0fStfzZb
BonJyRnriWWAyjF5maOfZJBlGyVie10G7NEX/r5hUQbFOE21TzpkgqIKb0LJ
Ripy8h8LNFuXBeVKeavP91ERW3trYrlRFshcOpW7qERFCbtKa/YkZMHEed3h
naeoSMU5ZTxkIQt8dPw1zllQ0fCHZ8y/1LLBko/7x/IFKrrJGiBiGpkNr83e
hcAVKuI/c+V42WQ27HT5ftrZi4ry3/zPUvRIDmTOCj8v96Eiw1kd3+DAHEDy
5o1X71DRrJJC3GwPtu7Rw+V3qSg0RLzUeO97MNAU5+kKoCKJPl56yfX38KG9
MmgEu06M6Y/Ix/eQ7slezY1t6/6T/z5/LthKf2QJ8KciKnO4d87lXOBOq9GT
8aMipnDZgYG6XHjbspnDBI/fJtRzjEUwD5z7gz9suUFFLzO9YiWv5YFe88K1
B55U5Kos8J9Jcx5YMrue6L5KRYrNZRZ+ovlws/eyxfrLVNQ/xSzY1ZEPfSG6
9o54/e+8En3/21cA5pVCtAJbKvJk0xwR8ysAWtI6urgVFZ189h2d7i2AwKC8
7Aq8f7xiD197SRVCHefI8RBzKvqcK80Uf68QFj696QoyoaIc1U7rpsFC2Nb+
SarUiIpud3hULch+AJaBzIZ9BlR0yopPVPDBB0jrDWdvxeeza7borsbnD2Cj
Lu2UpktF0z4WE24KRfD9qUUmTZuKirkYTsaEFUHyM/Nldi0qCo59k1j9tQj0
WxqWAzSoyHS/GusMFENZj+J6GXUqEi/64rDtWTGIZHAf2nCSihY1guvRTDG8
qI605VajouqeA/suqpVAonbu1aMnqOiJfev9J7ElwP9nat89VSqyXnCbKpkr
AR5FO9N5FSqSvsurPalVCo927RzzxV7bVJBKeVMKfEKiVXuwW16bccr/WwpS
XKN8n49TUaz0irP16TK4HHZPLA/bqTyuOSSpDN5665tFYyvoHZfMWy2DuGgX
rVBstsHPD4fOlMPZiGbaQ+wep3s/WdPLId3/TnYMtuEt3nd8TDQAURXIwS6q
tjNNP0iDGjb5ojZsEc4CNhUzGmwzMnmxgH3fkO3Dp7s0UA5QDRXE85t9bubo
lEUDiwkLY11s07EUfgY6DVw8Dk/dwi7ft/IxgrUCXin8PJeFLeam672PWgHz
Hqljn7EX1n72GwRXQK2Vd5A23p/wnXKxCUcrIcp7RJ0H79+y7T0dBdtK6MhY
uKWEbZXWs9LyqBKsjQUrLmBLH/O2WJqshE1+iwIfsJ/daeQK3VQF0SwjIkPY
qx8FyoSVqyC86Qc3Iz6fZtPyXdpPq6CQW6AUYcu+4mkdplWBwZG8WAvs2C9W
vu7TVbCbiznmOjaz1Hspdr5q+HmhtTkM++K1dSMvVKthT/d17WTsjtIzj2Uu
VUP4/Sf7y7HlWZJQ3fNqkCz1COzEZovQfD37TzXYV8bwLmH/OTr65/X2GhBx
kHNkxfdnZvC6saFqDew/fbN0C/bIHZ7sdc410GEWtHs3dqf4uw35ETUQ5/4h
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
Tw==
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None}, 
     PlotRange -> {{0, 4}, {0, 50}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{0, 0}, {0, 0}}, Ticks -> {Automatic, Automatic}}],
   FormBox[
    FormBox[
     TemplateBox[{
      "\"V1\"", "\"V2\"", "\"V12\"", "\"I1\"", "\"I2\"", "\"I12\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.528488, 0.470624, 0.701351]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.772079, 0.431554, 0.102387]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6}], "}"}], 
           ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.825398788228216*^9, 3.825398816403455*^9}, {
   3.825398851316318*^9, 3.825398879917914*^9}, 3.82539908235211*^9, {
   3.825399130344331*^9, 3.8253991750324*^9}, 3.8253992064541607`*^9, 
   3.825399318586678*^9, 3.825405688951028*^9, {3.825405860794012*^9, 
   3.825405881290172*^9}, 3.825405928206604*^9, {3.82540597575679*^9, 
   3.825406041333927*^9}, 3.825406154475486*^9, 3.825406712571233*^9, 
   3.825407034178493*^9, {3.825408584284737*^9, 3.825408589709197*^9}, 
   3.8254087672377863`*^9, 3.82540920521628*^9, 3.825409281273884*^9, 
   3.825409343587401*^9, {3.825409442756729*^9, 3.825409489933975*^9}, {
   3.825410339389065*^9, 3.82541036375718*^9}, {3.8254105995948877`*^9, 
   3.825410673092826*^9}, {3.825411113227463*^9, 3.825411129061138*^9}, {
   3.825411222854937*^9, 3.825411240449319*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
   "43.16277759848628`", ",", "34.20134046809206`", ",", "17.13265273339559`",
     ",", "0.36775182962488584`", ",", "0.29075848607091964`", ",", 
    "19.27495454967718`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.825398788228216*^9, 3.825398816403455*^9}, {
   3.825398851316318*^9, 3.825398879917914*^9}, 3.82539908235211*^9, {
   3.825399130344331*^9, 3.8253991750324*^9}, 3.8253992064541607`*^9, 
   3.825399318586678*^9, 3.825405688951028*^9, {3.825405860794012*^9, 
   3.825405881290172*^9}, 3.825405928206604*^9, {3.82540597575679*^9, 
   3.825406041333927*^9}, 3.825406154475486*^9, 3.825406712571233*^9, 
   3.825407034178493*^9, {3.825408584284737*^9, 3.825408589709197*^9}, 
   3.8254087672377863`*^9, 3.82540920521628*^9, 3.825409281273884*^9, 
   3.825409343587401*^9, {3.825409442756729*^9, 3.825409489933975*^9}, {
   3.825410339389065*^9, 3.82541036375718*^9}, {3.8254105995948877`*^9, 
   3.825410673092826*^9}, {3.825411113227463*^9, 3.825411129061138*^9}, {
   3.825411222854937*^9, 3.825411240454977*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Parasite", " ", "2", " ", "is", " ", "more", " ", "virulent", " ", 
     "than", " ", "parasite", " ", "1", " ", "in", " ", "vector"}], ",", " ", 
    
    RowBox[{
     RowBox[{"i", ".", "e", ".", " ", "\[Alpha]2"}], " ", ">", " ", 
     "\[Alpha]1"}], ",", " ", 
    RowBox[{
     RowBox[{
     "but", " ", "it", " ", "is", " ", "less", " ", "virulent", " ", "than", 
      " ", "parasite", " ", "1", " ", "in", " ", "host", " ", "\[Sigma]2"}], 
     " ", "<", " ", "\[Sigma]1"}], ",", " ", 
    RowBox[{
    "Transmission", " ", "when", " ", "parasites", " ", "are", " ", 
     "coinfected", " ", "are", " ", "less", " ", "efficient", " ", "than", 
     " ", "transmission", " ", "when", " ", "parasites", " ", "are", " ", 
     "singly", " ", "infected"}], ",", " ", 
    RowBox[{
     RowBox[{"i", ".", "e", ".", " ", "\[Gamma]1"}], " ", ">", " ", 
     "\[Gamma]12"}], ",", " ", 
    RowBox[{"\[Gamma]2", " ", ">", " ", "\[Gamma]21"}], ",", " ", 
    RowBox[{"\[Beta]1", " ", ">", " ", "\[Beta]12"}], ",", " ", 
    RowBox[{"\[Beta]2", " ", ">", " ", 
     RowBox[{
      RowBox[{"\[Beta]21", ".", " ", "Coinfection"}], " ", "cause", " ", 
      "more", " ", "damage", " ", "than", " ", "single", " ", 
      "infection"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"parVeco2", " ", "=", " ", 
    RowBox[{"{", " ", 
     RowBox[{
      RowBox[{"\[Alpha]1", "\[Rule]", " ", "0.5"}], ",", "  ", 
      RowBox[{"\[Alpha]2", "\[Rule]", " ", "0.9"}], ",", " ", 
      RowBox[{"\[Alpha]12", " ", "\[Rule]", " ", "1.1"}], ",", " ", 
      RowBox[{"\[Sigma]1", "\[Rule]", " ", "1.2"}], ",", " ", 
      RowBox[{"\[Sigma]2", "\[Rule]", " ", "1"}], ",", " ", 
      RowBox[{"\[Sigma]12", " ", "\[Rule]", " ", "1.2"}]}], "}"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.825399373963058*^9, 3.825399394229813*^9}, {
  3.82540570299387*^9, 3.825405703918707*^9}, {3.825405760447379*^9, 
  3.825405761533997*^9}, {3.82540648224083*^9, 3.8254064828384113`*^9}, {
  3.825408603032525*^9, 3.825408628020513*^9}, {3.825408676464486*^9, 
  3.8254087035057*^9}, {3.8254110629858437`*^9, 3.825411092483028*^9}, {
  3.825413180672249*^9, 3.82541318245893*^9}, {3.8254132794678907`*^9, 
  3.825413279668614*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"maxtime", " ", "=", " ", "40"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"maxpop", "=", "50"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sold2", " ", "=", " ", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"sys", "/.", "commonpar1"}], "/.", "parVeco2"}], ",", " ", 
       "init"}], "]"}], ",", " ", "vart", ",", " ", 
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0", ",", " ", "maxtime"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"vart", "/.", "sold2"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", "maxtime"}], "}"}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "maxtime"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "maxpop"}], "}"}]}], "}"}]}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<V1\>\"", ",", " ", "\"\<V2\>\"", ",", " ", "\"\<V12\>\"", ",", " ", 
      "\"\<I1\>\"", ",", " ", "\"\<I2\>\"", ",", " ", "\"\<I12\>\""}], 
     "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Evaluate", "[", 
   RowBox[{"vart", "/.", "sold2"}], "]"}], "/.", 
  RowBox[{"t", "\[Rule]", " ", "maxtime"}]}]}], "Input",
 CellChangeTimes->{{3.825405766951239*^9, 3.8254057929371023`*^9}, 
   3.8254070619942503`*^9, {3.825408633800784*^9, 3.825408641564452*^9}, {
   3.825408682982314*^9, 3.825408683659997*^9}, {3.8254093041403303`*^9, 
   3.825409323936455*^9}, {3.825409495352653*^9, 3.8254095047638407`*^9}, {
   3.825410369901394*^9, 3.825410377988632*^9}, {3.8254106936298637`*^9, 
   3.825410696837109*^9}, {3.8254110996984053`*^9, 3.825411132184651*^9}, 
   3.825413246468*^9}],

Cell[BoxData["50"], "Output",
 CellChangeTimes->{{3.8254057751313057`*^9, 3.825405793969738*^9}, {
   3.825407042622898*^9, 3.825407063222561*^9}, 3.825408644019781*^9, 
   3.825408684325721*^9, 3.8254087960669928`*^9, 3.8254092162386723`*^9, {
   3.825409286599901*^9, 3.8254093245626*^9}, 3.825409446793435*^9, 
   3.825409505337945*^9, 3.825410378637724*^9, {3.825410679822175*^9, 
   3.825410697466248*^9}, {3.825411073981868*^9, 3.825411132691092*^9}, 
   3.8254131843373547`*^9, {3.825413243031166*^9, 3.8254132469585037`*^9}, 
   3.82541328113441*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.368417, 0.506779, 0.709798], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
zMc2XDa37d/6OgWmGDbW/w/eM52o
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.880722, 0.611041, 0.142051], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.560181, 0.691569, 0.194885], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
qgV2HgqtqiFDpD/VZbOySxsbZOi8SPX/AEG8jQ8=
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.922526, 0.385626, 0.209179], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
bWwYQNuLTf8PEj3xxQ==
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.528488, 0.470624, 0.701351], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1:eJwl1Hc81d8fB/BrprLntSVJVggJOW8UIqVSRkmUPSopioyUIlJZTakkDaTi
J1mVERH6XCvrm+xsIvt3Pvf+dR/PxznnfV6P93nfzzrnk/tdmCkUSgIThUL+
PgxxZlc/8cpgtnH3+tsUCqTYD+vayESh8dT3XMx8QtBqGe0nI3MX5ZZPZBQ4
ioLG1rqna1qeoNGtl8tE+QQhwNSOm03mBRrJFl/Md2SHQpvfgStu2agtZzY0
9eoUYnqfN7HY/BY1LAiWytn8QnKFC/LzC7kot3rToYilZmRSBkdmpT+gXWqz
WbX8Lci95sqtaeNCJOi5h2nFqBVdp1VXTLiVoOOr7Wt5vVuRzeiqkNmdnxDv
D5OCAz14v99L6kzzZxSWhFIdNVvQ+Znd76Y9ytCNos/pi3ebUfSFMcuphXKU
776qola6GT1YvjUwEVuJav1Hbp8qaUKZlzQjxqWrUEiGQ92R002omL1Zciyn
GtXuWdC7ptaE6qPP548Y16DuNZcf9841ol/cEgeGG2vRfJzBiN+3RjR5u3hk
yK0O7WzLv/bmaSO6dF2tbDq4Hm3i8TzqFd6IomvD+aZ3NqDff4N0XxxvRPE8
xNEp7h+I+kcnJ2VXI3qwT+71ZPMPpKDs05uu0YjS4s/OTaQSKOhEt5a+VCPK
bKwwmfCgoYd/spcn1jaiPBFqwjjep6FPvXVygYaK7Tx+jS00okrVpye8h2mo
8n6B6lhZE2ou2Tn0upOG6jvWBo/GNqO+7TUbKD9o6JdTlvCIdCsK1JtX2PGR
hoaerhwfHmhFXkeO9M2+oaHJXqucPzk/0QbR6HnD5zTE6jllMWTcjlYL3KVa
JdIQ5+sddwc5O9CIJ/f4TAwNCY0m9g00diDZ1RxF/y7TkLyfTni/Wxd6WLfN
avAsDVF/7nA7Q/0PqTik3azypSGJoBGuqeD/UOjGKwb9bjQkV2RweHLnLxQl
z2Tx1Z6GtA1//R1v7kbWnye6SoxoSLc76sEp/d9Id1DRVG47DRlEaBiPp/5G
vY8GMzK30pBpecTNMY8e1BhdvqKgQkO2u+SVRhd6Ua6CXeZDURo6MvS9wedY
HxJRmZBkFaIhp+sBgSNlfUjgvuKqSF4a8qz9Wj4c24+0v8myt66ioaB9Xsf+
SA+iLo7Bx89nCbQcoS3aFTOIvLtH2S5PESgsj+nHj7lBdC7TC10YI9Bl8TvG
BcQQSh/85ZPTT6AbvWXyUVeHkZ1pWLVOK4F4qTe7gqeH0fFfW3MaGgl02/zw
nVNOI0jpxu/g0B8ESs6eWG2rN4oqO0ffidQQKPW81Ij82BiKV2D6qFxKIL6m
6f1cquPomvtcz9EiAu0/ab/56olx9Iy5VvZJAYEaH28YuNAwjljLctTscwn0
k73QzvnVBIo7Yxh85RWBxFPXabf/mkAjhn0SWi8IdGTbVf5D1En0W9Hl02Q6
gTq99n/bdWUSaZ97n5v0hEC/6wf01R2n0LkFPrvAewSS89wj+ipxCj21imKK
u0MgV5b3f+VqptAEu4haThKBBrRCs6jbptFug3dMIvEEGr4nJEMR+IuKVv2n
6BRDIBXNoMXzu/6ijuKShzXRBPKt/a9lKvQvStpzPNYwikATK69u9Q//RV+i
Ti+ZRBJo5oQRS13FDHKWdttYEEagrcvPu8yWZpCb5tkgr1ACBSZzFX7eMov6
WjY8lQsh0EJVi39e6iySt2nMygwiEGXzyb6HF/6hYNfCZqEAAhl+pX0WyfmH
Cnw/NFLOEeiSk+6jW/3/UOXbU+aT/gRiTWCzvWI9h0aDzs/3+xFo9dz9Km/V
eVTPNXBG7CSBdK62XjB3mkfj225I7PAlkLuQiLJCwjxiLok56edDoAr12zd+
z82jEqrHy3YvPA+e1w7Yly8gVrMfH3vcCfT+Xzmrzr8FZCvaP62G/TuSJU9I
aRHZLZsJh7sRyOhpCLXh5iIyUaAVKrvi/O3+HaZHltCHiOdm2ccJpOb59saG
uCW0uasskIrt+G8MsXxeQqVsrqOXnQlULOj1pHjjMnIbvHDMzQl/Nyyd3LSm
ltH9qXsXrBwJ9LIthSogv4KuDe/903AUz4dHe9W47QoKOlcnfghbJ9JG+XXx
CsrYoRHm6oDPd6UH8u2kwMjduKxnh/G8pu/cF3aUArYPLC7qYb/06dk0FkAB
3zXOdwl7XG9hXVvNSwrobQqPWIOtQ324/RovE3CsGi68ZUsgqy494dlNTFBi
GJukg+2e/nPUxZgJHkQ5Hftlg+dfk5pqfI4JbuwKu6ODPWMVz7zSxgQZDnNO
iwcJxE3VaPP5ywQWA2E3c7Dlu+rftXMzw7O0Ngd37IM+3C4FhszwqPpO1k9r
3O+oqMqzz5mhZJvrloYDBKqxUkjtKWWGH0EPnW9j/xapDDzwkxmqG5VHrbH5
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
BWZ/03JJH1MuWC5ckIJKUfM3pI/35Zr3C0tDZHllJmnX1JwkPg1p+FDh9Iq0
t+ALVVd3afgvaTCdtN+11IqCFGmYk+t6QjpgMfkoT6M0fFkLj0gb5Jsu5LDJ
gN+qyfukDf2MTdtlZCC5u/UO6R3KKJ5dXwZyni8m0vvfp9ulZiMDJgGO8aT1
9q7ZPRglAz5SenGkN+e35j8ulIEu387rpNeve7HBfkwG1gd2XyMtEh14m192
HfxK84gkvXJYxDvi6jrQkmm9RLpfJW/n9PA6oKjahtHfUyhVv+WdLBymXL1I
OmgxakvhhfWQkzofRPoT+4c91/bLQUPSWrpX8Q14WCtugEO87y6QZh8715I9
tQHi96XQzVbLZrq2SB5Y5J7RTfne2roneSOk5nyhe+F7pvft0wrw9P0k3acE
VI1bTDfBXZYz9Pq9NlmiUlKKcH6AGkxa4NQN46leRdi59JJuw2u+Pl8zlSAn
g5Oe1+tL/Mcrkcqw0ZGf7sTl/NXGjiogtCmUvj+Qy+BV3CZVyLvqQa9/WOLL
7vYpVYgdr6Tfr7snlp+vbjMIRD+mm7NUaVj2oBpwe1bRnT/fd6q4VA16zZfo
dtF68tdOWR0IKQq93qgdl1zRTXW4KNFDXw8ICdwv81cdtCS/0R2iyR4/66QB
vub/o/vKUDzx/bsGfFXNpts9uqHIR3MLSE/k0r1bkSeD894WcESMfMN/ZN+/
XtoCZpJ1dMdmapfudtKER1MMv6b4dB6r1YTawFq6qw88XfTfpgWstjV0l9+M
KrNK0YKbTfV0l9aejFFm0YbCi810b3sQ6Bp8Shv2LrfT/dYzHGo6sH3+o3vA
/pi+5K6tsCb0F91SFkjH9/1W4KIw1tU2fO+IpOqAW0sH3cYrRyIeBetAmHcn
3TRPbj3lQR0QcmKcP9FUMpl/cBuYlvfS3aC0zprr4zbI3jlEt0H4pVwnGV1I
2zfK6M+/Dzr/i9CFH5wTdN8+OfGRs18XKisY1g202Ne0Xw9aTozR3R32rO9R
sR78Lh6g2/VM9gb19fog/I+R94/LhxOfr+rDzdk2ukcHe3Mrp/WB2NhK97gP
/6pap+2w81QL3XVto0z3KrfDaypjPWvXt0VXFQNYE/6TbvPWi6JatwzgqASj
f33uatosfw1gxI/RD0o0m8tOJwTz7Ix+iL36GX+1FkG3MGOdo21znpkoQPVV
Rp6IY35Pai2wjRj1i1QrkmMuAZzZwrh/dlE01uIDgM5ZRj7edluBtWMALuwM
K3xMvlstZwi9XYz3VY3Lmh45ZAgp8wxrHS/fyxdlCMf3MvbPh4688y0xBMUh
hksfCFFr/hpC+EfGff5ZQvtiFYxglTkjj0KpUPSew0ZwJ4Hhgm6KNW+sETRl
M2zJNiz5o9gI/HIYTjk1MF47bQS8mQyPt/V8qVI0hnMFDKvpf/Da5GAMRjSG
Tz6IFYiKM4a2EYaFzewjyyqN4fY8w8VT8nMrK8YQ0Mvw/wE81++c
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.772079, 0.431554, 0.102387], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None}, 
     PlotRange -> {{0, 40}, {0, 50}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{0, 0}, {0, 0}}, Ticks -> {Automatic, Automatic}}],
   FormBox[
    FormBox[
     TemplateBox[{
      "\"V1\"", "\"V2\"", "\"V12\"", "\"I1\"", "\"I2\"", "\"I12\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.528488, 0.470624, 0.701351]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.772079, 0.431554, 0.102387]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6}], "}"}], 
           ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.8254057751313057`*^9, 3.825405793969738*^9}, {
   3.825407042622898*^9, 3.825407063222561*^9}, 3.825408644019781*^9, 
   3.825408684325721*^9, 3.8254087960669928`*^9, 3.8254092162386723`*^9, {
   3.825409286599901*^9, 3.8254093245626*^9}, 3.825409446793435*^9, 
   3.825409505337945*^9, 3.825410378637724*^9, {3.825410679822175*^9, 
   3.825410697466248*^9}, {3.825411073981868*^9, 3.825411132691092*^9}, 
   3.8254131843373547`*^9, {3.825413243031166*^9, 3.8254132469585037`*^9}, 
   3.825413281336514*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
   "42.81939890422096`", ",", "34.52775595542826`", ",", 
    "17.145028168443655`", ",", "0.35463212665751787`", ",", 
    "0.30129777906002836`", ",", "19.275615479095645`"}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8254057751313057`*^9, 3.825405793969738*^9}, {
   3.825407042622898*^9, 3.825407063222561*^9}, 3.825408644019781*^9, 
   3.825408684325721*^9, 3.8254087960669928`*^9, 3.8254092162386723`*^9, {
   3.825409286599901*^9, 3.8254093245626*^9}, 3.825409446793435*^9, 
   3.825409505337945*^9, 3.825410378637724*^9, {3.825410679822175*^9, 
   3.825410697466248*^9}, {3.825411073981868*^9, 3.825411132691092*^9}, 
   3.8254131843373547`*^9, {3.825413243031166*^9, 3.8254132469585037`*^9}, 
   3.825413281342904*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"min\[Sigma]1", " ", "=", " ", "0.1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"max\[Sigma]1", " ", "=", " ", "2"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"intv\[Sigma]1", " ", "=", " ", "0.1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numsol1", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"NSolve", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{"odes", "\[Equal]", "0"}], "]"}], "/.", "commonpar1"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\[Alpha]1", "\[Rule]", " ", "0.5"}], ",", "  ", 
           RowBox[{"\[Alpha]2", "\[Rule]", " ", "0.9"}], ",", " ", 
           RowBox[{"\[Alpha]12", " ", "\[Rule]", " ", "1.1"}], ",", " ", 
           RowBox[{"\[Sigma]2", "\[Rule]", " ", "1"}], ",", " ", 
           RowBox[{"\[Sigma]12", " ", "\[Rule]", " ", "1.2"}]}], "}"}]}], ",",
         " ", "var"}], "]"}], "[", 
      RowBox[{"[", "15", "]"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
      "\[Sigma]1", ",", " ", "min\[Sigma]1", ",", " ", "max\[Sigma]1", ",", 
       " ", "intv\[Sigma]1"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.825411326334345*^9, 3.825411348638297*^9}, {
   3.825411382816636*^9, 3.8254115118056707`*^9}, 3.825411569663025*^9, {
   3.825411713851438*^9, 3.825411776571382*^9}, {3.8254118379230824`*^9, 
   3.82541189051723*^9}, {3.8254120964608107`*^9, 3.825412134824095*^9}, {
   3.825412185511791*^9, 3.8254121884245653`*^9}, {3.825412300586228*^9, 
   3.825412333779685*^9}, {3.825412706109736*^9, 3.82541276987919*^9}, {
   3.825412806900247*^9, 3.8254128080748568`*^9}, {3.8254128819995527`*^9, 
   3.825412883483485*^9}, {3.82541306731802*^9, 3.825413123019322*^9}, {
   3.825413372742237*^9, 3.8254133740396338`*^9}, {3.82541342672943*^9, 
   3.825413427745574*^9}, {3.8254135042322397`*^9, 3.82541350572506*^9}, {
   3.825413540315407*^9, 3.825413559486888*^9}, {3.82541366935431*^9, 
   3.825413669737103*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numsol1", "[", 
  RowBox[{"[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.825413579841262*^9, 3.825413584313855*^9}, {
  3.825413625356393*^9, 3.8254136263442097`*^9}, {3.825413672194195*^9, 
  3.825413672437374*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"V1", "\[Rule]", 
    RowBox[{"-", "21.897258570308363`"}]}], ",", 
   RowBox[{"V2", "\[Rule]", 
    RowBox[{"-", "21.976871744805774`"}]}], ",", 
   RowBox[{"V12", "\[Rule]", "42.25858065515177`"}], ",", 
   RowBox[{"I1", "\[Rule]", 
    RowBox[{"-", "1.3761239048672411`"}]}], ",", 
   RowBox[{"I2", "\[Rule]", 
    RowBox[{"-", "1.449329968106613`"}]}], ",", 
   RowBox[{"I12", "\[Rule]", "2.73484591087936`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8254135847381163`*^9, 3.825413626915174*^9, 
  3.825413684444384*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", 
   RowBox[{
   "min\[Sigma]1", ",", " ", "max\[Sigma]1", ",", " ", "intv\[Sigma]1"}], 
   "]"}], "[", 
  RowBox[{"[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.825413600991888*^9, 3.8254136206780443`*^9}, {
  3.825413674841161*^9, 3.825413675068819*^9}}],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{{3.825413612639533*^9, 3.825413621217338*^9}, 
   3.825413684510817*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"V1", "/.", "numsol1"}], ",", " ", 
     RowBox[{"V2", "/.", "numsol1"}], ",", " ", 
     RowBox[{"V12", "/.", "numsol1"}], ",", " ", 
     RowBox[{"I1", "/.", "numsol1"}], ",", " ", 
     RowBox[{"I2", "/.", "numsol1"}], ",", " ", 
     RowBox[{"I12", "/.", "numsol1"}]}], "}"}], ",", " ", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", " ", 
   RowBox[{"DataRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"min\[Sigma]1", ",", " ", "max\[Sigma]1"}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.825411892710473*^9, 3.8254119053498077`*^9}, {
  3.825411953348393*^9, 3.825412021195259*^9}, {3.825412237612364*^9, 
  3.825412294650478*^9}, {3.825412356326302*^9, 3.825412380674947*^9}, {
  3.825412692658876*^9, 3.825412694119276*^9}, {3.825412785122067*^9, 
  3.8254127899500732`*^9}, {3.825413524475408*^9, 3.825413525812583*^9}, {
  3.825413788078333*^9, 3.8254137906221046`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmCOy0X9rNxM293NUBwj9pL3H5XZ/2QlcHYzC4
bN/0Ztb98Nkw+Zv2a3cxXO+f6urAAAYP7GNYzvpf7oepf2wf8ztKVanL1SEN
DJ7Zv3uy3rimxdUBrH3mS/sXT8vCH9a5OpwBgzf2SZ//5AZWujr8B4P39tvb
r+/Z9NT0AET9R/ukSd2vA/NcHUzA5n+233kukP/cVdMDZ8H6v9gz/7iyqCbZ
1SEdbN83+yKG1c2KcTD3/bAXn10/+UIEzP0/7evXL9ncGQxz72/7ZYs/HvXx
c3WAmPfHPtbjwBpJT5j7/9mr333p9cEZZh6DQ4/mkeYLdq4OAPHOmV0=
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmCOy0T95Uer6Tw9EBwj9pf2ZJt5cEn6ODMRhc
tveZuXXeHGGY/E37x6dEX4lJOjowgMED+0XdHl7tcjD1j+2fN6Xfeavs6JAG
Bs/sZ17h2eul6egA1j7zpf0mvTCOeXqODmfA4I29/p7nN58bOzr8B4P39seD
XVxEfpkegKj/aP9qpWpNvJ2jgwnY/M/2T5MeXFr43PTAWbD+L/Zy+VfKN3k4
OqSD7ftmbxM8pfycL8x9P+z9FCRmPQyCuf+n/fvXf76/Doe597e9wIuqlW9j
HB0g5v2xv7Yw/dizRJj7/9lP07dIu54GM4/BYZk/84L92Y4OAIXSlhc=
      "]]}, 
    {RGBColor[0.560181, 0.691569, 0.194885], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmCOy0rzHz+VSnYOgA4Z+0t3LbdeIHkG8MBpft
oy97Ls1XhMnftH/SsmPaYyCfAQwe2Mt+y1sdogRT/9g+iKf54yEgPw0MntlL
WO4q01M2dABrn/nS3nhlt8d0IP8MGLyxZ09UKvkL5P8Hg/f2yxcc0JZUdIWq
/2jfJX+b+5CKoYMJ2PzP9iKfbG3T+V0dzoL1f7HXyZi6sEbV0CEdbN83++OT
13peU4W574e9wLrdU3TVYO7/aZ/kwt3XpAZz7297+8hVDleBfIh5f+xff8/a
rqoOc/8/+727n/wpVoeZx+AQ6F0mfQDIBwBirosx
      "]]}, 
    {RGBColor[0.922526, 0.385626, 0.209179], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmCOy0X6Iy84zf/ev2EP5J++4VUk1LDl23NwaD
y/a7G+QP2i+Dyd+0XyL1qFG+67o9Axg8sHcVlDrklAdT/9j+zqOrLSuCrtun
gcEze73HoZf8za/bg7XPfGl/o/DFdnOZ6/ZnwOCN/Z/M4+7xjNft/4PBe/vd
Ca/qZ7F82w9R/9He4KHy8cwz1+xNwOZ/tl+kpL7wLvO3/WfB+r/Y80Qfsc+Y
cc0+HWzfN/uFPOevH6i7BnXfD/uD9888D069BnX/T3vBo78WKPhcg7r3t/1f
/0kWasbX7CHm/bFn/7f+ebLUNaj7/9l3+Vm9vsEIM4/BoWvOyeaWl1ftAZNt
obA=
      "]]}, 
    {RGBColor[0.528488, 0.470624, 0.701351], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmCOy0V6xjrlaIuGQP4Z+0D9Cb7jkn75K9MRhc
ttfmObDoWwtM/qa97BznW/qzL9kzgMED+zTNaU4eG2HqH9ufW/lIx+H4Jfs0
MHhmn5An9FL87iV7sPaZL+3bJl85ev7TJfszYPDGfpLBUoEMjsv2/8HgvT23
+KN5JQbf90PUf7QXPt2jYA10hwnY/M/2y4rNXJbofd9/Fqz/i/2G7RtzJ8de
tk8H2/fNvqfxs8OkostQ9/2wZ8srtS5uvwx1/0/7nha2xWZzLkPd+9veWqB0
z50Nl+0h5v2xXy495XTq0ctQ9/+z33LIQfjSTZh5DA7PE9KvKr67bA8ABIuc
iQ==
      "]]}, 
    {RGBColor[0.772079, 0.431554, 0.102387], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQPWsmCOy0n6Wx8bOXm7EDhH/S3k1illYwkG8MBpft
xbTaPkbB5W/a3+y975UE5DOAwQP7TbMYLTPh6h/bM9pa7ssH8tPA4Jl9a8LR
O6VAPlj7zJf2l8KuT6sG8s+AwRt7Y6vJ7xqA/P9g8N6edc60J98esELVf7T/
HxZZ3wWUNwGb/9k+2Xie0f97rA5nwfq/2KuL2c2fBJRPB9v3zd6HZYvmNLj7
ftjP/rcqdibc/T/t25K+2MyBu/e3/cR/YSfnAfkQ8/7YG0T3syyEu/+ffRhj
wIdFcPMYHPbuc+xbAuQDAD5Qjgg=
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0, 2.}, {-21.976871744805774`, 43.305024505846895`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8254118952996902`*^9, 3.825411905936824*^9}, {
   3.8254119546505833`*^9, 3.8254120219907837`*^9}, {3.825412240294414*^9, 
   3.825412254138011*^9}, {3.82541229514713*^9, 3.825412381334158*^9}, 
   3.825412694521694*^9, 3.8254127904099607`*^9, 3.825413091600259*^9, 
   3.8254133833618917`*^9, {3.825413515708467*^9, 3.825413571759839*^9}, 
   3.825413692013402*^9, 3.8254137912608957`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mutant\[CloseCurlyQuote]s dynamic of strain 1", "Section",
 CellChangeTimes->{{3.796962389198862*^9, 3.796962392836321*^9}, {
  3.799130634358424*^9, 
  3.7991306367525263`*^9}},ExpressionUUID->"0c90a2a2-d6f0-4642-8cd1-\
5c1789ffee25"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dV1mdt", " ", "=", " ", 
   RowBox[{
    RowBox[{"\[Gamma]1m", "  ", "\[ScriptCapitalV]", " ", "I1m"}], " ", "+", 
    " ", 
    RowBox[{"\[Gamma]12m", " ", "\[ScriptCapitalV]", " ", "I12m"}], " ", "-", 
    " ", 
    RowBox[{"\[Gamma]2", " ", "I2", " ", "V1m"}], " ", "-", " ", 
    RowBox[{"\[Alpha]1", " ", "V1m"}], "  ", "-", " ", 
    RowBox[{"dv", " ", "V1m"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dV12mdt", " ", "=", " ", 
   RowBox[{
    RowBox[{"\[Gamma]1m", " ", "V2", " ", "I1m"}], " ", "+", "  ", 
    RowBox[{"\[Gamma]12m", " ", "V2", " ", "I12m"}], " ", "+", " ", 
    RowBox[{"\[Gamma]2", " ", "V1m", " ", "I2"}], " ", "-", " ", 
    RowBox[{"\[Alpha]12", " ", "V12m"}], " ", "-", " ", 
    RowBox[{"dv", " ", "V12m"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dI1mdt", " ", "=", "  ", 
   RowBox[{
    RowBox[{"\[Beta]1m", " ", "\[ScriptCapitalS]", " ", "V1m"}], "  ", "+", 
    " ", 
    RowBox[{"\[Beta]12m", " ", "\[ScriptCapitalS]", " ", "V12m"}], "  ", "-", 
    " ", 
    RowBox[{"\[Beta]21", " ", "I1m", " ", "V12"}], "-", " ", 
    RowBox[{"\[Sigma]1", " ", "I1m"}], "  ", "-", " ", 
    RowBox[{"dh", " ", "I1m"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dI12mdt", " ", "=", " ", 
   RowBox[{
    RowBox[{"\[Beta]2", " ", "I1m", " ", "V2"}], " ", "+", "  ", 
    RowBox[{"\[Beta]1m", "  ", "I2", " ", "V1m"}], "+", " ", 
    RowBox[{"\[Beta]21", " ", "I1m", " ", "V12"}], "  ", "+", " ", 
    RowBox[{"\[Beta]12m", " ", "I2", " ", "V12m"}], "  ", "-", " ", 
    RowBox[{"\[Sigma]12", " ", "I12m"}], " ", "-", " ", 
    RowBox[{"dh", " ", "I12m"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7969623983190193`*^9, 3.796962423377943*^9}, {
   3.7969629203451023`*^9, 3.796963248192341*^9}, {3.79696394043294*^9, 
   3.796963950363456*^9}, 3.796964156606854*^9, 3.796965363078372*^9, {
   3.796966075936243*^9, 3.7969660776379223`*^9}, {3.7969662570807047`*^9, 
   3.7969662600635853`*^9}, {3.796966736261271*^9, 3.796966749589365*^9}, {
   3.796966817081648*^9, 3.796966847554884*^9}, {3.796966918518351*^9, 
   3.79696693799933*^9}, {3.796967593812022*^9, 3.796967628671851*^9}, {
   3.796967719780242*^9, 3.796967741192182*^9}, {3.79696780689666*^9, 
   3.796967882692637*^9}, 3.7969680981528587`*^9, {3.796968315377932*^9, 
   3.796968349289843*^9}, {3.796968559995384*^9, 3.796968560228866*^9}, {
   3.796968621674004*^9, 3.796968624559291*^9}, 3.796968745165868*^9, {
   3.796968996926305*^9, 3.796969023694367*^9}, {3.796969054909281*^9, 
   3.796969065894314*^9}, 3.799136489526189*^9, {3.799140382833455*^9, 
   3.799140433816729*^9}, {3.799140485035427*^9, 3.799140537332038*^9}, {
   3.799140574255939*^9, 3.7991405778031673`*^9}, {3.799140637262995*^9, 
   3.7991406890949993`*^9}, {3.7991493400276537`*^9, 3.799149366359804*^9}, {
   3.799149552279242*^9, 3.799149559222467*^9}, 3.799149815915329*^9, {
   3.7991498870450163`*^9, 3.799149934806971*^9}, {3.799390718127639*^9, 
   3.799390760814213*^9}},
 ExpressionUUID -> "0f87846d-2178-4c76-86db-f9fdb4ee1b6f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Mmat", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", " ", "\[Gamma]2"}], " ", "I2"}], " ", "-", "\[Alpha]1", 
        "  ", "-", " ", "dv"}], ",", " ", "0", ",", " ", 
       RowBox[{"\[ScriptCapitalV]", " ", "\[Gamma]1m"}], ",", " ", 
       RowBox[{"\[ScriptCapitalV]", " ", "\[Gamma]12m"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[Gamma]2", " ", "I2"}], ",", " ", 
       RowBox[{
        RowBox[{"-", " ", "\[Alpha]12"}], " ", "-", " ", "dv"}], ",", " ", 
       RowBox[{"\[Gamma]1m", " ", "V2"}], ",", " ", 
       RowBox[{"\[Gamma]12m", " ", "V2"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[ScriptCapitalS]", " ", "\[Beta]1m"}], ",", " ", 
       RowBox[{"\[ScriptCapitalS]", " ", "\[Beta]12m"}], ",", "  ", 
       RowBox[{
        RowBox[{
         RowBox[{"-", " ", "\[Beta]21"}], " ", "V12"}], "-", " ", "\[Sigma]1",
         " ", "-", " ", "dh"}], ",", " ", "0"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[Beta]1m", " ", "I2"}], ",", " ", 
       RowBox[{"\[Beta]12m", " ", "I2"}], ",", " ", 
       RowBox[{
        RowBox[{"\[Beta]2", " ", "V2"}], " ", "+", " ", 
        RowBox[{"\[Beta]21", " ", "V12"}]}], ",", " ", 
       RowBox[{
        RowBox[{"-", "\[Sigma]12"}], " ", "-", " ", "dh"}]}], "}"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "dV1mdt", ",", " ", "dV12mdt", ",", " ", "dI1mdt", ",", " ", "dI12mdt"}],
      "}"}], "==", 
    RowBox[{"Mmat", ".", 
     RowBox[{"{", 
      RowBox[{"V1m", ",", " ", "V12m", ",", " ", "I1m", ",", " ", "I12m"}], 
      "}"}]}]}], "]"}], "//", "FullSimplify"}]}], "Input",
 CellChangeTimes->{{3.79696408732331*^9, 3.7969640973343353`*^9}, {
   3.7969641450092697`*^9, 3.796964176693913*^9}, {3.7969653955059233`*^9, 
   3.796965591171732*^9}, {3.7969660191891403`*^9, 3.796966046072421*^9}, {
   3.79696801266495*^9, 3.796968130964419*^9}, {3.796968162331607*^9, 
   3.796968177900741*^9}, {3.796968222379161*^9, 3.796968284778887*^9}, {
   3.7969691302923737`*^9, 3.796969142630472*^9}, {3.796969313173078*^9, 
   3.796969342775316*^9}, {3.796969434217779*^9, 3.796969507165491*^9}, {
   3.796969561821827*^9, 3.796969608066497*^9}, 3.796969719213678*^9, {
   3.796969829893455*^9, 3.7969698605785313`*^9}, {3.7969699611636763`*^9, 
   3.796969966581497*^9}, {3.799140728055009*^9, 3.799140729969911*^9}, {
   3.799140783121067*^9, 3.799140796286537*^9}, {3.799149621396001*^9, 
   3.799149625403798*^9}, 3.799149956496643*^9, {3.799390766950203*^9, 
   3.7993908050443687`*^9}},
 ExpressionUUID -> "7c1a0dc0-70db-47c7-95b9-510da8c5be66"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True", ",", "True", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{{3.7969695791051207`*^9, 3.796969608555169*^9}, {
   3.796969723286278*^9, 3.796969727310945*^9}, 3.796969763394004*^9, {
   3.796969830300089*^9, 3.796969860988474*^9}, 3.796969970212295*^9, 
   3.7978465490213833`*^9, 3.799126079733235*^9, 3.7991364939473333`*^9, {
   3.799136545858382*^9, 3.7991365712663937`*^9}, 3.799140830163392*^9, {
   3.79914093181215*^9, 3.799140940620288*^9}, 3.799141082183269*^9, 
   3.799149631025466*^9, 3.799149959967402*^9, 3.79915007063297*^9, 
   3.7993854314580297`*^9, 3.799390810662137*^9},
 ExpressionUUID -> "5bf54e54-1e30-4684-84c0-0b506b4a4b89"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mmat", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.799143446580789*^9, 3.799143449142763*^9}},
 ExpressionUUID -> "9d8194f7-4c26-45c4-b71a-66ba2c51317b"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"-", "dv"}], "-", "\[Alpha]1", "-", 
       RowBox[{"I2", " ", "\[Gamma]2"}]}], "0", 
      RowBox[{"\[ScriptCapitalV]", " ", "\[Gamma]1m"}], 
      RowBox[{"\[ScriptCapitalV]", " ", "\[Gamma]12m"}]},
     {
      RowBox[{"I2", " ", "\[Gamma]2"}], 
      RowBox[{
       RowBox[{"-", "dv"}], "-", "\[Alpha]12"}], 
      RowBox[{"V2", " ", "\[Gamma]1m"}], 
      RowBox[{"V2", " ", "\[Gamma]12m"}]},
     {
      RowBox[{"\[ScriptCapitalS]", " ", "\[Beta]1m"}], 
      RowBox[{"\[ScriptCapitalS]", " ", "\[Beta]12m"}], 
      RowBox[{
       RowBox[{"-", "dh"}], "-", 
       RowBox[{"V12", " ", "\[Beta]21"}], "-", "\[Sigma]1"}], "0"},
     {
      RowBox[{"I2", " ", "\[Beta]1m"}], 
      RowBox[{"I2", " ", "\[Beta]12m"}], 
      RowBox[{
       RowBox[{"V2", " ", "\[Beta]2"}], "+", 
       RowBox[{"V12", " ", "\[Beta]21"}]}], 
      RowBox[{
       RowBox[{"-", "dh"}], "-", "\[Sigma]12"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.799143449609129*^9, 3.799149635065996*^9, 
  3.7991499624769773`*^9, 3.799390813256407*^9},
 ExpressionUUID -> "5a5a882c-d225-47a4-8096-7e7053c1dcbb"]
}, Open  ]],

Cell["The next generation method to calculate R0", "Text",
 CellChangeTimes->{{3.796971702575304*^9, 
  3.796971717058318*^9}},ExpressionUUID->"73faaa47-f01d-4aa0-837e-\
8ebdf57811be"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Fmat", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0", ",", " ", 
       RowBox[{"\[ScriptCapitalV]", " ", "\[Gamma]1m"}], ",", " ", 
       RowBox[{"\[ScriptCapitalV]", " ", "\[Gamma]12m"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0", ",", " ", 
       RowBox[{"\[Gamma]1m", " ", "V2"}], ",", " ", 
       RowBox[{"\[Gamma]12m", " ", "V2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", " ", ",", " ", "0", ",", " ", "0"}], "}"}], ",", 
     
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "0", ",", " ", "0", ",", "0"}], " ", "}"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Vmat", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[Alpha]1", " ", "+", " ", 
        RowBox[{"\[Gamma]2", " ", "I2"}], " ", "+", " ", "dv"}], ",", " ", 
       "0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "\[Gamma]2"}], " ", "I2"}], ",", " ", 
       RowBox[{"\[Alpha]12", " ", "+", " ", "dv"}], ",", " ", "0", ",", " ", 
       "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "\[ScriptCapitalS]"}], " ", "\[Beta]1m"}], ",", 
       RowBox[{
        RowBox[{"-", "\[ScriptCapitalS]"}], " ", "\[Beta]12m"}], ",", " ", 
       RowBox[{"\[Sigma]1", " ", "+", " ", 
        RowBox[{"\[Beta]21", " ", "V12"}], " ", "+", " ", "dh"}], ",", " ", 
       "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "\[Beta]1m"}], " ", "I2"}], ",", " ", 
       RowBox[{
        RowBox[{"-", "\[Beta]12m"}], " ", "I2"}], ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[Beta]2"}], " ", "V2"}], " ", "-", " ", 
        RowBox[{"\[Beta]21", " ", "V12"}]}], ",", " ", 
       RowBox[{"\[Sigma]12", " ", "+", " ", "dh"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{"Mmat", " ", "\[Equal]", " ", 
    RowBox[{"Fmat", " ", "-", " ", "Vmat"}]}], ")"}], "//", 
  "FullSimplify"}]}], "Input",
 CellChangeTimes->{{3.7969699788260098`*^9, 3.796970048550753*^9}, {
   3.796970096641828*^9, 3.796970231819385*^9}, {3.7969703853621683`*^9, 
   3.7969704064994373`*^9}, {3.796970483669574*^9, 3.796970484099375*^9}, {
   3.7969705695746098`*^9, 3.7969706717889137`*^9}, {3.796971216723102*^9, 
   3.796971258370056*^9}, {3.799129820279809*^9, 3.799129866199622*^9}, {
   3.7991299008146*^9, 3.799129917367752*^9}, {3.799130664657645*^9, 
   3.799130676376964*^9}, {3.799136459172883*^9, 3.799136478662692*^9}, {
   3.799136556822341*^9, 3.799136557624346*^9}, 3.799141120510187*^9, {
   3.799143443388027*^9, 3.7991434440880127`*^9}, {3.7991496447344227`*^9, 
   3.799149653248748*^9}, 3.79914996634017*^9, {3.799390824216551*^9, 
   3.799390863822528*^9}},
 ExpressionUUID -> "c0ecd2eb-7e09-4210-918a-3177f4f320ef"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.7969703953838863`*^9, 3.7969704070537357`*^9}, 
   3.7969704847156353`*^9, 3.7969706741048307`*^9, 3.796971259498375*^9, 
   3.797846703102592*^9, 3.799126081917574*^9, 3.799129867413846*^9, 
   3.799129918170465*^9, 3.799130422467044*^9, 3.799130676866395*^9, {
   3.799136479415635*^9, 3.799136496206788*^9}, {3.7991365489455967`*^9, 
   3.799136574375558*^9}, 3.799140838914225*^9, 3.799140954395496*^9, {
   3.799141121166472*^9, 3.799141133560849*^9}, 3.79914437772756*^9, {
   3.7991455402820263`*^9, 3.799145549023966*^9}, {3.799149648085766*^9, 
   3.799149653776582*^9}, 3.799149967358451*^9, 3.7991500729263477`*^9, 
   3.799150123946052*^9, 3.799150195917761*^9, 3.799150396920569*^9, 
   3.799154034376151*^9, 3.799385435036429*^9, 3.799390864436515*^9},
 ExpressionUUID -> "06161ca8-dbb5-4dd6-b168-c4cad34415bc"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Fmat", ".", 
   RowBox[{"Inverse", "[", "Vmat", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Eigenvalues", "[", "%", "]"}], "[", 
    RowBox[{"[", "4", "]"}], "]"}], "//", "Expand"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"%", "/.", 
            RowBox[{
             RowBox[{"\[ScriptCapitalV]", " ", "\[Gamma]12m"}], " ", 
             "\[Rule]", " ", 
             SubscriptBox["\[ScriptL]", "HV"]}]}], "/.", 
           RowBox[{
            RowBox[{"\[ScriptCapitalV]", " ", "\[Gamma]1m"}], " ", "\[Rule]", 
            " ", "HV1mS"}]}], "/.", 
          RowBox[{
           RowBox[{"V2", " ", "\[Gamma]1m"}], " ", "\[Rule]", " ", 
           "HV1mD"}]}], "/.", 
         RowBox[{
          RowBox[{"V2", " ", "\[Gamma]12m"}], " ", "\[Rule]", " ", 
          SubscriptBox["\[ScriptCapitalL]", "HV"]}]}], "/.", 
        RowBox[{
         RowBox[{
          SuperscriptBox["V2", 
           RowBox[{"2", " "}]], "\[Gamma]12m"}], " ", "\[Rule]", " ", 
         RowBox[{"HV12mD", " ", "V2"}]}]}], "/.", 
       RowBox[{
        RowBox[{"\[ScriptCapitalS]", " ", "\[Beta]1m"}], " ", "\[Rule]", " ", 
        "VH1mS"}]}], "/.", 
      RowBox[{
       RowBox[{"\[ScriptCapitalS]", " ", "\[Beta]12m"}], " ", "\[Rule]", " ", 
       "VH12mS"}]}], "/.", 
     RowBox[{
      RowBox[{"I2", " ", "\[Beta]1m"}], " ", "\[Rule]", " ", "VH1mD"}]}], "/.", 
    RowBox[{
     RowBox[{"I2", " ", "\[Beta]12m"}], " ", "\[Rule]", " ", "VH12mD"}]}], "/.", 
   RowBox[{
    RowBox[{
     SuperscriptBox["I2", "2"], "\[Beta]12m"}], " ", "\[Rule]", " ", 
    RowBox[{"VH12mD", " ", "I2"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Collect", "[", 
    RowBox[{"%", ",", 
     RowBox[{
      SubscriptBox["\[ScriptCapitalL]", "HV"], " ", "VH12mD"}]}], "]"}], "/.", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"dh", " ", "dv"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dh", " ", "\[Alpha]1"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dh", " ", "I2", " ", "\[Gamma]2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dv", " ", "V12", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"V12", " ", "\[Alpha]1", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"I2", " ", "V12", " ", "\[Gamma]2", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dv", " ", "\[Sigma]1"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"\[Alpha]1", " ", "\[Sigma]1"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"I2", " ", "\[Gamma]2", " ", "\[Sigma]1"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "\[Rule]", " ", 
    RowBox[{"FullSimplify", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"dh", " ", "dv"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dh", " ", "\[Alpha]1"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dh", " ", "I2", " ", "\[Gamma]2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dv", " ", "V12", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"V12", " ", "\[Alpha]1", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"I2", " ", "V12", " ", "\[Gamma]2", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dv", " ", "\[Sigma]1"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]1", " ", "\[Sigma]1"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"I2", " ", "\[Gamma]2", " ", "\[Sigma]1"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Collect", "[", 
    RowBox[{"%", ",", " ", 
     RowBox[{"HV1mD", " ", "VH12mS"}]}], "]"}], "/.", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"dh", " ", "dv"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dh", " ", "\[Alpha]1"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dh", " ", "I2", " ", "\[Gamma]2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dv", " ", "\[Sigma]12"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"\[Alpha]1", " ", "\[Sigma]12"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"I2", " ", "\[Gamma]2", " ", "\[Sigma]12"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "\[Rule]", " ", 
    RowBox[{"FullSimplify", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"dh", " ", "dv"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dh", " ", "\[Alpha]1"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dh", " ", "I2", " ", "\[Gamma]2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dv", " ", "\[Sigma]12"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]1", " ", "\[Sigma]12"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"I2", " ", "\[Gamma]2", " ", "\[Sigma]12"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Collect", "[", 
    RowBox[{"%", ",", " ", 
     RowBox[{
      SubscriptBox["\[ScriptL]", "HV"], " ", "VH1mD"}]}], "]"}], "/.", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"dh", " ", "dv"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dh", " ", "\[Alpha]12"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dv", " ", "V12", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"V12", " ", "\[Alpha]12", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dv", " ", "\[Sigma]1"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"\[Alpha]12", " ", "\[Sigma]1"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "\[Rule]", " ", 
    RowBox[{"FullSimplify", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"dh", " ", "dv"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dh", " ", "\[Alpha]12"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dv", " ", "V12", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"V12", " ", "\[Alpha]12", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dv", " ", "\[Sigma]1"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]12", " ", "\[Sigma]1"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Collect", "[", 
    RowBox[{"%", ",", " ", 
     RowBox[{"HV1mS", " ", "VH1mS"}]}], "]"}], "/.", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"dh", " ", "dv"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dh", " ", "\[Alpha]12"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dv", " ", "\[Sigma]12"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"\[Alpha]12", " ", "\[Sigma]12"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "\[Rule]", " ", 
    RowBox[{"FullSimplify", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"dh", " ", "dv"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dh", " ", "\[Alpha]12"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dv", " ", "\[Sigma]12"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]12", " ", "\[Sigma]12"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Collect", "[", 
    RowBox[{"%", ",", " ", 
     RowBox[{
      SubscriptBox["\[ScriptL]", "HV"], " ", "I2", " ", "VH12mD"}]}], "]"}], "/.", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"dh", " ", "\[Gamma]2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"V12", " ", "\[Gamma]2", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"\[Gamma]2", " ", "\[Sigma]1"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "\[Rule]", " ", 
    RowBox[{"FullSimplify", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"dh", " ", "\[Gamma]2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"V12", " ", "\[Gamma]2", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"\[Gamma]2", " ", "\[Sigma]1"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Collect", "[", 
    RowBox[{"%", ",", " ", 
     RowBox[{"HV1mS", " ", "VH12mS"}]}], "]"}], "/.", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"dh", " ", "I2", " ", "\[Gamma]2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"I2", " ", "\[Gamma]2", " ", "\[Sigma]12"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "\[Rule]", " ", 
    RowBox[{"FullSimplify", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"dh", " ", "I2", " ", "\[Gamma]2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"I2", " ", "\[Gamma]2", " ", "\[Sigma]12"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Collect", "[", 
    RowBox[{"%", ",", " ", 
     RowBox[{
      SubscriptBox["\[ScriptCapitalL]", "HV"], "  ", "VH12mS"}]}], "]"}], "/.", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"dv", " ", "V2", " ", "\[Beta]2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"V2", " ", "\[Alpha]1", " ", "\[Beta]2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"I2", " ", "V2", " ", "\[Gamma]2", " ", "\[Beta]2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"dv", " ", "V12", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"V12", " ", "\[Alpha]1", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"I2", " ", "V12", " ", "\[Gamma]2", " ", "\[Beta]21"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dv", "+", "\[Alpha]1", "+", 
         RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", 
         RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "\[Rule]", " ", 
    RowBox[{"FullSimplify", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"dv", " ", "V2", " ", "\[Beta]2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"V2", " ", "\[Alpha]1", " ", "\[Beta]2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"I2", " ", "V2", " ", "\[Gamma]2", " ", "\[Beta]2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"dv", " ", "V12", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"V12", " ", "\[Alpha]1", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
      FractionBox[
       RowBox[{"I2", " ", "V12", " ", "\[Gamma]2", " ", "\[Beta]21"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dv", "+", "\[Alpha]1", "+", 
          RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", 
          RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{"%", ",", " ", 
        RowBox[{
         SubscriptBox["\[ScriptL]", "HV"], " ", "VH1mS"}]}], "]"}], "/.", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{"dv", " ", "V2", " ", "\[Beta]2"}], 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]1", "+", 
            RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dh", "+", 
            RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
        FractionBox[
         RowBox[{"V2", " ", "\[Alpha]12", " ", "\[Beta]2"}], 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]1", "+", 
            RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dh", "+", 
            RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
        FractionBox[
         RowBox[{"dv", " ", "V12", " ", "\[Beta]21"}], 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]1", "+", 
            RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dh", "+", 
            RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
        FractionBox[
         RowBox[{"V12", " ", "\[Alpha]12", " ", "\[Beta]21"}], 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dv", "+", "\[Alpha]1", "+", 
            RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dh", "+", 
            RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "\[Rule]", " ", 
       RowBox[{"FullSimplify", "[", 
        RowBox[{
         FractionBox[
          RowBox[{"dv", " ", "V2", " ", "\[Beta]2"}], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"dv", "+", "\[Alpha]1", "+", 
             RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"dh", "+", 
             RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], 
           " ", 
           RowBox[{"(", 
            RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
         FractionBox[
          RowBox[{"V2", " ", "\[Alpha]12", " ", "\[Beta]2"}], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"dv", "+", "\[Alpha]1", "+", 
             RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"dh", "+", 
             RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], 
           " ", 
           RowBox[{"(", 
            RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
         FractionBox[
          RowBox[{"dv", " ", "V12", " ", "\[Beta]21"}], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"dv", "+", "\[Alpha]1", "+", 
             RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"dh", "+", 
             RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], 
           " ", 
           RowBox[{"(", 
            RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]], "+", 
         FractionBox[
          RowBox[{"V12", " ", "\[Alpha]12", " ", "\[Beta]21"}], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"dv", "+", "\[Alpha]12"}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"dv", "+", "\[Alpha]1", "+", 
             RowBox[{"I2", " ", "\[Gamma]2"}]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"dh", "+", 
             RowBox[{"V12", " ", "\[Beta]21"}], "+", "\[Sigma]1"}], ")"}], 
           " ", 
           RowBox[{"(", 
            RowBox[{"dh", "+", "\[Sigma]12"}], ")"}]}]]}], "]"}]}]}], "/.", 
     RowBox[{
      RowBox[{"dv", " ", "+", " ", "\[Alpha]12"}], " ", "\[Rule]", " ", 
      "DV12"}]}], "/.", 
    RowBox[{
     RowBox[{"dv", " ", "+", " ", "\[Alpha]1"}], "\[Rule]", " ", "DV1"}]}], "/.",
    " ", 
   RowBox[{
    RowBox[{"dh", " ", "+", " ", "\[Sigma]1"}], " ", "\[Rule]", " ", 
    "DH1"}]}], "/.", 
  RowBox[{
   RowBox[{"dh", "+", "\[Sigma]12"}], " ", "\[Rule]", " ", 
   "DH12"}]}]}], "Input",
 CellChangeTimes->{{3.799150107200994*^9, 3.799150115449843*^9}, {
   3.7991503588877687`*^9, 3.799150386740827*^9}, {3.799150418951683*^9, 
   3.799150567484601*^9}, {3.7991507915917883`*^9, 3.7991511500084*^9}, {
   3.799151190670002*^9, 3.799151196165489*^9}, {3.79915123036613*^9, 
   3.7991514671371317`*^9}, {3.79915150485772*^9, 3.799151804842176*^9}, {
   3.799151975701981*^9, 3.799152091155418*^9}, {3.7991521427241697`*^9, 
   3.799152202035174*^9}, {3.799152235303994*^9, 3.799152242653779*^9}, {
   3.799152910932078*^9, 3.799152932469149*^9}, {3.799154465545697*^9, 
   3.799154505626905*^9}, 3.799155547050356*^9, {3.7993908682696447`*^9, 
   3.799391115223502*^9}, {3.7993911607868357`*^9, 3.799391520704945*^9}, {
   3.8019099626005*^9, 3.801909982613586*^9}, {3.801910703166342*^9, 
   3.801910704113716*^9}, {3.8019227827989073`*^9, 3.801922833960609*^9}, {
   3.801922901557061*^9, 
   3.8019229446005907`*^9}},ExpressionUUID->"8747100b-f374-4487-91ec-\
920cd3df9bd3"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Lambda]", "HV"], " ", 
  SubscriptBox["\[Omega]", "HV"], " ", 
  SubscriptBox["\[Kappa]", "VH"], " ", 
  SubscriptBox["\[Upsilon]", "VH"], " ", "\[ScriptCapitalD]", " ", 
  "\[ScriptCapitalM]"}]], "Input",
 CellChangeTimes->{{3.8019053156800947`*^9, 3.801905326716948*^9}, {
  3.80190536250185*^9, 3.801905369375577*^9}, {3.801905423800531*^9, 
  3.801905429387425*^9}, {3.8019054794827538`*^9, 
  3.801905562680862*^9}},ExpressionUUID->"6b2cce38-54be-4b81-9e3b-\
da327dd40ab1"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.80191258380704*^9, 
  3.801912593373913*^9}},ExpressionUUID->"216b1e35-2ccb-40b5-9933-\
147655780cde"],

Cell[TextData[Cell[BoxData[{
 RowBox[{"All", " ", "death"}], "\[IndentingNewLine]", 
 RowBox[{"\[ScriptCapitalD]", " ", "=", " ", 
  RowBox[{"DH12", " ", "=", " ", 
   RowBox[{"dh", " ", "+", " ", 
    RowBox[{"\[Sigma]12", ":", " ", 
     RowBox[{
     "total", " ", "death", " ", "of", " ", "final", " ", "host", " ", 
      "coinfected", " ", "by", " ", "both", " ", 
      "strains"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"\[ScriptD]", " ", "=", " ", 
  RowBox[{"DH1", " ", "=", " ", 
   RowBox[{"dh", " ", "+", " ", 
    RowBox[{"\[Sigma]1", ":", " ", 
     RowBox[{
     "total", " ", "death", " ", "of", " ", "final", " ", "host", " ", 
      "infected", " ", "by", " ", "strain", " ", 
      "1"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{"\[ScriptCapitalM]", " ", "=", " ", 
  RowBox[{"DV12", " ", "=", " ", 
   RowBox[{"dv", " ", "+", " ", 
    RowBox[{"\[Alpha]12", ":", " ", 
     RowBox[{
     "total", " ", "death", " ", "of", " ", "vector", " ", "coinfected", " ", 
      "by", " ", "both", " ", "strains"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[ScriptM]", " ", "=", " ", 
   RowBox[{"DV1", " ", "=", " ", 
    RowBox[{"dv", " ", "+", " ", 
     RowBox[{"\[Alpha]1", ":", " ", 
      RowBox[{
      "total", " ", "death", " ", "of", " ", "vector", " ", "coinfected", " ",
        "by", " ", "strain", " ", "1"}]}]}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"All", " ", "force", " ", "of", " ", "infection", " ", 
  RowBox[{"(", 
   RowBox[{"for", " ", "mutant", " ", "only"}], ")"}], " ", "from", " ", 
  "host", " ", "to", " ", "vector"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[ScriptL]", "HV"], "=", " ", 
   RowBox[{"HV12mS", " ", "=", " ", 
    RowBox[{"\[ScriptCapitalV]", " ", 
     RowBox[{"\[Gamma]12m", ":", " ", 
      RowBox[{
      "host", " ", "coinfected", "  ", "to", " ", "naive", " ", 
       "vector"}]}]}]}]}], "  "}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["\[ScriptCapitalL]", "HV"], "=", 
  RowBox[{"HV12mD", " ", "=", " ", 
   RowBox[{"V2", " ", 
    RowBox[{"\[Gamma]12m", ":", " ", 
     RowBox[{
     "host", " ", "coinfected", " ", "to", " ", "vector", " ", "infected", 
      " ", "by", " ", "strain", " ", "2"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["\[ScriptCapitalQ]", "HV"], "=", 
  RowBox[{"HV1mD", " ", "=", " ", 
   RowBox[{"V2", " ", 
    RowBox[{"\[Gamma]1m", ":", " ", 
     RowBox[{
     "host", " ", "infected", " ", "by", " ", "mutant", " ", "to", " ", 
      "vector", " ", "infected", " ", "by", " ", "strain", " ", 
      "2"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[ScriptQ]", "HV"], "=", 
   RowBox[{"HV1mS", " ", "=", " ", 
    RowBox[{"\[ScriptCapitalV]", " ", 
     RowBox[{"\[Gamma]1m", ":", " ", 
      RowBox[{
      "host", " ", "infected", " ", "by", " ", "mutant", " ", "to", " ", 
       "naive", " ", "vector"}]}]}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"All", " ", "force", " ", "of", " ", "infection", " ", 
  RowBox[{"(", 
   RowBox[{"for", " ", "mutant", " ", "only"}], ")"}], " ", "from", " ", 
  "vector", " ", "to", " ", "host"}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["\[ScriptCapitalL]", "VH"], "=", 
  RowBox[{"VH1mD", " ", "=", " ", 
   RowBox[{"I2", " ", 
    RowBox[{"\[Beta]1m", " ", ":", " ", 
     RowBox[{
     "vector", " ", "infected", " ", "by", " ", "mutant", " ", "to", " ", 
      "host", " ", "infected", " ", "by", " ", "strain", " ", 
      "2"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["\[ScriptCapitalQ]", "VH"], "=", 
  RowBox[{"VH12mD", " ", "=", " ", 
   RowBox[{"I2", " ", 
    RowBox[{"\[Beta]12m", ":", " ", 
     RowBox[{
     "vector", " ", "coinfected", " ", "to", " ", "host", " ", "infected", 
      " ", "by", " ", "strain", " ", "2"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["\[ScriptL]", "VH"], "=", 
  RowBox[{"VH12mS", " ", "=", " ", 
   RowBox[{"\[ScriptCapitalS]", " ", 
    RowBox[{"\[Beta]12m", ":", " ", 
     RowBox[{
     "vector", " ", "coinfected", " ", "to", " ", "naive", " ", 
      "host"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["\[ScriptQ]", "VH"], "=", 
   RowBox[{"VH1mS", " ", "=", " ", 
    RowBox[{"\[ScriptCapitalS]", " ", 
     RowBox[{"\[Beta]1m", ":", " ", 
      RowBox[{
      "vector", " ", "infected", " ", "by", " ", "mutant", " ", "to", " ", 
       "naive", " ", "host"}]}]}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Reminder", " ", "of", " ", "\[Beta]", " ", "and", " ", 
  "\[Gamma]"}], "\[IndentingNewLine]", 
 RowBox[{"*", " ", "\[Beta]", " ", "is", " ", "the", " ", "transmission", " ",
   "from", " ", "vector", " ", "to", " ", "host", " ", 
  RowBox[{"(", 
   RowBox[{
   "manipulation", " ", "of", " ", "vector", " ", "can", " ", "happen", " ", 
    "here"}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
    "*", " ", "\[Gamma]", " ", "is", " ", "the", " ", "transmission", " ", 
     "from", " ", "host", " ", "to", " ", "vector", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
       "with", " ", "parasites", " ", "that", " ", "have", " ", "complex", 
        " ", "lifecycles", " ", "this", " ", "can", " ", "also", " ", "be", 
        " ", "considered", " ", "the", " ", "reproduction", " ", "rate", " ", 
        "to", " ", "complete", " ", "the", " ", "lifecycle"}], ")"}], ".", 
      " ", "So"}], " ", "there", " ", "is", " ", "a", " ", "trade"}], "-", 
    RowBox[{
    "off", " ", "between", " ", "\[Gamma]", " ", "and", " ", "\[Beta]"}]}], 
   ",", " ", 
   RowBox[{"or", " ", "manipulation", " ", "and", " ", "reproduction"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "So", " ", "if", " ", "we", " ", "consider", " ", "manipulation", " ", "as",
    " ", "an", " ", "underlying", " ", "trade", " ", "x", " ", "then", " ", 
   "\[Gamma]", " ", "and", " ", "\[Beta]", " ", "is", " ", "a", " ", 
   "function", " ", "of", " ", "x", " ", "and", " ", 
   SubscriptBox["\[Beta]", "1"], 
   RowBox[{"(", "x", ")"}], " ", "is", " ", "the", " ", "transmission", " ", 
   "rate", " ", "of", " ", "strain", " ", "1", " ", "when", " ", "it", " ", 
   "is", " ", "alone", " ", "and", " ", "it", " ", "depends", " ", "on", " ", 
   "the", " ", "manipulation", " ", "ability", " ", "of", " ", "strain", " ", 
   "1", " ", "when", " ", "it", " ", "is", " ", "alone"}], ",", " ", 
  RowBox[{
   SubscriptBox["\[Beta]", "12"], 
   RowBox[{"(", "x", ")"}], " ", "is", " ", "the", " ", "transmission", " ", 
   "rate", " ", "of", " ", "strain", " ", "1", " ", "when", " ", "it", " ", 
   "is", " ", "together", " ", "with", " ", "strain", " ", "2", " ", "and", 
   " ", "it", " ", "depends", " ", "on", " ", "the", " ", "manipulation", " ",
    "ability", " ", "of", " ", "strain", " ", "1", " ", "when", " ", "it", 
   " ", "is", " ", "with", " ", "strain", " ", "2"}], ",", " ", 
  RowBox[{
   SubscriptBox["\[Gamma]", "1"], 
   RowBox[{"(", "x", ")"}], " ", "is", " ", "the", " ", "reproduction", " ", 
   "rate", " ", "of", " ", "strain", " ", "1", " ", "when", " ", "it", " ", 
   "is", " ", "alone", " ", "in", " ", "the", " ", "host"}], ",", " ", 
  RowBox[{"and", " ", 
   SubscriptBox["\[Gamma]", "12"], 
   RowBox[{"(", "x", ")"}], " ", "is", " ", "the", " ", "reproduction", " ", 
   "rate", " ", "of", " ", "strain", " ", "1", " ", "when", " ", "it", " ", 
   "is", " ", "with", " ", "strain", " ", "2", " ", "in", " ", "the", " ", 
   RowBox[{"host", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", "The"}],
    " ", "total", " ", "reproduction", " ", "ratio", " ", "of", " ", "a", " ",
    "mutant", " ", "includes", " ", "different", " ", "compartments", " ", 
   "that", " ", "represent", " ", "reproduction", " ", "values", " ", "if", 
   " ", "the", " ", "mutant", " ", "follows", " ", "different", " ", "routes",
    " ", "of", " ", "infection"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Different", " ", "routes", " ", "of", " ", "infection", " ", "shows", " ", 
   "the", " ", "state", " ", "in", " ", "which", " ", "the", " ", "mutant", 
   " ", "finds", " ", "it", " ", "self"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Mutant", " ", "is", " ", "alone", " ", "in", " ", "both", " ", 
  "vector", " ", "and", " ", "host"}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{
   FractionBox["HV1mS", 
    RowBox[{"DV1", " ", "+", " ", 
     RowBox[{"I2", " ", "\[Gamma]2"}]}]], 
   FractionBox["VH1mS", 
    RowBox[{"DH1", " ", "+", " ", 
     RowBox[{"V12", " ", "\[Beta]21"}]}]]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Mutant", " ", "is", " ", "alone", " ", "in", " ", "vector", " ", "but", 
   " ", "with", " ", "strain", " ", "2", " ", "in", " ", 
   RowBox[{"host", ".", " ", "However"}]}], ",", " ", 
  RowBox[{"in", " ", "the", " ", "host"}], ",", " ", 
  RowBox[{
  "there", " ", "are", " ", "two", " ", 
   "subscenarios"}]}], "\[IndentingNewLine]", 
 RowBox[{"*", "Mutant", " ", "comes", " ", "after", " ", "strain", " ", "2", 
  " ", "in", " ", "host"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   SubscriptBox["\[ScriptL]", "HV"], 
   RowBox[{"DV1", " ", "+", " ", 
    RowBox[{"I2", " ", "\[Gamma]2"}]}]], 
  FractionBox["VH1mD", "DH12"]}], "\[IndentingNewLine]", 
 RowBox[{"*", " ", "Mutant", " ", "comes", " ", "before", " ", "strain", " ", 
  "2", " ", "in", " ", "host"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   FractionBox[
    SubscriptBox["\[ScriptL]", "HV"], 
    RowBox[{"DV1", " ", "+", " ", 
     RowBox[{"I2", " ", "\[Gamma]2"}]}]], 
   FractionBox["VH1mS", 
    RowBox[{"DH1", " ", "+", " ", 
     RowBox[{"V12", " ", "\[Beta]21"}]}]], 
   FractionBox[
    RowBox[{
     RowBox[{"V2", " ", "\[Beta]2"}], " ", "+", " ", 
     RowBox[{"V12", " ", "\[Beta]12"}]}], "DH12"]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Mutant", " ", "is", " ", "with", " ", "strain", " ", "2", " ", "in", " ", 
   "vector", " ", "but", " ", "alone", " ", "in", " ", 
   RowBox[{"host", ".", " ", "However"}]}], ",", " ", 
  RowBox[{"in", " ", "the", " ", "vector"}], ",", " ", 
  RowBox[{
  "there", " ", "are", " ", "again", " ", "two", " ", 
   "subscenarios"}]}], "\[IndentingNewLine]", 
 RowBox[{"*", "Mutant", " ", "comes", " ", "after", " ", "strain", " ", "2", 
  " ", "in", " ", "vector"}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{
   FractionBox["HV1mD", "DV12"], 
   FractionBox["VH12mS", 
    RowBox[{"DH1", " ", "+", " ", 
     RowBox[{"V12", " ", "\[Beta]21"}]}]]}], " "}], "\[IndentingNewLine]", 
 RowBox[{"*", "Mutant", " ", "comes", " ", "before", " ", "strain", " ", "2", 
  " ", "in", " ", "vector"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   FractionBox["HV1mS", 
    RowBox[{"DV1", " ", "+", " ", 
     RowBox[{"I2", " ", "\[Gamma]2"}]}]], 
   FractionBox[
    RowBox[{"I2", " ", "\[Gamma]2"}], "DV12"], 
   FractionBox["VH12mS", 
    RowBox[{"DH1", " ", "+", " ", 
     RowBox[{"V12", " ", "\[Beta]12"}]}]]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Mutant", " ", "is", " ", "with", " ", "strain", " ", "2", " ", "in", " ", 
   "both", " ", "vector", " ", "and", " ", 
   RowBox[{"host", ".", " ", "Here"}]}], ",", " ", 
  RowBox[{
  "there", " ", "are", " ", "four", " ", 
   "subscenarios"}]}], "\[IndentingNewLine]", 
 RowBox[{"Mutant", " ", "comes", " ", "after", " ", "strain", " ", "2", " ", 
  "in", " ", "both", " ", "vector", " ", "and", " ", 
  "host"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   FractionBox[
    SubscriptBox["\[ScriptCapitalL]", "HV"], "DV12"], 
   FractionBox["VH12mD", "DH12"]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Mutant", " ", "comes", " ", "before", " ", "strain", " ", "2", " ", 
  "in", " ", "both", " ", "vector", " ", "and", " ", 
  "host"}], "\[IndentingNewLine]", 
 RowBox[{" ", 
  RowBox[{
   FractionBox[
    SubscriptBox["\[ScriptL]", "HV"], 
    RowBox[{"DV1", " ", "+", " ", 
     RowBox[{"I2", " ", "\[Gamma]2"}]}]], 
   FractionBox[
    RowBox[{"I2", " ", "\[Gamma]2"}], "DV12"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      FractionBox["VH12mS", 
       RowBox[{"DH1", " ", "+", " ", 
        RowBox[{"V12", " ", "\[Beta]12"}]}]], 
      FractionBox[
       RowBox[{"V2", " ", "\[Beta]2"}], "DH12"]}], " ", "+", " ", 
     RowBox[{
      FractionBox["VH12mS", 
       RowBox[{"DH1", " ", "+", " ", 
        RowBox[{"V12", " ", "\[Beta]21"}]}]], 
      FractionBox[
       RowBox[{"V12", " ", "\[Beta]21"}], "DV12"]}]}], ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Mutant", " ", "comes", " ", "before", " ", "strain", " ", "2", " ", 
  "in", " ", "vector", " ", "but", " ", "after", " ", "strain", " ", "2", " ",
   "in", " ", "host"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   FractionBox[
    SubscriptBox["\[ScriptL]", "HV"], 
    RowBox[{"DV1", " ", "+", " ", 
     RowBox[{"I2", " ", "\[Gamma]2"}]}]], 
   FractionBox[
    RowBox[{"I2", " ", "\[Gamma]2"}], "DV12"], 
   FractionBox["VH12mD", "DH12"]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Mutant", " ", "comes", " ", "after", " ", "strain", " ", "2", " ", 
  "in", " ", "vector", " ", "but", " ", "before", " ", "strain", " ", "2", 
  " ", "in", " ", "host"}], "\[IndentingNewLine]", 
 RowBox[{
  FractionBox[
   SubscriptBox["\[ScriptCapitalL]", "HV"], "DV12"], 
  FractionBox["VH12mS", 
   RowBox[{"DH1", " ", "+", " ", 
    RowBox[{"V12", " ", "\[Beta]21"}]}]], 
  FractionBox[
   RowBox[{
    RowBox[{"V2", " ", "\[Beta]2"}], " ", "+", " ", 
    RowBox[{"V12", " ", "\[Beta]21"}]}], "DH12"]}]}], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.799141421913322*^9, 3.799141593961755*^9, 3.7991416576679897`*^9, 
   3.799141750482826*^9, 3.799141795328722*^9, 3.7991418823518963`*^9, 
   3.7991432418096457`*^9, {3.799143310939424*^9, 3.799143327015935*^9}, 
   3.799145497965633*^9, {3.799145649695737*^9, 3.799145673576954*^9}, 
   3.799145864571612*^9, 3.799145904341496*^9, {3.799145972574934*^9, 
   3.799146001247459*^9}, {3.7991460475423393`*^9, 3.799146071878264*^9}, {
   3.79914611655891*^9, 3.799146129915316*^9}, {3.799146463543305*^9, 
   3.7991464745116158`*^9}, {3.799146532235729*^9, 3.799146587927898*^9}, {
   3.799146618223358*^9, 3.799146632453629*^9}, {3.799146665986628*^9, 
   3.7991466920780973`*^9}, {3.799146723720109*^9, 3.799146748547679*^9}, 
   3.799146804858403*^9, 3.799146860308221*^9, 3.7991469116504707`*^9, 
   3.799146985958148*^9, {3.799147024033019*^9, 3.7991470273079777`*^9}, {
   3.799147181070216*^9, 3.799147209534902*^9}, 3.799147266970262*^9, 
   3.7991472996337633`*^9, 3.7991473369712477`*^9, 3.799147377961649*^9, 
   3.799147414881773*^9, 3.799147470359109*^9, 3.799147510848166*^9, {
   3.7991475971116943`*^9, 3.7991476096434402`*^9}, 3.7991476616247168`*^9, 
   3.799147724499022*^9, {3.799147821819106*^9, 3.799147825804487*^9}, 
   3.799147860133432*^9, {3.799147933963079*^9, 
   3.7991479372506113`*^9}},ExpressionUUID->"8e40d951-7c34-4e91-842c-\
6489395eba31"]], "Text",
 CellChangeTimes->CompressedData["
1:eJwd0FtI02EABfDRzQsipqE1mzKzoGVpKGG4bFODcJdMYwhFW+psGzHFFKwG
bmylTlNbF2EPDsPlIu1B0xLdXOkWpdJCZxtOczVNMjIhWATNvvN/OPxeDhw4
zLKqYuk2Go2WSQIV8RNDfOEPbkpo2QXrknN8sOes6C9UnPZmCIjz6plTMHyH
Mx8q69pKYGHFnEdIpE/cXYSsf5yD54j7Z5cKoLrSUwjFRRopbCv1V8HQl63r
kM0JqmBikrcDbn5qkBQRV8M6FbAyQauE4buLu6BeZnsM98Qu9kOBLHIY9oUc
bmiJCSzAnyqjH8bf9K5CmpuRep4YobrFhhX934RQ7RRegMkr0Zdhk2i0Gsa1
ptdAz8l39TBXx70NNZdEeiiabDJDSfnmU9hjHhqEdt3qS8iOzRmnerxpB6x5
k+2F/AHLIrXDurIEaW9lXyHrascanD+zoR8n7qXfMcLWNY4JCgNHe2H4gann
cJfc8AKW7uRZYdp25Qd4I8UxC3XOOjdsGBAvQcbY4WXoswq+Q9to+QbMmjr2
GzJHk47bib90EWyYpzpRAKOam3nQRzddhL3dmnZYJo8yQTlj4MkEsVriGoGB
sPyH7SXk/0cSytpU09g9Ylm6jTKmUfsexrHM09DZrXVBtubPRzhZrJqHahln
AXoVrz7DuYS8ZZg9mGYzEA3XmK9hR1bcAgwyeT54SJrrh5Ezdsra+pYV2McM
UR6xR6/DAHdfEHapSlo6iVHr9ylHEq0P4PDWMyPMFGeYIb9RbYH/AYdXmus=

  "],ExpressionUUID->"95c4e0a0-4fa6-409f-b020-1d27e7ed8144"],

Cell["\<\
Now the manipulating strategy of the mutant strain 1 depends on how we define \
the function of vector to host (\[Beta]) and host to vector (\[Gamma]) \
transmission. In other words, it depends on how we define the trade-off \
between transmission (\[Beta]) and reproduction (\[Gamma]). Moreover, mutant \
strategy also depends on the strategy of the other strain in coinfection. \
Thus, depending on whether manipulation in coinfection boost up or reduce \
transmission, the mutant may change strategy. Finally, because mutant can \
either be alone or can be found with another strain, the strategy of the \
mutant will depends on the available naive hosts and vectors or the already \
occupied hosts and vectors.\
\>", "Text",
 CellChangeTimes->{{3.796977451161965*^9, 3.7969775057868223`*^9}, {
   3.796977550718363*^9, 3.796977609858183*^9}, {3.799126884433628*^9, 
   3.7991268876234503`*^9}, {3.799136647116653*^9, 3.799136647888311*^9}, {
   3.7991385462004013`*^9, 3.7991385574222603`*^9}, 3.799138595077586*^9, {
   3.799390170601535*^9, 3.79939036034203*^9}, {3.799391698728076*^9, 
   3.7993919368452168`*^9}},ExpressionUUID->"a5778d0a-e210-40d5-b44f-\
ed7964b8326c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{Full, Full},
WindowMargins->{{0, Automatic}, {0, Automatic}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 4, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 169, 3, 92, "Title"],
Cell[CellGroupData[{
Cell[774, 29, 294, 4, 62, "Subtitle",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[1071, 35, 38607, 638, 418, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[39681, 675, 1364, 34, 80, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[41048, 711, 584, 15, 28, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[41635, 728, 1744, 47, 50, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[43382, 777, 277, 4, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[43662, 783, 1335, 34, 80, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[45000, 819, 330, 7, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[45333, 828, 715, 18, 46, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[46051, 848, 1230, 35, 47, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[47284, 885, 425, 9, 28, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[47712, 896, 714, 19, 28, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[48429, 917, 782, 20, 28, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[49214, 939, 1148, 33, 30, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[50365, 974, 808, 23, 59, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[51176, 999, 350, 7, 30, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[51529, 1008, 2122, 64, 114, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[53654, 1074, 306, 6, 28, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[53963, 1082, 1165, 34, 47, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[55131, 1118, 734, 20, 50, "Output",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Closed]],
Cell[CellGroupData[{
Cell[55902, 1143, 311, 5, 62, "Subtitle"],
Cell[56216, 1150, 220632, 3622, 541, "Input"],
Cell[276851, 4774, 551, 10, 50, "Text"],
Cell[277405, 4786, 4346, 98, 284, "Input"],
Cell[281754, 4886, 761, 18, 46, "Input"],
Cell[282518, 4906, 1430, 30, 28, "Input"],
Cell[CellGroupData[{
Cell[283973, 4940, 441, 12, 28, "Input"],
Cell[284417, 4954, 493, 10, 24, "Message"],
Cell[284913, 4966, 1576, 42, 50, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[286538, 5014, 259, 4, 58, "Chapter"],
Cell[CellGroupData[{
Cell[286822, 5022, 214, 4, 64, "Section"],
Cell[287039, 5028, 1086, 28, 63, "Input"],
Cell[CellGroupData[{
Cell[288150, 5060, 318, 6, 44, "Subsection"],
Cell[288471, 5068, 2100, 41, 63, "Input"],
Cell[290574, 5111, 1831, 39, 80, "Input"],
Cell[CellGroupData[{
Cell[292430, 5154, 2863, 67, 114, "Input"],
Cell[295296, 5223, 862, 12, 28, "Output"],
Cell[296161, 5237, 57043, 1052, 252, "Output"],
Cell[353207, 6291, 1091, 18, 28, "Output"]
}, Open  ]],
Cell[354313, 6312, 2293, 48, 80, "Input"],
Cell[CellGroupData[{
Cell[356631, 6364, 1882, 45, 97, "Input"],
Cell[358516, 6411, 558, 8, 28, "Output"],
Cell[359077, 6421, 70814, 1278, 250, "Output"],
Cell[429894, 7701, 792, 15, 28, "Output"]
}, Open  ]],
Cell[430701, 7719, 2086, 45, 80, "Input"],
Cell[CellGroupData[{
Cell[432812, 7768, 250, 5, 28, "Input"],
Cell[433065, 7775, 576, 14, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[433678, 7794, 313, 8, 28, "Input"],
Cell[433994, 7804, 122, 2, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[434153, 7811, 995, 21, 28, "Input"],
Cell[435151, 7834, 4142, 83, 264, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[439354, 7924, 241, 4, 64, "Section"],
Cell[439598, 7930, 3085, 57, 80, "Input"],
Cell[CellGroupData[{
Cell[442708, 7991, 2803, 62, 46, "Input"],
Cell[445514, 8055, 714, 11, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[446265, 8071, 187, 3, 28, "Input"],
Cell[446455, 8076, 1554, 42, 81, "Output"]
}, Open  ]],
Cell[448024, 8121, 184, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[448233, 8128, 2996, 71, 63, "Input"],
Cell[451232, 8201, 879, 12, 28, "Output"]
}, Open  ]],
Cell[452126, 8216, 45757, 1210, 1638, "Input"],
Cell[497886, 9428, 520, 11, 28, "Input"],
Cell[498409, 9441, 151, 3, 28, "Input"],
Cell[498563, 9446, 16104, 363, 1113, "Text"],
Cell[514670, 9811, 1188, 18, 88, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

